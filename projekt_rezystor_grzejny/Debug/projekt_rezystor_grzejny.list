
projekt_rezystor_grzejny.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08009f58  08009f58  00019f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a35c  0800a35c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a364  0800a364  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a364  0800a364  0001a364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a368  0800a368  0001a368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a36c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  200001e0  0800a54c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800a54c  000207f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc9d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a6  00000000  00000000  0003cead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00040658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  00041b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002965a  00000000  00000000  00042e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6a1  00000000  00000000  0006c4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f85e2  00000000  00000000  00088b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018116d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069a0  00000000  00000000  001811c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009f40 	.word	0x08009f40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009f40 	.word	0x08009f40

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9b9 	b.w	800101c <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b96e 	b.w	800101c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468c      	mov	ip, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8083 	bne.w	8000e6e <__udivmoddi4+0x116>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d947      	bls.n	8000dfe <__udivmoddi4+0xa6>
 8000d6e:	fab2 f282 	clz	r2, r2
 8000d72:	b142      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	f1c2 0020 	rsb	r0, r2, #32
 8000d78:	fa24 f000 	lsr.w	r0, r4, r0
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4097      	lsls	r7, r2
 8000d80:	ea40 0c01 	orr.w	ip, r0, r1
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d90:	fa1f fe87 	uxth.w	lr, r7
 8000d94:	fb08 c116 	mls	r1, r8, r6, ip
 8000d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000daa:	f080 8119 	bcs.w	8000fe0 <__udivmoddi4+0x288>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8116 	bls.w	8000fe0 <__udivmoddi4+0x288>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd6:	f080 8105 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f240 8102 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000de0:	3802      	subs	r0, #2
 8000de2:	443c      	add	r4, r7
 8000de4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	b902      	cbnz	r2, 8000e02 <__udivmoddi4+0xaa>
 8000e00:	deff      	udf	#255	; 0xff
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d150      	bne.n	8000eac <__udivmoddi4+0x154>
 8000e0a:	1bcb      	subs	r3, r1, r7
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	fa1f f887 	uxth.w	r8, r7
 8000e14:	2601      	movs	r6, #1
 8000e16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e1a:	0c21      	lsrs	r1, r4, #16
 8000e1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb08 f30c 	mul.w	r3, r8, ip
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0xe2>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	f200 80e9 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x10c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x10a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80d9 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e7bf      	b.n	8000dee <__udivmoddi4+0x96>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0x12e>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80b1 	beq.w	8000fda <__udivmoddi4+0x282>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x1cc>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0x140>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80b8 	bhi.w	8001008 <__udivmoddi4+0x2b0>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0a8      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000ea6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eaa:	e7a5      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb4:	4097      	lsls	r7, r2
 8000eb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebe:	40d9      	lsrs	r1, r3
 8000ec0:	4330      	orrs	r0, r6
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec8:	fa1f f887 	uxth.w	r8, r7
 8000ecc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed4:	fb06 f108 	mul.w	r1, r6, r8
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	fa04 f402 	lsl.w	r4, r4, r2
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x19c>
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ee6:	f080 808d 	bcs.w	8001004 <__udivmoddi4+0x2ac>
 8000eea:	4299      	cmp	r1, r3
 8000eec:	f240 808a 	bls.w	8001004 <__udivmoddi4+0x2ac>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	443b      	add	r3, r7
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b281      	uxth	r1, r0
 8000ef8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb00 f308 	mul.w	r3, r0, r8
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivmoddi4+0x1c4>
 8000f0c:	1879      	adds	r1, r7, r1
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f12:	d273      	bcs.n	8000ffc <__udivmoddi4+0x2a4>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d971      	bls.n	8000ffc <__udivmoddi4+0x2a4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4439      	add	r1, r7
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f22:	e778      	b.n	8000e16 <__udivmoddi4+0xbe>
 8000f24:	f1c6 0c20 	rsb	ip, r6, #32
 8000f28:	fa03 f406 	lsl.w	r4, r3, r6
 8000f2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f30:	431c      	orrs	r4, r3
 8000f32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f42:	431f      	orrs	r7, r3
 8000f44:	0c3b      	lsrs	r3, r7, #16
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fa1f f884 	uxth.w	r8, r4
 8000f4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f56:	fb09 fa08 	mul.w	sl, r9, r8
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f60:	fa00 f306 	lsl.w	r3, r0, r6
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x220>
 8000f66:	1861      	adds	r1, r4, r1
 8000f68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f6c:	d248      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000f6e:	458a      	cmp	sl, r1
 8000f70:	d946      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000f72:	f1a9 0902 	sub.w	r9, r9, #2
 8000f76:	4421      	add	r1, r4
 8000f78:	eba1 010a 	sub.w	r1, r1, sl
 8000f7c:	b2bf      	uxth	r7, r7
 8000f7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f8a:	fb00 f808 	mul.w	r8, r0, r8
 8000f8e:	45b8      	cmp	r8, r7
 8000f90:	d907      	bls.n	8000fa2 <__udivmoddi4+0x24a>
 8000f92:	19e7      	adds	r7, r4, r7
 8000f94:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f98:	d22e      	bcs.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d92c      	bls.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4427      	add	r7, r4
 8000fa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa6:	eba7 0708 	sub.w	r7, r7, r8
 8000faa:	fba0 8902 	umull	r8, r9, r0, r2
 8000fae:	454f      	cmp	r7, r9
 8000fb0:	46c6      	mov	lr, r8
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	d31a      	bcc.n	8000fec <__udivmoddi4+0x294>
 8000fb6:	d017      	beq.n	8000fe8 <__udivmoddi4+0x290>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x27a>
 8000fba:	ebb3 020e 	subs.w	r2, r3, lr
 8000fbe:	eb67 0701 	sbc.w	r7, r7, r1
 8000fc2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc6:	40f2      	lsrs	r2, r6
 8000fc8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fcc:	40f7      	lsrs	r7, r6
 8000fce:	e9c5 2700 	strd	r2, r7, [r5]
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	462e      	mov	r6, r5
 8000fdc:	4628      	mov	r0, r5
 8000fde:	e70b      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	e6fd      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fe8:	4543      	cmp	r3, r8
 8000fea:	d2e5      	bcs.n	8000fb8 <__udivmoddi4+0x260>
 8000fec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ff0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	e7df      	b.n	8000fb8 <__udivmoddi4+0x260>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e7d2      	b.n	8000fa2 <__udivmoddi4+0x24a>
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	e78d      	b.n	8000f1c <__udivmoddi4+0x1c4>
 8001000:	4681      	mov	r9, r0
 8001002:	e7b9      	b.n	8000f78 <__udivmoddi4+0x220>
 8001004:	4666      	mov	r6, ip
 8001006:	e775      	b.n	8000ef4 <__udivmoddi4+0x19c>
 8001008:	4630      	mov	r0, r6
 800100a:	e74a      	b.n	8000ea2 <__udivmoddi4+0x14a>
 800100c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001010:	4439      	add	r1, r7
 8001012:	e713      	b.n	8000e3c <__udivmoddi4+0xe4>
 8001014:	3802      	subs	r0, #2
 8001016:	443c      	add	r4, r7
 8001018:	e724      	b.n	8000e64 <__udivmoddi4+0x10c>
 800101a:	bf00      	nop

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <BMP280_Read8+0x38>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	b29a      	uxth	r2, r3
 8001036:	230a      	movs	r3, #10
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2301      	movs	r3, #1
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	f107 030f 	add.w	r3, r7, #15
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	21ec      	movs	r1, #236	; 0xec
 8001048:	f002 f8dc 	bl	8003204 <HAL_I2C_Mem_Read>
  return tmp;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000224 	.word	0x20000224

0800105c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af04      	add	r7, sp, #16
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <BMP280_Read16+0x40>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	b29a      	uxth	r2, r3
 800106e:	230a      	movs	r3, #10
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2302      	movs	r3, #2
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	21ec      	movs	r1, #236	; 0xec
 8001080:	f002 f8c0 	bl	8003204 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001084:	7b3b      	ldrb	r3, [r7, #12]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000224 	.word	0x20000224

080010a0 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffd5 	bl	800105c <BMP280_Read16>
 80010b2:	4603      	mov	r3, r0
 80010b4:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b21a      	sxth	r2, r3
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	b29b      	uxth	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af04      	add	r7, sp, #16
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <BMP280_Write8+0x34>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	230a      	movs	r3, #10
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	1dbb      	adds	r3, r7, #6
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	21ec      	movs	r1, #236	; 0xec
 80010fc:	f001 ff6e 	bl	8002fdc <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000224 	.word	0x20000224

0800110c <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <BMP280_Read24+0x40>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	b29a      	uxth	r2, r3
 800111e:	230a      	movs	r3, #10
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2303      	movs	r3, #3
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	21ec      	movs	r1, #236	; 0xec
 8001130:	f002 f868 	bl	8003204 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	041a      	lsls	r2, r3, #16
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	4313      	orrs	r3, r2
 800113e:	7bba      	ldrb	r2, [r7, #14]
 8001140:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000224 	.word	0x20000224

08001150 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4603      	mov	r3, r0
 8001160:	70fb      	strb	r3, [r7, #3]
 8001162:	460b      	mov	r3, r1
 8001164:	70bb      	strb	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800116a:	4a48      	ldr	r2, [pc, #288]	; (800128c <BMP280_Init+0x13c>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d901      	bls.n	800117a <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8001176:	2303      	movs	r3, #3
 8001178:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800117a:	4a45      	ldr	r2, [pc, #276]	; (8001290 <BMP280_Init+0x140>)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8001186:	2300      	movs	r3, #0
 8001188:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	2b05      	cmp	r3, #5
 800118e:	d901      	bls.n	8001194 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001190:	2305      	movs	r3, #5
 8001192:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001194:	4a3f      	ldr	r2, [pc, #252]	; (8001294 <BMP280_Init+0x144>)
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800119a:	78bb      	ldrb	r3, [r7, #2]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d901      	bls.n	80011a4 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80011a0:	2305      	movs	r3, #5
 80011a2:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80011a4:	4a3c      	ldr	r2, [pc, #240]	; (8001298 <BMP280_Init+0x148>)
 80011a6:	78bb      	ldrb	r3, [r7, #2]
 80011a8:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80011aa:	bf00      	nop
 80011ac:	20d0      	movs	r0, #208	; 0xd0
 80011ae:	f7ff ff37 	bl	8001020 <BMP280_Read8>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b58      	cmp	r3, #88	; 0x58
 80011b6:	d1f9      	bne.n	80011ac <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011b8:	2088      	movs	r0, #136	; 0x88
 80011ba:	f7ff ff71 	bl	80010a0 <BMP280_Read16LE>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <BMP280_Init+0x14c>)
 80011c4:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011c6:	208a      	movs	r0, #138	; 0x8a
 80011c8:	f7ff ff6a 	bl	80010a0 <BMP280_Read16LE>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <BMP280_Init+0x150>)
 80011d2:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011d4:	208c      	movs	r0, #140	; 0x8c
 80011d6:	f7ff ff63 	bl	80010a0 <BMP280_Read16LE>
 80011da:	4603      	mov	r3, r0
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <BMP280_Init+0x154>)
 80011e0:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011e2:	208e      	movs	r0, #142	; 0x8e
 80011e4:	f7ff ff5c 	bl	80010a0 <BMP280_Read16LE>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <BMP280_Init+0x158>)
 80011ee:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011f0:	2090      	movs	r0, #144	; 0x90
 80011f2:	f7ff ff55 	bl	80010a0 <BMP280_Read16LE>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <BMP280_Init+0x15c>)
 80011fc:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80011fe:	2092      	movs	r0, #146	; 0x92
 8001200:	f7ff ff4e 	bl	80010a0 <BMP280_Read16LE>
 8001204:	4603      	mov	r3, r0
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <BMP280_Init+0x160>)
 800120a:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800120c:	2094      	movs	r0, #148	; 0x94
 800120e:	f7ff ff47 	bl	80010a0 <BMP280_Read16LE>
 8001212:	4603      	mov	r3, r0
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <BMP280_Init+0x164>)
 8001218:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800121a:	2096      	movs	r0, #150	; 0x96
 800121c:	f7ff ff40 	bl	80010a0 <BMP280_Read16LE>
 8001220:	4603      	mov	r3, r0
 8001222:	b21a      	sxth	r2, r3
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <BMP280_Init+0x168>)
 8001226:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001228:	2098      	movs	r0, #152	; 0x98
 800122a:	f7ff ff39 	bl	80010a0 <BMP280_Read16LE>
 800122e:	4603      	mov	r3, r0
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <BMP280_Init+0x16c>)
 8001234:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001236:	209a      	movs	r0, #154	; 0x9a
 8001238:	f7ff ff32 	bl	80010a0 <BMP280_Read16LE>
 800123c:	4603      	mov	r3, r0
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <BMP280_Init+0x170>)
 8001242:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001244:	209c      	movs	r0, #156	; 0x9c
 8001246:	f7ff ff2b 	bl	80010a0 <BMP280_Read16LE>
 800124a:	4603      	mov	r3, r0
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <BMP280_Init+0x174>)
 8001250:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001252:	209e      	movs	r0, #158	; 0x9e
 8001254:	f7ff ff24 	bl	80010a0 <BMP280_Read16LE>
 8001258:	4603      	mov	r3, r0
 800125a:	b21a      	sxth	r2, r3
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <BMP280_Init+0x178>)
 800125e:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	015b      	lsls	r3, r3, #5
 8001264:	b25a      	sxtb	r2, r3
 8001266:	78bb      	ldrb	r3, [r7, #2]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	b25b      	sxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b25a      	sxtb	r2, r3
 8001270:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001274:	4313      	orrs	r3, r2
 8001276:	b25b      	sxtb	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4619      	mov	r1, r3
 800127c:	20f4      	movs	r0, #244	; 0xf4
 800127e:	f7ff ff29 	bl	80010d4 <BMP280_Write8>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000224 	.word	0x20000224
 8001290:	20000228 	.word	0x20000228
 8001294:	20000220 	.word	0x20000220
 8001298:	20000212 	.word	0x20000212
 800129c:	2000021e 	.word	0x2000021e
 80012a0:	20000214 	.word	0x20000214
 80012a4:	2000020c 	.word	0x2000020c
 80012a8:	20000218 	.word	0x20000218
 80012ac:	2000020e 	.word	0x2000020e
 80012b0:	2000022a 	.word	0x2000022a
 80012b4:	2000022e 	.word	0x2000022e
 80012b8:	20000216 	.word	0x20000216
 80012bc:	2000021c 	.word	0x2000021c
 80012c0:	20000210 	.word	0x20000210
 80012c4:	2000021a 	.word	0x2000021a
 80012c8:	2000022c 	.word	0x2000022c

080012cc <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <BMP280_ReadTemperature+0xfc>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d16d      	bne.n	80013b6 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012da:	20f4      	movs	r0, #244	; 0xf4
 80012dc:	f7ff fea0 	bl	8001020 <BMP280_Read8>
 80012e0:	4603      	mov	r3, r0
 80012e2:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	f023 0303 	bic.w	r3, r3, #3
 80012ea:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	4619      	mov	r1, r3
 80012f8:	20f4      	movs	r0, #244	; 0xf4
 80012fa:	f7ff feeb 	bl	80010d4 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80012fe:	20f4      	movs	r0, #244	; 0xf4
 8001300:	f7ff fe8e 	bl	8001020 <BMP280_Read8>
 8001304:	4603      	mov	r3, r0
 8001306:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001308:	7dbb      	ldrb	r3, [r7, #22]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001310:	7dbb      	ldrb	r3, [r7, #22]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d14f      	bne.n	80013b6 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001316:	20f4      	movs	r0, #244	; 0xf4
 8001318:	f7ff fe82 	bl	8001020 <BMP280_Read8>
 800131c:	4603      	mov	r3, r0
 800131e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001320:	7dbb      	ldrb	r3, [r7, #22]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001328:	7dbb      	ldrb	r3, [r7, #22]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d000      	beq.n	8001330 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800132e:	e7f2      	b.n	8001316 <BMP280_ReadTemperature+0x4a>
				  break;
 8001330:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001332:	20fa      	movs	r0, #250	; 0xfa
 8001334:	f7ff feea 	bl	800110c <BMP280_Read24>
 8001338:	4603      	mov	r3, r0
 800133a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	111b      	asrs	r3, r3, #4
 8001340:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	10da      	asrs	r2, r3, #3
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <BMP280_ReadTemperature+0x100>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <BMP280_ReadTemperature+0x104>)
 8001350:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	12db      	asrs	r3, r3, #11
 800135a:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	111b      	asrs	r3, r3, #4
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <BMP280_ReadTemperature+0x100>)
 8001362:	8812      	ldrh	r2, [r2, #0]
 8001364:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	1112      	asrs	r2, r2, #4
 800136a:	4918      	ldr	r1, [pc, #96]	; (80013cc <BMP280_ReadTemperature+0x100>)
 800136c:	8809      	ldrh	r1, [r1, #0]
 800136e:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001370:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001374:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <BMP280_ReadTemperature+0x108>)
 8001378:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800137c:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001380:	139b      	asrs	r3, r3, #14
 8001382:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <BMP280_ReadTemperature+0x10c>)
 800138c:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <BMP280_ReadTemperature+0x10c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3380      	adds	r3, #128	; 0x80
 800139a:	121b      	asrs	r3, r3, #8
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80013a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ac:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013dc <BMP280_ReadTemperature+0x110>
 80013b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013b4:	e001      	b.n	80013ba <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013e0 <BMP280_ReadTemperature+0x114>
 80013ba:	eef0 7a47 	vmov.f32	s15, s14
}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000228 	.word	0x20000228
 80013cc:	2000021e 	.word	0x2000021e
 80013d0:	20000214 	.word	0x20000214
 80013d4:	2000020c 	.word	0x2000020c
 80013d8:	20000230 	.word	0x20000230
 80013dc:	42c80000 	.word	0x42c80000
 80013e0:	c2c60000 	.word	0xc2c60000

080013e4 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013e8:	b09c      	sub	sp, #112	; 0x70
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	64f8      	str	r0, [r7, #76]	; 0x4c
 80013ee:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80013f0:	f7ff ff6c 	bl	80012cc <BMP280_ReadTemperature>
 80013f4:	eef0 7a40 	vmov.f32	s15, s0
 80013f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013fa:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80013fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80015d4 <BMP280_ReadTemperatureAndPressure+0x1f0>
 8001408:	eef4 7a47 	vcmp.f32	s15, s14
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	d101      	bne.n	8001416 <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8001412:	23ff      	movs	r3, #255	; 0xff
 8001414:	e1d8      	b.n	80017c8 <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001416:	20f7      	movs	r0, #247	; 0xf7
 8001418:	f7ff fe78 	bl	800110c <BMP280_Read24>
 800141c:	4603      	mov	r3, r0
 800141e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8001420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001422:	111b      	asrs	r3, r3, #4
 8001424:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 8001426:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <BMP280_ReadTemperatureAndPressure+0x1f4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001430:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001434:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8001438:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 800143c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800143e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001440:	fb03 f102 	mul.w	r1, r3, r2
 8001444:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001448:	fb03 f302 	mul.w	r3, r3, r2
 800144c:	18ca      	adds	r2, r1, r3
 800144e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001450:	fba3 4503 	umull	r4, r5, r3, r3
 8001454:	1953      	adds	r3, r2, r5
 8001456:	461d      	mov	r5, r3
 8001458:	4b60      	ldr	r3, [pc, #384]	; (80015dc <BMP280_ReadTemperatureAndPressure+0x1f8>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	b21a      	sxth	r2, r3
 8001460:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001464:	fb02 f005 	mul.w	r0, r2, r5
 8001468:	fb04 f103 	mul.w	r1, r4, r3
 800146c:	4401      	add	r1, r0
 800146e:	fba4 2302 	umull	r2, r3, r4, r2
 8001472:	4419      	add	r1, r3
 8001474:	460b      	mov	r3, r1
 8001476:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800147a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800147e:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	b21a      	sxth	r2, r3
 8001486:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800148a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800148c:	fb03 f001 	mul.w	r0, r3, r1
 8001490:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001492:	fb02 f101 	mul.w	r1, r2, r1
 8001496:	4408      	add	r0, r1
 8001498:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800149a:	fba1 2302 	umull	r2, r3, r1, r2
 800149e:	18c1      	adds	r1, r0, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	0459      	lsls	r1, r3, #17
 80014ac:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80014b0:	0450      	lsls	r0, r2, #17
 80014b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014b6:	eb12 0800 	adds.w	r8, r2, r0
 80014ba:	eb43 0901 	adc.w	r9, r3, r1
 80014be:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 80014c2:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <BMP280_ReadTemperatureAndPressure+0x200>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014ce:	f04f 0000 	mov.w	r0, #0
 80014d2:	f04f 0100 	mov.w	r1, #0
 80014d6:	00d1      	lsls	r1, r2, #3
 80014d8:	2000      	movs	r0, #0
 80014da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014de:	1814      	adds	r4, r2, r0
 80014e0:	61bc      	str	r4, [r7, #24]
 80014e2:	414b      	adcs	r3, r1
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014ea:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80014ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f2:	fb03 f102 	mul.w	r1, r3, r2
 80014f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014fa:	fb03 f302 	mul.w	r3, r3, r2
 80014fe:	18ca      	adds	r2, r1, r3
 8001500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001502:	fba3 4503 	umull	r4, r5, r3, r3
 8001506:	1953      	adds	r3, r2, r5
 8001508:	461d      	mov	r5, r3
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <BMP280_ReadTemperatureAndPressure+0x204>)
 800150c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001510:	b21a      	sxth	r2, r3
 8001512:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001516:	fb02 f005 	mul.w	r0, r2, r5
 800151a:	fb04 f103 	mul.w	r1, r4, r3
 800151e:	4401      	add	r1, r0
 8001520:	fba4 2302 	umull	r2, r3, r4, r2
 8001524:	4419      	add	r1, r3
 8001526:	460b      	mov	r3, r1
 8001528:	f04f 0800 	mov.w	r8, #0
 800152c:	f04f 0900 	mov.w	r9, #0
 8001530:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001534:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001538:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <BMP280_ReadTemperatureAndPressure+0x208>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	b21a      	sxth	r2, r3
 8001544:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001548:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800154a:	fb03 f001 	mul.w	r0, r3, r1
 800154e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001550:	fb02 f101 	mul.w	r1, r2, r1
 8001554:	1844      	adds	r4, r0, r1
 8001556:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001558:	fba1 0102 	umull	r0, r1, r1, r2
 800155c:	1863      	adds	r3, r4, r1
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	030b      	lsls	r3, r1, #12
 800156a:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800156e:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001570:	eb18 0102 	adds.w	r1, r8, r2
 8001574:	6139      	str	r1, [r7, #16]
 8001576:	eb49 0303 	adc.w	r3, r9, r3
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001580:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001584:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001588:	1c11      	adds	r1, r2, #0
 800158a:	6439      	str	r1, [r7, #64]	; 0x40
 800158c:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001590:	647b      	str	r3, [r7, #68]	; 0x44
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <BMP280_ReadTemperatureAndPressure+0x20c>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b29a      	uxth	r2, r3
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80015a0:	4629      	mov	r1, r5
 80015a2:	fb02 f001 	mul.w	r0, r2, r1
 80015a6:	4621      	mov	r1, r4
 80015a8:	fb01 f103 	mul.w	r1, r1, r3
 80015ac:	4401      	add	r1, r0
 80015ae:	4620      	mov	r0, r4
 80015b0:	fba0 2302 	umull	r2, r3, r0, r2
 80015b4:	4419      	add	r1, r3
 80015b6:	460b      	mov	r3, r1
 80015b8:	f04f 0000 	mov.w	r0, #0
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	1058      	asrs	r0, r3, #1
 80015c2:	17d9      	asrs	r1, r3, #31
 80015c4:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 80015c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015cc:	4313      	orrs	r3, r2
 80015ce:	d111      	bne.n	80015f4 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 80015d0:	2300      	movs	r3, #0
 80015d2:	e0f9      	b.n	80017c8 <BMP280_ReadTemperatureAndPressure+0x3e4>
 80015d4:	c2c60000 	.word	0xc2c60000
 80015d8:	20000230 	.word	0x20000230
 80015dc:	2000021c 	.word	0x2000021c
 80015e0:	20000216 	.word	0x20000216
 80015e4:	2000022e 	.word	0x2000022e
 80015e8:	2000022a 	.word	0x2000022a
 80015ec:	2000020e 	.word	0x2000020e
 80015f0:	20000218 	.word	0x20000218
	  }
	  p = 1048576 - adc_P;
 80015f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015f6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80015fa:	461a      	mov	r2, r3
 80015fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001600:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 8001604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001606:	105b      	asrs	r3, r3, #1
 8001608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800160a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800160c:	07db      	lsls	r3, r3, #31
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001610:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001614:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001618:	4621      	mov	r1, r4
 800161a:	ebb1 0a02 	subs.w	sl, r1, r2
 800161e:	4629      	mov	r1, r5
 8001620:	eb61 0b03 	sbc.w	fp, r1, r3
 8001624:	4652      	mov	r2, sl
 8001626:	465b      	mov	r3, fp
 8001628:	1891      	adds	r1, r2, r2
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	415b      	adcs	r3, r3
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001634:	eb12 020a 	adds.w	r2, r2, sl
 8001638:	eb43 030b 	adc.w	r3, r3, fp
 800163c:	f04f 0000 	mov.w	r0, #0
 8001640:	f04f 0100 	mov.w	r1, #0
 8001644:	0199      	lsls	r1, r3, #6
 8001646:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800164a:	0190      	lsls	r0, r2, #6
 800164c:	1812      	adds	r2, r2, r0
 800164e:	eb41 0303 	adc.w	r3, r1, r3
 8001652:	f04f 0000 	mov.w	r0, #0
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	0099      	lsls	r1, r3, #2
 800165c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001660:	0090      	lsls	r0, r2, #2
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	eb12 020a 	adds.w	r2, r2, sl
 800166a:	eb43 030b 	adc.w	r3, r3, fp
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800167c:	0090      	lsls	r0, r2, #2
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	eb12 010a 	adds.w	r1, r2, sl
 8001686:	6339      	str	r1, [r7, #48]	; 0x30
 8001688:	eb43 030b 	adc.w	r3, r3, fp
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
 800168e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001692:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001696:	f7ff faf7 	bl	8000c88 <__aeabi_ldivmod>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	b218      	sxth	r0, r3
 80016aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80016ae:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	0b62      	lsrs	r2, r4, #13
 80016bc:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016c0:	136b      	asrs	r3, r5, #13
 80016c2:	fb02 f501 	mul.w	r5, r2, r1
 80016c6:	fb00 f403 	mul.w	r4, r0, r3
 80016ca:	442c      	add	r4, r5
 80016cc:	fba0 0102 	umull	r0, r1, r0, r2
 80016d0:	1863      	adds	r3, r4, r1
 80016d2:	4619      	mov	r1, r3
 80016d4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	0b62      	lsrs	r2, r4, #13
 80016e2:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016e6:	136b      	asrs	r3, r5, #13
 80016e8:	fb02 f501 	mul.w	r5, r2, r1
 80016ec:	fb00 f403 	mul.w	r4, r0, r3
 80016f0:	442c      	add	r4, r5
 80016f2:	fba0 0102 	umull	r0, r1, r0, r2
 80016f6:	1863      	adds	r3, r4, r1
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	0e42      	lsrs	r2, r0, #25
 8001704:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001708:	164b      	asrs	r3, r1, #25
 800170a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	b21a      	sxth	r2, r3
 8001716:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800171a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800171c:	fb03 f001 	mul.w	r0, r3, r1
 8001720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001722:	fb02 f101 	mul.w	r1, r2, r1
 8001726:	1844      	adds	r4, r0, r1
 8001728:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800172a:	fba1 0102 	umull	r0, r1, r1, r2
 800172e:	1863      	adds	r3, r4, r1
 8001730:	4619      	mov	r1, r3
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	0cc2      	lsrs	r2, r0, #19
 800173c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001740:	14cb      	asrs	r3, r1, #19
 8001742:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001746:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800174a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800174e:	1884      	adds	r4, r0, r2
 8001750:	62bc      	str	r4, [r7, #40]	; 0x28
 8001752:	eb41 0303 	adc.w	r3, r1, r3
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001758:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800175c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001760:	4621      	mov	r1, r4
 8001762:	1889      	adds	r1, r1, r2
 8001764:	6239      	str	r1, [r7, #32]
 8001766:	4629      	mov	r1, r5
 8001768:	eb43 0101 	adc.w	r1, r3, r1
 800176c:	6279      	str	r1, [r7, #36]	; 0x24
 800176e:	f04f 0000 	mov.w	r0, #0
 8001772:	f04f 0100 	mov.w	r1, #0
 8001776:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800177a:	4623      	mov	r3, r4
 800177c:	0a18      	lsrs	r0, r3, #8
 800177e:	462b      	mov	r3, r5
 8001780:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001784:	462b      	mov	r3, r5
 8001786:	1219      	asrs	r1, r3, #8
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <BMP280_ReadTemperatureAndPressure+0x3f8>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b21c      	sxth	r4, r3
 8001790:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	012b      	lsls	r3, r5, #4
 800179e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017a2:	0122      	lsls	r2, r4, #4
 80017a4:	1884      	adds	r4, r0, r2
 80017a6:	603c      	str	r4, [r7, #0]
 80017a8:	eb41 0303 	adc.w	r3, r1, r3
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017b2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 80017b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da00      	bge.n	80017be <BMP280_ReadTemperatureAndPressure+0x3da>
 80017bc:	33ff      	adds	r3, #255	; 0xff
 80017be:	121b      	asrs	r3, r3, #8
 80017c0:	461a      	mov	r2, r3
 80017c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c4:	601a      	str	r2, [r3, #0]

	  return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3770      	adds	r7, #112	; 0x70
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d2:	bf00      	nop
 80017d4:	2000022c 	.word	0x2000022c
 80017d8:	2000021a 	.word	0x2000021a
 80017dc:	20000210 	.word	0x20000210

080017e0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	4b68      	ldr	r3, [pc, #416]	; (8001998 <MX_GPIO_Init+0x1b8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a67      	ldr	r2, [pc, #412]	; (8001998 <MX_GPIO_Init+0x1b8>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b65      	ldr	r3, [pc, #404]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180e:	4b62      	ldr	r3, [pc, #392]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a61      	ldr	r2, [pc, #388]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <MX_GPIO_Init+0x1b8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b5c      	ldr	r3, [pc, #368]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a5b      	ldr	r2, [pc, #364]	; (8001998 <MX_GPIO_Init+0x1b8>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b59      	ldr	r3, [pc, #356]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	4b56      	ldr	r3, [pc, #344]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a55      	ldr	r2, [pc, #340]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b53      	ldr	r3, [pc, #332]	; (8001998 <MX_GPIO_Init+0x1b8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001856:	4b50      	ldr	r3, [pc, #320]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a4f      	ldr	r2, [pc, #316]	; (8001998 <MX_GPIO_Init+0x1b8>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800186e:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a49      	ldr	r2, [pc, #292]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <MX_GPIO_Init+0x1b8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f244 0181 	movw	r1, #16513	; 0x4081
 800188c:	4843      	ldr	r0, [pc, #268]	; (800199c <MX_GPIO_Init+0x1bc>)
 800188e:	f001 fae1 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2140      	movs	r1, #64	; 0x40
 8001896:	4842      	ldr	r0, [pc, #264]	; (80019a0 <MX_GPIO_Init+0x1c0>)
 8001898:	f001 fadc 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800189c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	483c      	ldr	r0, [pc, #240]	; (80019a4 <MX_GPIO_Init+0x1c4>)
 80018b4:	f001 f922 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018b8:	2332      	movs	r3, #50	; 0x32
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018c8:	230b      	movs	r3, #11
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4834      	ldr	r0, [pc, #208]	; (80019a4 <MX_GPIO_Init+0x1c4>)
 80018d4:	f001 f912 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018d8:	2386      	movs	r3, #134	; 0x86
 80018da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018e8:	230b      	movs	r3, #11
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	482d      	ldr	r0, [pc, #180]	; (80019a8 <MX_GPIO_Init+0x1c8>)
 80018f4:	f001 f902 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018f8:	f244 0381 	movw	r3, #16513	; 0x4081
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4822      	ldr	r0, [pc, #136]	; (800199c <MX_GPIO_Init+0x1bc>)
 8001912:	f001 f8f3 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001928:	230b      	movs	r3, #11
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4619      	mov	r1, r3
 8001932:	481a      	ldr	r0, [pc, #104]	; (800199c <MX_GPIO_Init+0x1bc>)
 8001934:	f001 f8e2 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001938:	2340      	movs	r3, #64	; 0x40
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	4814      	ldr	r0, [pc, #80]	; (80019a0 <MX_GPIO_Init+0x1c0>)
 8001950:	f001 f8d4 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	480e      	ldr	r0, [pc, #56]	; (80019a0 <MX_GPIO_Init+0x1c0>)
 8001968:	f001 f8c8 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800196c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800197e:	230b      	movs	r3, #11
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_GPIO_Init+0x1c0>)
 800198a:	f001 f8b7 	bl	8002afc <HAL_GPIO_Init>

}
 800198e:	bf00      	nop
 8001990:	3730      	adds	r7, #48	; 0x30
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40020400 	.word	0x40020400
 80019a0:	40021800 	.word	0x40021800
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020000 	.word	0x40020000

080019ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019b2:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <MX_I2C1_Init+0x78>)
 80019b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019b8:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <MX_I2C1_Init+0x7c>)
 80019ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e6:	480e      	ldr	r0, [pc, #56]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019e8:	f001 fa68 	bl	8002ebc <HAL_I2C_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019f2:	f000 f923 	bl	8001c3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019f6:	2100      	movs	r1, #0
 80019f8:	4809      	ldr	r0, [pc, #36]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019fa:	f001 ffc3 	bl	8003984 <HAL_I2CEx_ConfigAnalogFilter>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a04:	f000 f91a 	bl	8001c3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_I2C1_Init+0x74>)
 8001a0c:	f002 f805 	bl	8003a1a <HAL_I2CEx_ConfigDigitalFilter>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a16:	f000 f911 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000234 	.word	0x20000234
 8001a24:	40005400 	.word	0x40005400
 8001a28:	00808cd2 	.word	0x00808cd2

08001a2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0aa      	sub	sp, #168	; 0xa8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	2284      	movs	r2, #132	; 0x84
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f005 fbd9 	bl	8007204 <memset>
  if(i2cHandle->Instance==I2C1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <HAL_I2C_MspInit+0xb4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d13c      	bne.n	8001ad6 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fe20 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a76:	f000 f8e1 	bl	8001c3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9a:	2312      	movs	r3, #18
 8001a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aac:	2304      	movs	r3, #4
 8001aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <HAL_I2C_MspInit+0xbc>)
 8001aba:	f001 f81f 	bl	8002afc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	37a8      	adds	r7, #168	; 0xa8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020400 	.word	0x40020400

08001aec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af0:	f000 fe71 	bl	80027d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af4:	f000 f83a 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af8:	f7ff fe72 	bl	80017e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001afc:	f000 fd0a 	bl	8002514 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b00:	f000 fd98 	bl	8002634 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001b04:	f000 fb56 	bl	80021b4 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001b08:	f000 fbcc 	bl	80022a4 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001b0c:	f7ff ff4e 	bl	80019ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //PID_Regulator_Init(&pid);
  PID_Regulator_Init( & pid); // init PID
 8001b10:	4810      	ldr	r0, [pc, #64]	; (8001b54 <main+0x68>)
 8001b12:	f000 f899 	bl	8001c48 <PID_Regulator_Init>
  PID_SET_SETPOINT( & pid , 32.0); // base temp
 8001b16:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001b58 <main+0x6c>
 8001b1a:	480e      	ldr	r0, [pc, #56]	; (8001b54 <main+0x68>)
 8001b1c:	f000 f9dc 	bl	8001ed8 <PID_SET_SETPOINT>

  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <main+0x70>)
 8001b28:	f001 f994 	bl	8002e54 <HAL_GPIO_WritePin>
  BMP280_Init( & hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE); // Init temp&preasure sensor 
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	2101      	movs	r1, #1
 8001b32:	480b      	ldr	r0, [pc, #44]	; (8001b60 <main+0x74>)
 8001b34:	f7ff fb0c 	bl	8001150 <BMP280_Init>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); // turn off when init is completed 
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b3e:	4807      	ldr	r0, [pc, #28]	; (8001b5c <main+0x70>)
 8001b40:	f001 f988 	bl	8002e54 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT( & htim7); // sampling time to read temp
 8001b44:	4807      	ldr	r0, [pc, #28]	; (8001b64 <main+0x78>)
 8001b46:	f003 f9fb 	bl	8004f40 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start( & htim3, TIM_CHANNEL_1); // PWM control Resistor
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4806      	ldr	r0, [pc, #24]	; (8001b68 <main+0x7c>)
 8001b4e:	f003 fad1 	bl	80050f4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001b52:	e7fe      	b.n	8001b52 <main+0x66>
 8001b54:	20000280 	.word	0x20000280
 8001b58:	42000000 	.word	0x42000000
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	20000234 	.word	0x20000234
 8001b64:	20000308 	.word	0x20000308
 8001b68:	200002b8 	.word	0x200002b8

08001b6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	; 0x50
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	2230      	movs	r2, #48	; 0x30
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f005 fb42 	bl	8007204 <memset>
    0
  };
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
    0
  };

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8001b90:	f002 f8d8 	bl	8003d44 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <SystemClock_Config+0xc8>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a26      	ldr	r2, [pc, #152]	; (8001c34 <SystemClock_Config+0xc8>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <SystemClock_Config+0xc8>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <SystemClock_Config+0xcc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bb4:	4a20      	ldr	r2, [pc, #128]	; (8001c38 <SystemClock_Config+0xcc>)
 8001bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <SystemClock_Config+0xcc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001be0:	2348      	movs	r3, #72	; 0x48
 8001be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001be8:	2303      	movs	r3, #3
 8001bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig( & RCC_OscInitStruct) != HAL_OK) {
 8001bec:	f107 0320 	add.w	r3, r7, #32
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 f8b7 	bl	8003d64 <HAL_RCC_OscConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <SystemClock_Config+0x94>
    Error_Handler();
 8001bfc:	f000 f81e 	bl	8001c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001c00:	230f      	movs	r3, #15
 8001c02:	60fb      	str	r3, [r7, #12]
    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c04:	2302      	movs	r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig( & RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fb45 	bl	80042ac <HAL_RCC_ClockConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SystemClock_Config+0xc0>
    Error_Handler();
 8001c28:	f000 f808 	bl	8001c3c <Error_Handler>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3750      	adds	r7, #80	; 0x50
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40007000 	.word	0x40007000

08001c3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c40:	b672      	cpsid	i
}
 8001c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {}
 8001c44:	e7fe      	b.n	8001c44 <Error_Handler+0x8>
	...

08001c48 <PID_Regulator_Init>:
 *  Created on: Jan 15, 2022
 *      Author: mackop
 */
#include "pid.h"

void PID_Regulator_Init(PID_regulator * pid) {
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  pid -> param.Kp = 0.11071524461; // K gain
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <PID_Regulator_Init+0x58>)
 8001c54:	601a      	str	r2, [r3, #0]
  pid -> param.Ki = 0.000387312937110031; // I gain 
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <PID_Regulator_Init+0x5c>)
 8001c5a:	605a      	str	r2, [r3, #4]
  pid -> param.Kd = 1.5023432595749; // D gain 
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <PID_Regulator_Init+0x60>)
 8001c60:	609a      	str	r2, [r3, #8]
  pid -> param.Kc = 0.8 ;// antiwindup corrector
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a11      	ldr	r2, [pc, #68]	; (8001cac <PID_Regulator_Init+0x64>)
 8001c66:	60da      	str	r2, [r3, #12]
  pid -> param.dt = 0.1; // sample time
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <PID_Regulator_Init+0x68>)
 8001c6c:	611a      	str	r2, [r3, #16]
  pid -> param.limMax = 900; // saturation max 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <PID_Regulator_Init+0x6c>)
 8001c72:	615a      	str	r2, [r3, #20]
  pid -> param.limMin = 0; // saturation min 
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  pid -> tim_counter = 1000; // counter period to set pulse
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <PID_Regulator_Init+0x70>)
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
  pid -> prev_error = 0;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	621a      	str	r2, [r3, #32]
  pid -> Differentiator = 0;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	3de2bead 	.word	0x3de2bead
 8001ca4:	39cb1043 	.word	0x39cb1043
 8001ca8:	3fc04cc9 	.word	0x3fc04cc9
 8001cac:	3f4ccccd 	.word	0x3f4ccccd
 8001cb0:	3dcccccd 	.word	0x3dcccccd
 8001cb4:	44610000 	.word	0x44610000
 8001cb8:	447a0000 	.word	0x447a0000

08001cbc <PID_Limit_Signal>:

// saturation block 
float PID_Limit_Signal(PID_regulator * PID) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  PID -> signal_output = PID -> signal_output; // pulse = pulse / ( counter + 1 )
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	635a      	str	r2, [r3, #52]	; 0x34
  if (PID -> signal_output > PID -> param.limMax) {
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	dd03      	ble.n	8001cea <PID_Limit_Signal+0x2e>
    PID -> signal_output = PID -> param.limMax;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (PID -> signal_output < PID -> param.limMin) {
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	d503      	bpl.n	8001d08 <PID_Limit_Signal+0x4c>
    PID -> signal_output = PID -> param.limMin;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return PID -> signal_output;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0c:	ee07 3a90 	vmov	s15, r3
}
 8001d10:	eeb0 0a67 	vmov.f32	s0, s15
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <PID_Output_Signal>:
  PID -> prev_error = error;
  PID -> prev_Integrator = PID -> Integrator;
  return PID -> signal_output;
}
// PID signal with setpoint 
float PID_Output_Signal(PID_regulator * PID, float measured) {
 8001d1e:	b5b0      	push	{r4, r5, r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	ed87 0a00 	vstr	s0, [r7]
	if (PID -> setpoint){
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	f000 80c5 	beq.w	8001ec6 <PID_Output_Signal+0x1a8>
	  float error = PID -> setpoint - measured;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d42:	edd7 7a00 	vldr	s15, [r7]
 8001d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4a:	edc7 7a05 	vstr	s15, [r7, #20]
	  float u_pid;
	  // calc P * e
	  float P = PID -> param.Kp * error;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5c:	edc7 7a04 	vstr	s15, [r7, #16]

	  // calc KI * d/dt e
	  PID -> Integrator = PID -> prev_Integrator + (error + PID -> prev_error);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 6a08 	vldr	s13, [r3, #32]
 8001d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	  float I = PID -> param.Ki * PID -> Integrator * (PID -> param.dt / 2.0);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8e:	ee17 0a90 	vmov	r0, s15
 8001d92:	f7fe fbf9 	bl	8000588 <__aeabi_f2d>
 8001d96:	4604      	mov	r4, r0
 8001d98:	460d      	mov	r5, r1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fbf2 	bl	8000588 <__aeabi_f2d>
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dac:	f7fe fd6e 	bl	800088c <__aeabi_ddiv>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe fc3e 	bl	8000638 <__aeabi_dmul>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7fe ff10 	bl	8000be8 <__aeabi_d2f>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60fb      	str	r3, [r7, #12]

	  // calc D * sum(e)
	  PID -> Differentiator = (error - PID -> prev_error) / PID -> param.dt;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	  // calc PID
	  PID -> signal_output =( P + I + PID -> Differentiator)* PID -> tim_counter;
 8001dea:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	  u_pid = PID -> signal_output;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e14:	60bb      	str	r3, [r7, #8]

	  // saturation
	  PID -> signal_output = PID_Limit_Signal(PID);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ff50 	bl	8001cbc <PID_Limit_Signal>
 8001e1c:	eef0 7a40 	vmov.f32	s15, s0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	  // anti wind up
	  if (u_pid != PID -> signal_output) {
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001e2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e30:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	d03e      	beq.n	8001eb8 <PID_Output_Signal+0x19a>
		  I = ( PID -> param.Ki )/( PID -> param.Kc ) * PID -> Integrator * (PID -> param.dt / 2.0);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e54:	ee17 0a90 	vmov	r0, s15
 8001e58:	f7fe fb96 	bl	8000588 <__aeabi_f2d>
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	460d      	mov	r5, r1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb8f 	bl	8000588 <__aeabi_f2d>
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e72:	f7fe fd0b 	bl	800088c <__aeabi_ddiv>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	f7fe fbdb 	bl	8000638 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fead 	bl	8000be8 <__aeabi_d2f>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	60fb      	str	r3, [r7, #12]
		  PID -> signal_output = (P + I + PID -> Differentiator)* PID -> tim_counter;
 8001e92:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	  }

	  // PID memory
	  PID -> prev_error = error;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	621a      	str	r2, [r3, #32]
	  PID -> prev_Integrator = PID -> Integrator;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	return PID -> signal_output;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	ee07 3a90 	vmov	s15, r3
}
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bdb0      	pop	{r4, r5, r7, pc}

08001ed8 <PID_SET_SETPOINT>:
// setting setpoint via UART
void PID_SET_SETPOINT(PID_regulator * PID, float spoint) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	ed87 0a00 	vstr	s0, [r7]
  if (spoint < 21.3 && spoint > 71.1) {
 8001ee4:	6838      	ldr	r0, [r7, #0]
 8001ee6:	f7fe fb4f 	bl	8000588 <__aeabi_f2d>
 8001eea:	a311      	add	r3, pc, #68	; (adr r3, 8001f30 <PID_SET_SETPOINT+0x58>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe fe14 	bl	8000b1c <__aeabi_dcmplt>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00f      	beq.n	8001f1a <PID_SET_SETPOINT+0x42>
 8001efa:	6838      	ldr	r0, [r7, #0]
 8001efc:	f7fe fb44 	bl	8000588 <__aeabi_f2d>
 8001f00:	a30d      	add	r3, pc, #52	; (adr r3, 8001f38 <PID_SET_SETPOINT+0x60>)
 8001f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f06:	f7fe fe27 	bl	8000b58 <__aeabi_dcmpgt>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d004      	beq.n	8001f1a <PID_SET_SETPOINT+0x42>
    PID -> setpoint = 32.0;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8001f16:	61da      	str	r2, [r3, #28]
 8001f18:	e003      	b.n	8001f22 <PID_SET_SETPOINT+0x4a>
  } else {
    PID -> setpoint = spoint;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	61da      	str	r2, [r3, #28]
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	f3af 8000 	nop.w
 8001f30:	cccccccd 	.word	0xcccccccd
 8001f34:	40354ccc 	.word	0x40354ccc
 8001f38:	66666666 	.word	0x66666666
 8001f3c:	4051c666 	.word	0x4051c666

08001f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_MspInit+0x44>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_MspInit+0x44>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_MspInit+0x44>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_MspInit+0x44>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <HAL_MspInit+0x44>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_MspInit+0x44>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <NMI_Handler+0x4>

08001f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 fc3c 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM3_IRQHandler+0x10>)
 8001fe2:	f003 f981 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200002b8 	.word	0x200002b8

08001ff0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM7_IRQHandler+0x10>)
 8001ff6:	f003 f977 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000308 	.word	0x20000308

08002004 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
	return 1;
 8002008:	2301      	movs	r3, #1
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <_kill>:

int _kill(int pid, int sig)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800201e:	f005 f8c7 	bl	80071b0 <__errno>
 8002022:	4603      	mov	r3, r0
 8002024:	2216      	movs	r2, #22
 8002026:	601a      	str	r2, [r3, #0]
	return -1;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_exit>:

void _exit (int status)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800203c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ffe7 	bl	8002014 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002046:	e7fe      	b.n	8002046 <_exit+0x12>

08002048 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e00a      	b.n	8002070 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800205a:	f3af 8000 	nop.w
 800205e:	4601      	mov	r1, r0
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	60ba      	str	r2, [r7, #8]
 8002066:	b2ca      	uxtb	r2, r1
 8002068:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf0      	blt.n	800205a <_read+0x12>
	}

return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e009      	b.n	80020a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	60ba      	str	r2, [r7, #8]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dbf1      	blt.n	8002094 <_write+0x12>
	}
	return len;
 80020b0:	687b      	ldr	r3, [r7, #4]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_close>:

int _close(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	return -1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e2:	605a      	str	r2, [r3, #4]
	return 0;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <_isatty>:

int _isatty(int file)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
	return 1;
 80020fa:	2301      	movs	r3, #1
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
	return 0;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <_sbrk+0x5c>)
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <_sbrk+0x60>)
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <_sbrk+0x64>)
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <_sbrk+0x68>)
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	429a      	cmp	r2, r3
 8002152:	d207      	bcs.n	8002164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002154:	f005 f82c 	bl	80071b0 <__errno>
 8002158:	4603      	mov	r3, r0
 800215a:	220c      	movs	r2, #12
 800215c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002162:	e009      	b.n	8002178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <_sbrk+0x64>)
 8002174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002176:	68fb      	ldr	r3, [r7, #12]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20050000 	.word	0x20050000
 8002184:	00000400 	.word	0x00000400
 8002188:	200001fc 	.word	0x200001fc
 800218c:	200007f0 	.word	0x200007f0

08002190 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <SystemInit+0x20>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <SystemInit+0x20>)
 800219c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	; 0x38
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {
 80021ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
    0
  };
  TIM_MasterConfigTypeDef sMasterConfig = {
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
    0
  };
  TIM_OC_InitTypeDef sConfigOC = {
 80021d4:	463b      	mov	r3, r7
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
 80021e2:	615a      	str	r2, [r3, #20]
 80021e4:	619a      	str	r2, [r3, #24]
  };

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <MX_TIM3_Init+0xe8>)
 80021e8:	4a2d      	ldr	r2, [pc, #180]	; (80022a0 <MX_TIM3_Init+0xec>)
 80021ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <MX_TIM3_Init+0xe8>)
 80021ee:	2247      	movs	r2, #71	; 0x47
 80021f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <MX_TIM3_Init+0xe8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80021f8:	4b28      	ldr	r3, [pc, #160]	; (800229c <MX_TIM3_Init+0xe8>)
 80021fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002200:	4b26      	ldr	r3, [pc, #152]	; (800229c <MX_TIM3_Init+0xe8>)
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002206:	4b25      	ldr	r3, [pc, #148]	; (800229c <MX_TIM3_Init+0xe8>)
 8002208:	2280      	movs	r2, #128	; 0x80
 800220a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init( & htim3) != HAL_OK) {
 800220c:	4823      	ldr	r0, [pc, #140]	; (800229c <MX_TIM3_Init+0xe8>)
 800220e:	f002 fe3f 	bl	8004e90 <HAL_TIM_Base_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM3_Init+0x68>
    Error_Handler();
 8002218:	f7ff fd10 	bl	8001c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource( & htim3, & sClockSourceConfig) != HAL_OK) {
 8002222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002226:	4619      	mov	r1, r3
 8002228:	481c      	ldr	r0, [pc, #112]	; (800229c <MX_TIM3_Init+0xe8>)
 800222a:	f003 fa91 	bl	8005750 <HAL_TIM_ConfigClockSource>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM3_Init+0x84>
    Error_Handler();
 8002234:	f7ff fd02 	bl	8001c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init( & htim3) != HAL_OK) {
 8002238:	4818      	ldr	r0, [pc, #96]	; (800229c <MX_TIM3_Init+0xe8>)
 800223a:	f002 fef9 	bl	8005030 <HAL_TIM_PWM_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM3_Init+0x94>
    Error_Handler();
 8002244:	f7ff fcfa 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization( & htim3, & sMasterConfig) != HAL_OK) {
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	4619      	mov	r1, r3
 8002256:	4811      	ldr	r0, [pc, #68]	; (800229c <MX_TIM3_Init+0xe8>)
 8002258:	f003 ff2a 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM3_Init+0xb2>
    Error_Handler();
 8002262:	f7ff fceb 	bl	8001c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002266:	2360      	movs	r3, #96	; 0x60
 8002268:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800226e:	2302      	movs	r3, #2
 8002270:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel( & htim3, & sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002276:	463b      	mov	r3, r7
 8002278:	2200      	movs	r2, #0
 800227a:	4619      	mov	r1, r3
 800227c:	4807      	ldr	r0, [pc, #28]	; (800229c <MX_TIM3_Init+0xe8>)
 800227e:	f003 f953 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM3_Init+0xd8>
    Error_Handler();
 8002288:	f7ff fcd8 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit( & htim3);
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <MX_TIM3_Init+0xe8>)
 800228e:	f000 f883 	bl	8002398 <HAL_TIM_MspPostInit>

}
 8002292:	bf00      	nop
 8002294:	3738      	adds	r7, #56	; 0x38
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200002b8 	.word	0x200002b8
 80022a0:	40000400 	.word	0x40000400

080022a4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
  };

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <MX_TIM7_Init+0x68>)
 80022b6:	4a16      	ldr	r2, [pc, #88]	; (8002310 <MX_TIM7_Init+0x6c>)
 80022b8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <MX_TIM7_Init+0x68>)
 80022bc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80022c0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <MX_TIM7_Init+0x68>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <MX_TIM7_Init+0x68>)
 80022ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ce:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <MX_TIM7_Init+0x68>)
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init( & htim7) != HAL_OK) {
 80022d6:	480d      	ldr	r0, [pc, #52]	; (800230c <MX_TIM7_Init+0x68>)
 80022d8:	f002 fdda 	bl	8004e90 <HAL_TIM_Base_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM7_Init+0x42>
    Error_Handler();
 80022e2:	f7ff fcab 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization( & htim7, & sMasterConfig) != HAL_OK) {
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	4619      	mov	r1, r3
 80022f2:	4806      	ldr	r0, [pc, #24]	; (800230c <MX_TIM7_Init+0x68>)
 80022f4:	f003 fedc 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM7_Init+0x5e>
    Error_Handler();
 80022fe:	f7ff fc9d 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000308 	.word	0x20000308
 8002310:	40001400 	.word	0x40001400

08002314 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef * tim_baseHandle) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  if (tim_baseHandle -> Instance == TIM3) {
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1a      	ldr	r2, [pc, #104]	; (800238c <HAL_TIM_Base_MspInit+0x78>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d114      	bne.n	8002350 <HAL_TIM_Base_MspInit+0x3c>
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a19      	ldr	r2, [pc, #100]	; (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	201d      	movs	r0, #29
 8002344:	f000 fba3 	bl	8002a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002348:	201d      	movs	r0, #29
 800234a:	f000 fbbc 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }
}
 800234e:	e018      	b.n	8002382 <HAL_TIM_Base_MspInit+0x6e>
  } else if (tim_baseHandle -> Instance == TIM7) {
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0f      	ldr	r2, [pc, #60]	; (8002394 <HAL_TIM_Base_MspInit+0x80>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d113      	bne.n	8002382 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 8002360:	f043 0320 	orr.w	r3, r3, #32
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	2037      	movs	r0, #55	; 0x37
 8002378:	f000 fb89 	bl	8002a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800237c:	2037      	movs	r0, #55	; 0x37
 800237e:	f000 fba2 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40000400 	.word	0x40000400
 8002390:	40023800 	.word	0x40023800
 8002394:	40001400 	.word	0x40001400

08002398 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef * timHandle) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
    0
  };
  if (timHandle -> Instance == TIM3) {
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <HAL_TIM_MspPostInit+0x64>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d11b      	bne.n	80023f2 <HAL_TIM_MspPostInit+0x5a>
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_TIM_MspPostInit+0x68>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_TIM_MspPostInit+0x68>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_TIM_MspPostInit+0x68>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023d2:	2340      	movs	r3, #64	; 0x40
 80023d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023e2:	2302      	movs	r3, #2
 80023e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, & GPIO_InitStruct);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	4619      	mov	r1, r3
 80023ec:	4805      	ldr	r0, [pc, #20]	; (8002404 <HAL_TIM_MspPostInit+0x6c>)
 80023ee:	f000 fb85 	bl	8002afc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023f2:	bf00      	nop
 80023f4:	3720      	adds	r7, #32
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40000400 	.word	0x40000400
 8002400:	40023800 	.word	0x40023800
 8002404:	40020000 	.word	0x40020000

08002408 <SET_PID_TO_PWM>:
    /* USER CODE END TIM7_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SET_PID_TO_PWM(float pulse_width) {
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	ed87 0a01 	vstr	s0, [r7, #4]
  __HAL_TIM_SET_COMPARE( & htim3, TIM_CHANNEL_1, (uint32_t)(pulse_width));
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <SET_PID_TO_PWM+0x28>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	edd7 7a01 	vldr	s15, [r7, #4]
 800241a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800241e:	ee17 2a90 	vmov	r2, s15
 8002422:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	200002b8 	.word	0x200002b8

08002434 <SEND_VIA_UART>:
void SEND_VIA_UART(UART_HandleTypeDef *huart,float temperature){
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	ed87 0a00 	vstr	s0, [r7]
    char *text = calloc(1,6);
 8002440:	2106      	movs	r1, #6
 8002442:	2001      	movs	r0, #1
 8002444:	f004 feac 	bl	80071a0 <calloc>
 8002448:	4603      	mov	r3, r0
 800244a:	60fb      	str	r3, [r7, #12]
	sprintf((char*)text, "%.2f, ", temperature);
 800244c:	6838      	ldr	r0, [r7, #0]
 800244e:	f7fe f89b 	bl	8000588 <__aeabi_f2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4909      	ldr	r1, [pc, #36]	; (800247c <SEND_VIA_UART+0x48>)
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f005 fbbf 	bl	8007bdc <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*)text, strlen(text), 50);
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f7fd fed6 	bl	8000210 <strlen>
 8002464:	4603      	mov	r3, r0
 8002466:	b29a      	uxth	r2, r3
 8002468:	2332      	movs	r3, #50	; 0x32
 800246a:	68f9      	ldr	r1, [r7, #12]
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f003 ff19 	bl	80062a4 <HAL_UART_Transmit>
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	08009f58 	.word	0x08009f58

08002480 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if (htim -> Instance == TIM7) { // 100 ms sampling time -  timer
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1a      	ldr	r2, [pc, #104]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d11e      	bne.n	80024d0 <HAL_TIM_PeriodElapsedCallback+0x50>
    iter += 1;
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002494:	f993 3000 	ldrsb.w	r3, [r3]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	3301      	adds	r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	b25a      	sxtb	r2, r3
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80024a2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	4816      	ldr	r0, [pc, #88]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80024a8:	f000 fced 	bl	8002e86 <HAL_GPIO_TogglePin>
    BMP280_ReadTemperatureAndPressure( & temperature, & pressure);
 80024ac:	4915      	ldr	r1, [pc, #84]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80024ae:	4816      	ldr	r0, [pc, #88]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80024b0:	f7fe ff98 	bl	80013e4 <BMP280_ReadTemperatureAndPressure>
    SET_PID_TO_PWM(PID_Output_Signal(&pid ,temperature));
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	eeb0 0a67 	vmov.f32	s0, s15
 80024be:	4813      	ldr	r0, [pc, #76]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80024c0:	f7ff fc2d 	bl	8001d1e <PID_Output_Signal>
 80024c4:	eef0 7a40 	vmov.f32	s15, s0
 80024c8:	eeb0 0a67 	vmov.f32	s0, s15
 80024cc:	f7ff ff9c 	bl	8002408 <SET_PID_TO_PWM>
  }
  if (iter == 10) { // after 10 samples send it to UART
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80024d2:	f993 3000 	ldrsb.w	r3, [r3]
 80024d6:	2b0a      	cmp	r3, #10
 80024d8:	d10a      	bne.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x70>
	  SEND_VIA_UART(&huart3,temperature);
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	eeb0 0a67 	vmov.f32	s0, s15
 80024e4:	480a      	ldr	r0, [pc, #40]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80024e6:	f7ff ffa5 	bl	8002434 <SEND_VIA_UART>
    iter = 0;
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
  }
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40001400 	.word	0x40001400
 80024fc:	20000200 	.word	0x20000200
 8002500:	40020400 	.word	0x40020400
 8002504:	20000304 	.word	0x20000304
 8002508:	20000004 	.word	0x20000004
 800250c:	20000280 	.word	0x20000280
 8002510:	20000354 	.word	0x20000354

08002514 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_USART3_UART_Init+0x58>)
 800251a:	4a15      	ldr	r2, [pc, #84]	; (8002570 <MX_USART3_UART_Init+0x5c>)
 800251c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <MX_USART3_UART_Init+0x58>)
 8002520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002524:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_USART3_UART_Init+0x58>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_USART3_UART_Init+0x58>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_USART3_UART_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_USART3_UART_Init+0x58>)
 800253a:	220c      	movs	r2, #12
 800253c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <MX_USART3_UART_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_USART3_UART_Init+0x58>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <MX_USART3_UART_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_USART3_UART_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_USART3_UART_Init+0x58>)
 8002558:	f003 fe56 	bl	8006208 <HAL_UART_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002562:	f7ff fb6b 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000354 	.word	0x20000354
 8002570:	40004800 	.word	0x40004800

08002574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b0aa      	sub	sp, #168	; 0xa8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	2284      	movs	r2, #132	; 0x84
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f004 fe35 	bl	8007204 <memset>
  if(uartHandle->Instance==USART3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a22      	ldr	r2, [pc, #136]	; (8002628 <HAL_UART_MspInit+0xb4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d13c      	bne.n	800261e <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025aa:	2300      	movs	r3, #0
 80025ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 f87c 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025be:	f7ff fb3d 	bl	8001c3c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_UART_MspInit+0xb8>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a19      	ldr	r2, [pc, #100]	; (800262c <HAL_UART_MspInit+0xb8>)
 80025c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_UART_MspInit+0xb8>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_UART_MspInit+0xb8>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a13      	ldr	r2, [pc, #76]	; (800262c <HAL_UART_MspInit+0xb8>)
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_UART_MspInit+0xb8>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80025f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800260c:	2307      	movs	r3, #7
 800260e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002612:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002616:	4619      	mov	r1, r3
 8002618:	4805      	ldr	r0, [pc, #20]	; (8002630 <HAL_UART_MspInit+0xbc>)
 800261a:	f000 fa6f 	bl	8002afc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800261e:	bf00      	nop
 8002620:	37a8      	adds	r7, #168	; 0xa8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40004800 	.word	0x40004800
 800262c:	40023800 	.word	0x40023800
 8002630:	40020c00 	.word	0x40020c00

08002634 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800263a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800263e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002642:	2206      	movs	r2, #6
 8002644:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002648:	2202      	movs	r2, #2
 800264a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002654:	2202      	movs	r2, #2
 8002656:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800265a:	2201      	movs	r2, #1
 800265c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002660:	2200      	movs	r2, #0
 8002662:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002666:	2200      	movs	r2, #0
 8002668:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800266c:	2201      	movs	r2, #1
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002672:	2200      	movs	r2, #0
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002678:	f001 fa1b 	bl	8003ab2 <HAL_PCD_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002682:	f7ff fadb 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200003d8 	.word	0x200003d8

08002690 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0ac      	sub	sp, #176	; 0xb0
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a8:	f107 0318 	add.w	r3, r7, #24
 80026ac:	2284      	movs	r2, #132	; 0x84
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f004 fda7 	bl	8007204 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026be:	d159      	bne.n	8002774 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80026c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026cc:	f107 0318 	add.w	r3, r7, #24
 80026d0:	4618      	mov	r0, r3
 80026d2:	f001 ffed 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80026dc:	f7ff faae 	bl	8001c3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_PCD_MspInit+0xec>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	4a25      	ldr	r2, [pc, #148]	; (800277c <HAL_PCD_MspInit+0xec>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6313      	str	r3, [r2, #48]	; 0x30
 80026ec:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_PCD_MspInit+0xec>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80026f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80026fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270c:	2303      	movs	r3, #3
 800270e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002712:	230a      	movs	r3, #10
 8002714:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002718:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800271c:	4619      	mov	r1, r3
 800271e:	4818      	ldr	r0, [pc, #96]	; (8002780 <HAL_PCD_MspInit+0xf0>)
 8002720:	f000 f9ec 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002738:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800273c:	4619      	mov	r1, r3
 800273e:	4810      	ldr	r0, [pc, #64]	; (8002780 <HAL_PCD_MspInit+0xf0>)
 8002740:	f000 f9dc 	bl	8002afc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_PCD_MspInit+0xec>)
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	4a0c      	ldr	r2, [pc, #48]	; (800277c <HAL_PCD_MspInit+0xec>)
 800274a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800274e:	6353      	str	r3, [r2, #52]	; 0x34
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_PCD_MspInit+0xec>)
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <HAL_PCD_MspInit+0xec>)
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	4a06      	ldr	r2, [pc, #24]	; (800277c <HAL_PCD_MspInit+0xec>)
 8002762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002766:	6453      	str	r3, [r2, #68]	; 0x44
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <HAL_PCD_MspInit+0xec>)
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002774:	bf00      	nop
 8002776:	37b0      	adds	r7, #176	; 0xb0
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	40020000 	.word	0x40020000

08002784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002788:	480d      	ldr	r0, [pc, #52]	; (80027c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800278a:	490e      	ldr	r1, [pc, #56]	; (80027c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800278c:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002790:	e002      	b.n	8002798 <LoopCopyDataInit>

08002792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002796:	3304      	adds	r3, #4

08002798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800279c:	d3f9      	bcc.n	8002792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279e:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027a0:	4c0b      	ldr	r4, [pc, #44]	; (80027d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a4:	e001      	b.n	80027aa <LoopFillZerobss>

080027a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a8:	3204      	adds	r2, #4

080027aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ac:	d3fb      	bcc.n	80027a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027ae:	f7ff fcef 	bl	8002190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027b2:	f004 fd03 	bl	80071bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027b6:	f7ff f999 	bl	8001aec <main>
  bx  lr    
 80027ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80027c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80027c8:	0800a36c 	.word	0x0800a36c
  ldr r2, =_sbss
 80027cc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80027d0:	200007f0 	.word	0x200007f0

080027d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d4:	e7fe      	b.n	80027d4 <ADC_IRQHandler>

080027d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027da:	2003      	movs	r0, #3
 80027dc:	f000 f94c 	bl	8002a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f000 f805 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e6:	f7ff fbab 	bl	8001f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f967 	bl	8002ae2 <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800282c:	f000 f92f 	bl	8002a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000000 	.word	0x20000000
 8002848:	2000000c 	.word	0x2000000c
 800284c:	20000008 	.word	0x20000008

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	2000000c 	.word	0x2000000c
 8002874:	200007dc 	.word	0x200007dc

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	200007dc 	.word	0x200007dc

08002890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff ffee 	bl	8002878 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028a8:	d005      	beq.n	80028b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_Delay+0x44>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028b6:	bf00      	nop
 80028b8:	f7ff ffde 	bl	8002878 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d8f7      	bhi.n	80028b8 <HAL_Delay+0x28>
  {
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000000c 	.word	0x2000000c

080028d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <__NVIC_SetPriorityGrouping+0x40>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f4:	4013      	ands	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <__NVIC_SetPriorityGrouping+0x44>)
 8002902:	4313      	orrs	r3, r2
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <__NVIC_SetPriorityGrouping+0x40>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00
 800291c:	05fa0000 	.word	0x05fa0000

08002920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <__NVIC_GetPriorityGrouping+0x18>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 0307 	and.w	r3, r3, #7
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0b      	blt.n	8002966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4907      	ldr	r1, [pc, #28]	; (8002974 <__NVIC_EnableIRQ+0x38>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	; (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a44:	d301      	bcc.n	8002a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00f      	b.n	8002a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <SysTick_Config+0x40>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a52:	210f      	movs	r1, #15
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a58:	f7ff ff8e 	bl	8002978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <SysTick_Config+0x40>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <SysTick_Config+0x40>)
 8002a64:	2207      	movs	r2, #7
 8002a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	e000e010 	.word	0xe000e010

08002a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ff29 	bl	80028d8 <__NVIC_SetPriorityGrouping>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa0:	f7ff ff3e 	bl	8002920 <__NVIC_GetPriorityGrouping>
 8002aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f7ff ff8e 	bl	80029cc <NVIC_EncodePriority>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff5d 	bl	8002978 <__NVIC_SetPriority>
}
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff31 	bl	800293c <__NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffa2 	bl	8002a34 <SysTick_Config>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e175      	b.n	8002e08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8164 	bne.w	8002e02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d005      	beq.n	8002b52 <HAL_GPIO_Init+0x56>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d130      	bne.n	8002bb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0201 	and.w	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d017      	beq.n	8002bf0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d123      	bne.n	8002c44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80be 	beq.w	8002e02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_GPIO_Init+0x324>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_GPIO_Init+0x324>)
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	4b63      	ldr	r3, [pc, #396]	; (8002e20 <HAL_GPIO_Init+0x324>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c9e:	4a61      	ldr	r2, [pc, #388]	; (8002e24 <HAL_GPIO_Init+0x328>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_GPIO_Init+0x32c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d037      	beq.n	8002d3a <HAL_GPIO_Init+0x23e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a57      	ldr	r2, [pc, #348]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d031      	beq.n	8002d36 <HAL_GPIO_Init+0x23a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a56      	ldr	r2, [pc, #344]	; (8002e30 <HAL_GPIO_Init+0x334>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d02b      	beq.n	8002d32 <HAL_GPIO_Init+0x236>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a55      	ldr	r2, [pc, #340]	; (8002e34 <HAL_GPIO_Init+0x338>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d025      	beq.n	8002d2e <HAL_GPIO_Init+0x232>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a54      	ldr	r2, [pc, #336]	; (8002e38 <HAL_GPIO_Init+0x33c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01f      	beq.n	8002d2a <HAL_GPIO_Init+0x22e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a53      	ldr	r2, [pc, #332]	; (8002e3c <HAL_GPIO_Init+0x340>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d019      	beq.n	8002d26 <HAL_GPIO_Init+0x22a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <HAL_GPIO_Init+0x344>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0x226>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a51      	ldr	r2, [pc, #324]	; (8002e44 <HAL_GPIO_Init+0x348>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00d      	beq.n	8002d1e <HAL_GPIO_Init+0x222>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a50      	ldr	r2, [pc, #320]	; (8002e48 <HAL_GPIO_Init+0x34c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x21e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	; (8002e4c <HAL_GPIO_Init+0x350>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_GPIO_Init+0x21a>
 8002d12:	2309      	movs	r3, #9
 8002d14:	e012      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d16:	230a      	movs	r3, #10
 8002d18:	e010      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	e00e      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d1e:	2307      	movs	r3, #7
 8002d20:	e00c      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d22:	2306      	movs	r3, #6
 8002d24:	e00a      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d26:	2305      	movs	r3, #5
 8002d28:	e008      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	e006      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e004      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e002      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f002 0203 	and.w	r2, r2, #3
 8002d42:	0092      	lsls	r2, r2, #2
 8002d44:	4093      	lsls	r3, r2
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d4c:	4935      	ldr	r1, [pc, #212]	; (8002e24 <HAL_GPIO_Init+0x328>)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	3302      	adds	r3, #2
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d7e:	4a34      	ldr	r2, [pc, #208]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d84:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da8:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dae:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3301      	adds	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b0f      	cmp	r3, #15
 8002e0c:	f67f ae86 	bls.w	8002b1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40013800 	.word	0x40013800
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40020800 	.word	0x40020800
 8002e34:	40020c00 	.word	0x40020c00
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40021400 	.word	0x40021400
 8002e40:	40021800 	.word	0x40021800
 8002e44:	40021c00 	.word	0x40021c00
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40022400 	.word	0x40022400
 8002e50:	40013c00 	.word	0x40013c00

08002e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
 8002e60:	4613      	mov	r3, r2
 8002e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e70:	e003      	b.n	8002e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	041a      	lsls	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	619a      	str	r2, [r3, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e98:	887a      	ldrh	r2, [r7, #2]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	041a      	lsls	r2, r3, #16
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43d9      	mvns	r1, r3
 8002ea4:	887b      	ldrh	r3, [r7, #2]
 8002ea6:	400b      	ands	r3, r1
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e07f      	b.n	8002fce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe fda2 	bl	8001a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	e006      	b.n	8002f44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d104      	bne.n	8002f56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <HAL_I2C_Init+0x11c>)
 8002f62:	430b      	orrs	r3, r1
 8002f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	02008000 	.word	0x02008000

08002fdc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	817b      	strh	r3, [r7, #10]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	813b      	strh	r3, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	f040 80f9 	bne.w	80031f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_I2C_Mem_Write+0x34>
 800300a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003016:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0ed      	b.n	80031f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_I2C_Mem_Write+0x4e>
 8003026:	2302      	movs	r3, #2
 8003028:	e0e6      	b.n	80031f8 <HAL_I2C_Mem_Write+0x21c>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003032:	f7ff fc21 	bl	8002878 <HAL_GetTick>
 8003036:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	2319      	movs	r3, #25
 800303e:	2201      	movs	r2, #1
 8003040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fac3 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0d1      	b.n	80031f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2221      	movs	r2, #33	; 0x21
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2240      	movs	r2, #64	; 0x40
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a3a      	ldr	r2, [r7, #32]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800307c:	88f8      	ldrh	r0, [r7, #6]
 800307e:	893a      	ldrh	r2, [r7, #8]
 8003080:	8979      	ldrh	r1, [r7, #10]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	4603      	mov	r3, r0
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f9d3 	bl	8003438 <I2C_RequestMemoryWrite>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0a9      	b.n	80031f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	d90e      	bls.n	80030cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	22ff      	movs	r2, #255	; 0xff
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	8979      	ldrh	r1, [r7, #10]
 80030bc:	2300      	movs	r3, #0
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fc2b 	bl	8003920 <I2C_TransferConfig>
 80030ca:	e00f      	b.n	80030ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	8979      	ldrh	r1, [r7, #10]
 80030de:	2300      	movs	r3, #0
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fc1a 	bl	8003920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 faad 	bl	8003650 <I2C_WaitOnTXISFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e07b      	b.n	80031f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d034      	beq.n	80031a4 <HAL_I2C_Mem_Write+0x1c8>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	2b00      	cmp	r3, #0
 8003140:	d130      	bne.n	80031a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	2200      	movs	r2, #0
 800314a:	2180      	movs	r1, #128	; 0x80
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fa3f 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e04d      	b.n	80031f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	d90e      	bls.n	8003184 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	22ff      	movs	r2, #255	; 0xff
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	b2da      	uxtb	r2, r3
 8003172:	8979      	ldrh	r1, [r7, #10]
 8003174:	2300      	movs	r3, #0
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fbcf 	bl	8003920 <I2C_TransferConfig>
 8003182:	e00f      	b.n	80031a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	b2da      	uxtb	r2, r3
 8003194:	8979      	ldrh	r1, [r7, #10]
 8003196:	2300      	movs	r3, #0
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fbbe 	bl	8003920 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d19e      	bne.n	80030ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fa8c 	bl	80036d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e01a      	b.n	80031f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2220      	movs	r2, #32
 80031c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_I2C_Mem_Write+0x224>)
 80031d6:	400b      	ands	r3, r1
 80031d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
  }
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	fe00e800 	.word	0xfe00e800

08003204 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	4603      	mov	r3, r0
 8003214:	817b      	strh	r3, [r7, #10]
 8003216:	460b      	mov	r3, r1
 8003218:	813b      	strh	r3, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b20      	cmp	r3, #32
 8003228:	f040 80fd 	bne.w	8003426 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_I2C_Mem_Read+0x34>
 8003232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0f1      	b.n	8003428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_I2C_Mem_Read+0x4e>
 800324e:	2302      	movs	r3, #2
 8003250:	e0ea      	b.n	8003428 <HAL_I2C_Mem_Read+0x224>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800325a:	f7ff fb0d 	bl	8002878 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2319      	movs	r3, #25
 8003266:	2201      	movs	r2, #1
 8003268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f9af 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0d5      	b.n	8003428 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2222      	movs	r2, #34	; 0x22
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2240      	movs	r2, #64	; 0x40
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a3a      	ldr	r2, [r7, #32]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032a4:	88f8      	ldrh	r0, [r7, #6]
 80032a6:	893a      	ldrh	r2, [r7, #8]
 80032a8:	8979      	ldrh	r1, [r7, #10]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	4603      	mov	r3, r0
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f913 	bl	80034e0 <I2C_RequestMemoryRead>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0ad      	b.n	8003428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2bff      	cmp	r3, #255	; 0xff
 80032d4:	d90e      	bls.n	80032f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	22ff      	movs	r2, #255	; 0xff
 80032da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	8979      	ldrh	r1, [r7, #10]
 80032e4:	4b52      	ldr	r3, [pc, #328]	; (8003430 <HAL_I2C_Mem_Read+0x22c>)
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fb17 	bl	8003920 <I2C_TransferConfig>
 80032f2:	e00f      	b.n	8003314 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	b2da      	uxtb	r2, r3
 8003304:	8979      	ldrh	r1, [r7, #10]
 8003306:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <HAL_I2C_Mem_Read+0x22c>)
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fb06 	bl	8003920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	2200      	movs	r2, #0
 800331c:	2104      	movs	r1, #4
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f956 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e07c      	b.n	8003428 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d034      	beq.n	80033d4 <HAL_I2C_Mem_Read+0x1d0>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	2b00      	cmp	r3, #0
 8003370:	d130      	bne.n	80033d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	2200      	movs	r2, #0
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f927 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e04d      	b.n	8003428 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2bff      	cmp	r3, #255	; 0xff
 8003394:	d90e      	bls.n	80033b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	22ff      	movs	r2, #255	; 0xff
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	8979      	ldrh	r1, [r7, #10]
 80033a4:	2300      	movs	r3, #0
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fab7 	bl	8003920 <I2C_TransferConfig>
 80033b2:	e00f      	b.n	80033d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	8979      	ldrh	r1, [r7, #10]
 80033c6:	2300      	movs	r3, #0
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 faa6 	bl	8003920 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d19a      	bne.n	8003314 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f974 	bl	80036d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e01a      	b.n	8003428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2220      	movs	r2, #32
 80033f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_I2C_Mem_Read+0x230>)
 8003406:	400b      	ands	r3, r1
 8003408:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	80002400 	.word	0x80002400
 8003434:	fe00e800 	.word	0xfe00e800

08003438 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	4608      	mov	r0, r1
 8003442:	4611      	mov	r1, r2
 8003444:	461a      	mov	r2, r3
 8003446:	4603      	mov	r3, r0
 8003448:	817b      	strh	r3, [r7, #10]
 800344a:	460b      	mov	r3, r1
 800344c:	813b      	strh	r3, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	8979      	ldrh	r1, [r7, #10]
 8003458:	4b20      	ldr	r3, [pc, #128]	; (80034dc <I2C_RequestMemoryWrite+0xa4>)
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fa5d 	bl	8003920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	69b9      	ldr	r1, [r7, #24]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f8f0 	bl	8003650 <I2C_WaitOnTXISFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e02c      	b.n	80034d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003480:	893b      	ldrh	r3, [r7, #8]
 8003482:	b2da      	uxtb	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	629a      	str	r2, [r3, #40]	; 0x28
 800348a:	e015      	b.n	80034b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800348c:	893b      	ldrh	r3, [r7, #8]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	b29b      	uxth	r3, r3
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	69b9      	ldr	r1, [r7, #24]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f8d6 	bl	8003650 <I2C_WaitOnTXISFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e012      	b.n	80034d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ae:	893b      	ldrh	r3, [r7, #8]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2200      	movs	r2, #0
 80034c0:	2180      	movs	r1, #128	; 0x80
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f884 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	80002000 	.word	0x80002000

080034e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	4608      	mov	r0, r1
 80034ea:	4611      	mov	r1, r2
 80034ec:	461a      	mov	r2, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	817b      	strh	r3, [r7, #10]
 80034f2:	460b      	mov	r3, r1
 80034f4:	813b      	strh	r3, [r7, #8]
 80034f6:	4613      	mov	r3, r2
 80034f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	8979      	ldrh	r1, [r7, #10]
 8003500:	4b20      	ldr	r3, [pc, #128]	; (8003584 <I2C_RequestMemoryRead+0xa4>)
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	2300      	movs	r3, #0
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fa0a 	bl	8003920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	69b9      	ldr	r1, [r7, #24]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f89d 	bl	8003650 <I2C_WaitOnTXISFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e02c      	b.n	800357a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003526:	893b      	ldrh	r3, [r7, #8]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
 8003530:	e015      	b.n	800355e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003532:	893b      	ldrh	r3, [r7, #8]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	b29b      	uxth	r3, r3
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	69b9      	ldr	r1, [r7, #24]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f883 	bl	8003650 <I2C_WaitOnTXISFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e012      	b.n	800357a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003554:	893b      	ldrh	r3, [r7, #8]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2200      	movs	r2, #0
 8003566:	2140      	movs	r1, #64	; 0x40
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f831 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	80002000 	.word	0x80002000

08003588 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b02      	cmp	r3, #2
 800359c:	d103      	bne.n	80035a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2200      	movs	r2, #0
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d007      	beq.n	80035c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	619a      	str	r2, [r3, #24]
  }
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	4613      	mov	r3, r2
 80035de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e0:	e022      	b.n	8003628 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e8:	d01e      	beq.n	8003628 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	f7ff f945 	bl	8002878 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d302      	bcc.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d113      	bne.n	8003628 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e00f      	b.n	8003648 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	429a      	cmp	r2, r3
 8003644:	d0cd      	beq.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800365c:	e02c      	b.n	80036b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f870 	bl	8003748 <I2C_IsErrorOccurred>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e02a      	b.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003678:	d01e      	beq.n	80036b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7ff f8fd 	bl	8002878 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d113      	bne.n	80036b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e007      	b.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d1cb      	bne.n	800365e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036dc:	e028      	b.n	8003730 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f830 	bl	8003748 <I2C_IsErrorOccurred>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e026      	b.n	8003740 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7ff f8c1 	bl	8002878 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d113      	bne.n	8003730 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	f043 0220 	orr.w	r2, r3, #32
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e007      	b.n	8003740 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b20      	cmp	r3, #32
 800373c:	d1cf      	bne.n	80036de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b00      	cmp	r3, #0
 8003772:	d075      	beq.n	8003860 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2210      	movs	r2, #16
 800377a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800377c:	e056      	b.n	800382c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003784:	d052      	beq.n	800382c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7ff f877 	bl	8002878 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <I2C_IsErrorOccurred+0x54>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d147      	bne.n	800382c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037be:	d12e      	bne.n	800381e <I2C_IsErrorOccurred+0xd6>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c6:	d02a      	beq.n	800381e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d027      	beq.n	800381e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037dc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037de:	f7ff f84b 	bl	8002878 <HAL_GetTick>
 80037e2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037e4:	e01b      	b.n	800381e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037e6:	f7ff f847 	bl	8002878 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b19      	cmp	r3, #25
 80037f2:	d914      	bls.n	800381e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f043 0220 	orr.w	r2, r3, #32
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b20      	cmp	r3, #32
 800382a:	d1dc      	bne.n	80037e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b20      	cmp	r3, #32
 8003838:	d003      	beq.n	8003842 <I2C_IsErrorOccurred+0xfa>
 800383a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800383e:	2b00      	cmp	r3, #0
 8003840:	d09d      	beq.n	800377e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2220      	movs	r2, #32
 8003850:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003882:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	f043 0308 	orr.w	r3, r3, #8
 800389a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f043 0302 	orr.w	r3, r3, #2
 80038bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80038ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01c      	beq.n	8003910 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff fe56 	bl	8003588 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6859      	ldr	r1, [r3, #4]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <I2C_IsErrorOccurred+0x1d4>)
 80038e8:	400b      	ands	r3, r1
 80038ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003914:	4618      	mov	r0, r3
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	fe00e800 	.word	0xfe00e800

08003920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	817b      	strh	r3, [r7, #10]
 800392e:	4613      	mov	r3, r2
 8003930:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003932:	897b      	ldrh	r3, [r7, #10]
 8003934:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003938:	7a7b      	ldrb	r3, [r7, #9]
 800393a:	041b      	lsls	r3, r3, #16
 800393c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003940:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	4313      	orrs	r3, r2
 800394a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800394e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	0d5b      	lsrs	r3, r3, #21
 800395a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <I2C_TransferConfig+0x60>)
 8003960:	430b      	orrs	r3, r1
 8003962:	43db      	mvns	r3, r3
 8003964:	ea02 0103 	and.w	r1, r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	03ff63ff 	.word	0x03ff63ff

08003984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b20      	cmp	r3, #32
 8003998:	d138      	bne.n	8003a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e032      	b.n	8003a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	; 0x24
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d139      	bne.n	8003aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e033      	b.n	8003aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2224      	movs	r2, #36	; 0x24
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab4:	b08f      	sub	sp, #60	; 0x3c
 8003ab6:	af0a      	add	r7, sp, #40	; 0x28
 8003ab8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e116      	b.n	8003cf2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fe fdd6 	bl	8002690 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 f8b6 	bl	8006c74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	687e      	ldr	r6, [r7, #4]
 8003b10:	466d      	mov	r5, sp
 8003b12:	f106 0410 	add.w	r4, r6, #16
 8003b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b22:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b26:	1d33      	adds	r3, r6, #4
 8003b28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b2a:	6838      	ldr	r0, [r7, #0]
 8003b2c:	f003 f84a 	bl	8006bc4 <USB_CoreInit>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e0d7      	b.n	8003cf2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f003 f8a4 	bl	8006c96 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	e04a      	b.n	8003bea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b54:	7bfa      	ldrb	r2, [r7, #15]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	333d      	adds	r3, #61	; 0x3d
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	333c      	adds	r3, #60	; 0x3c
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	b298      	uxth	r0, r3
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	3342      	adds	r3, #66	; 0x42
 8003b90:	4602      	mov	r2, r0
 8003b92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	333f      	adds	r3, #63	; 0x3f
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3344      	adds	r3, #68	; 0x44
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3348      	adds	r3, #72	; 0x48
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	3350      	adds	r3, #80	; 0x50
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	3301      	adds	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3af      	bcc.n	8003b54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e044      	b.n	8003c84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c22:	7bfa      	ldrb	r2, [r7, #15]
 8003c24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c26:	7bfa      	ldrb	r2, [r7, #15]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c3c:	7bfa      	ldrb	r2, [r7, #15]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	3301      	adds	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d3b5      	bcc.n	8003bfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	687e      	ldr	r6, [r7, #4]
 8003c96:	466d      	mov	r5, sp
 8003c98:	f106 0410 	add.w	r4, r6, #16
 8003c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ca8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cac:	1d33      	adds	r3, r6, #4
 8003cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cb0:	6838      	ldr	r0, [r7, #0]
 8003cb2:	f003 f83d 	bl	8006d30 <USB_DevInit>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e014      	b.n	8003cf2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d102      	bne.n	8003ce6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f80b 	bl	8003cfc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f003 f9f7 	bl	80070de <USB_DevDisconnect>

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003cfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_PCDEx_ActivateLPM+0x44>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	10000003 	.word	0x10000003

08003d44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d52:	6013      	str	r3, [r2, #0]
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40007000 	.word	0x40007000

08003d64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e291      	b.n	800429e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8087 	beq.w	8003e96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d88:	4b96      	ldr	r3, [pc, #600]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d00c      	beq.n	8003dae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d94:	4b93      	ldr	r3, [pc, #588]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d112      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x62>
 8003da0:	4b90      	ldr	r3, [pc, #576]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dac:	d10b      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dae:	4b8d      	ldr	r3, [pc, #564]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d06c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x130>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d168      	bne.n	8003e94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e26b      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dce:	d106      	bne.n	8003dde <HAL_RCC_OscConfig+0x7a>
 8003dd0:	4b84      	ldr	r3, [pc, #528]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a83      	ldr	r2, [pc, #524]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e02e      	b.n	8003e3c <HAL_RCC_OscConfig+0xd8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x9c>
 8003de6:	4b7f      	ldr	r3, [pc, #508]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a7e      	ldr	r2, [pc, #504]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b7c      	ldr	r3, [pc, #496]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a7b      	ldr	r2, [pc, #492]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e01d      	b.n	8003e3c <HAL_RCC_OscConfig+0xd8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0xc0>
 8003e0a:	4b76      	ldr	r3, [pc, #472]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a75      	ldr	r2, [pc, #468]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b73      	ldr	r3, [pc, #460]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a72      	ldr	r2, [pc, #456]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0xd8>
 8003e24:	4b6f      	ldr	r3, [pc, #444]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a6e      	ldr	r2, [pc, #440]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4b6c      	ldr	r3, [pc, #432]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a6b      	ldr	r2, [pc, #428]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fe fd18 	bl	8002878 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fe fd14 	bl	8002878 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e21f      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0xe8>
 8003e6a:	e014      	b.n	8003e96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fe fd04 	bl	8002878 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e74:	f7fe fd00 	bl	8002878 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e20b      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e86:	4b57      	ldr	r3, [pc, #348]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x110>
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d069      	beq.n	8003f76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ea2:	4b50      	ldr	r3, [pc, #320]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eae:	4b4d      	ldr	r3, [pc, #308]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d11c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x190>
 8003eba:	4b4a      	ldr	r3, [pc, #296]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d116      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec6:	4b47      	ldr	r3, [pc, #284]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_RCC_OscConfig+0x17a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d001      	beq.n	8003ede <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e1df      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ede:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	493d      	ldr	r1, [pc, #244]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	e040      	b.n	8003f76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d023      	beq.n	8003f44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003efc:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a38      	ldr	r2, [pc, #224]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fe fcb6 	bl	8002878 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fe fcb2 	bl	8002878 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e1bd      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f22:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4929      	ldr	r1, [pc, #164]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
 8003f42:	e018      	b.n	8003f76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f44:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe fc92 	bl	8002878 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f58:	f7fe fc8e 	bl	8002878 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e199      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d038      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d019      	beq.n	8003fbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8e:	4a15      	ldr	r2, [pc, #84]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7fe fc6f 	bl	8002878 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9e:	f7fe fc6b 	bl	8002878 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e176      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x23a>
 8003fbc:	e01a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc2:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fca:	f7fe fc55 	bl	8002878 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd2:	f7fe fc51 	bl	8002878 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d903      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e15c      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
 8003fe4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe8:	4b91      	ldr	r3, [pc, #580]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8003fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ee      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a4 	beq.w	800414a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004002:	4b8b      	ldr	r3, [pc, #556]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10d      	bne.n	800402a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	4b88      	ldr	r3, [pc, #544]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	4a87      	ldr	r2, [pc, #540]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004018:	6413      	str	r3, [r2, #64]	; 0x40
 800401a:	4b85      	ldr	r3, [pc, #532]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402a:	4b82      	ldr	r3, [pc, #520]	; (8004234 <HAL_RCC_OscConfig+0x4d0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d118      	bne.n	8004068 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004036:	4b7f      	ldr	r3, [pc, #508]	; (8004234 <HAL_RCC_OscConfig+0x4d0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a7e      	ldr	r2, [pc, #504]	; (8004234 <HAL_RCC_OscConfig+0x4d0>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004042:	f7fe fc19 	bl	8002878 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404a:	f7fe fc15 	bl	8002878 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	; 0x64
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e120      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405c:	4b75      	ldr	r3, [pc, #468]	; (8004234 <HAL_RCC_OscConfig+0x4d0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x31a>
 8004070:	4b6f      	ldr	r3, [pc, #444]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	4a6e      	ldr	r2, [pc, #440]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	; 0x70
 800407c:	e02d      	b.n	80040da <HAL_RCC_OscConfig+0x376>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x33c>
 8004086:	4b6a      	ldr	r3, [pc, #424]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	4a69      	ldr	r2, [pc, #420]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	6713      	str	r3, [r2, #112]	; 0x70
 8004092:	4b67      	ldr	r3, [pc, #412]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	4a66      	ldr	r2, [pc, #408]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	6713      	str	r3, [r2, #112]	; 0x70
 800409e:	e01c      	b.n	80040da <HAL_RCC_OscConfig+0x376>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCC_OscConfig+0x35e>
 80040a8:	4b61      	ldr	r3, [pc, #388]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	4a60      	ldr	r2, [pc, #384]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	6713      	str	r3, [r2, #112]	; 0x70
 80040b4:	4b5e      	ldr	r3, [pc, #376]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4a5d      	ldr	r2, [pc, #372]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
 80040c0:	e00b      	b.n	80040da <HAL_RCC_OscConfig+0x376>
 80040c2:	4b5b      	ldr	r3, [pc, #364]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a5a      	ldr	r2, [pc, #360]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
 80040ce:	4b58      	ldr	r3, [pc, #352]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a57      	ldr	r2, [pc, #348]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040d4:	f023 0304 	bic.w	r3, r3, #4
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d015      	beq.n	800410e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e2:	f7fe fbc9 	bl	8002878 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fe fbc5 	bl	8002878 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0ce      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	4b4b      	ldr	r3, [pc, #300]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ee      	beq.n	80040ea <HAL_RCC_OscConfig+0x386>
 800410c:	e014      	b.n	8004138 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410e:	f7fe fbb3 	bl	8002878 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004114:	e00a      	b.n	800412c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fe fbaf 	bl	8002878 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e0b8      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412c:	4b40      	ldr	r3, [pc, #256]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ee      	bne.n	8004116 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b3c      	ldr	r3, [pc, #240]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a3b      	ldr	r2, [pc, #236]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80a4 	beq.w	800429c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004154:	4b36      	ldr	r3, [pc, #216]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d06b      	beq.n	8004238 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d149      	bne.n	80041fc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004168:	4b31      	ldr	r3, [pc, #196]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a30      	ldr	r2, [pc, #192]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 800416e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe fb80 	bl	8002878 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417c:	f7fe fb7c 	bl	8002878 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e087      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	4b28      	ldr	r3, [pc, #160]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69da      	ldr	r2, [r3, #28]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	019b      	lsls	r3, r3, #6
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	3b01      	subs	r3, #1
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	4313      	orrs	r3, r2
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041c6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a18      	ldr	r2, [pc, #96]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fe fb50 	bl	8002878 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fe fb4c 	bl	8002878 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e057      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x478>
 80041fa:	e04f      	b.n	800429c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0b      	ldr	r2, [pc, #44]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fe fb36 	bl	8002878 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fe fb32 	bl	8002878 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e03d      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x4ac>
 800422e:	e035      	b.n	800429c <HAL_RCC_OscConfig+0x538>
 8004230:	40023800 	.word	0x40023800
 8004234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004238:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <HAL_RCC_OscConfig+0x544>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d028      	beq.n	8004298 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d121      	bne.n	8004298 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d11a      	bne.n	8004298 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800426e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004270:	4293      	cmp	r3, r2
 8004272:	d111      	bne.n	8004298 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	3b01      	subs	r3, #1
 8004282:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d107      	bne.n	8004298 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800

080042ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0d0      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b6a      	ldr	r3, [pc, #424]	; (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d910      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b67      	ldr	r3, [pc, #412]	; (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 020f 	bic.w	r2, r3, #15
 80042da:	4965      	ldr	r1, [pc, #404]	; (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b63      	ldr	r3, [pc, #396]	; (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0b8      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800430c:	4b59      	ldr	r3, [pc, #356]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a58      	ldr	r2, [pc, #352]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004316:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004324:	4b53      	ldr	r3, [pc, #332]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a52      	ldr	r2, [pc, #328]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800432a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800432e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b50      	ldr	r3, [pc, #320]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	494d      	ldr	r1, [pc, #308]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d040      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b47      	ldr	r3, [pc, #284]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d115      	bne.n	800438e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e07f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e073      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3d      	ldr	r3, [pc, #244]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e06b      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b39      	ldr	r3, [pc, #228]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4936      	ldr	r1, [pc, #216]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a0:	f7fe fa6a 	bl	8002878 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fe fa66 	bl	8002878 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e053      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b27      	ldr	r3, [pc, #156]	; (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d210      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b24      	ldr	r3, [pc, #144]	; (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 020f 	bic.w	r2, r3, #15
 80043e6:	4922      	ldr	r1, [pc, #136]	; (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e032      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440c:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4916      	ldr	r1, [pc, #88]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800442a:	4b12      	ldr	r3, [pc, #72]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	490e      	ldr	r1, [pc, #56]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800443e:	f000 f821 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004442:	4602      	mov	r2, r0
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	490a      	ldr	r1, [pc, #40]	; (8004478 <HAL_RCC_ClockConfig+0x1cc>)
 8004450:	5ccb      	ldrb	r3, [r1, r3]
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <HAL_RCC_ClockConfig+0x1d0>)
 8004458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_RCC_ClockConfig+0x1d4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe f9c6 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023c00 	.word	0x40023c00
 8004474:	40023800 	.word	0x40023800
 8004478:	08009f60 	.word	0x08009f60
 800447c:	20000000 	.word	0x20000000
 8004480:	20000008 	.word	0x20000008

08004484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	2300      	movs	r3, #0
 8004496:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800449c:	4b67      	ldr	r3, [pc, #412]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d00d      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x40>
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	f200 80bd 	bhi.w	8004628 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x34>
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d003      	beq.n	80044be <HAL_RCC_GetSysClockFreq+0x3a>
 80044b6:	e0b7      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b8:	4b61      	ldr	r3, [pc, #388]	; (8004640 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044ba:	60bb      	str	r3, [r7, #8]
      break;
 80044bc:	e0b7      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044c0:	60bb      	str	r3, [r7, #8]
      break;
 80044c2:	e0b4      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c4:	4b5d      	ldr	r3, [pc, #372]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044cc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80044ce:	4b5b      	ldr	r3, [pc, #364]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d04d      	beq.n	8004576 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044da:	4b58      	ldr	r3, [pc, #352]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	461a      	mov	r2, r3
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	ea02 0800 	and.w	r8, r2, r0
 80044f2:	ea03 0901 	and.w	r9, r3, r1
 80044f6:	4640      	mov	r0, r8
 80044f8:	4649      	mov	r1, r9
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	014b      	lsls	r3, r1, #5
 8004504:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004508:	0142      	lsls	r2, r0, #5
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	ebb0 0008 	subs.w	r0, r0, r8
 8004512:	eb61 0109 	sbc.w	r1, r1, r9
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	018b      	lsls	r3, r1, #6
 8004520:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004524:	0182      	lsls	r2, r0, #6
 8004526:	1a12      	subs	r2, r2, r0
 8004528:	eb63 0301 	sbc.w	r3, r3, r1
 800452c:	f04f 0000 	mov.w	r0, #0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	00d9      	lsls	r1, r3, #3
 8004536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800453a:	00d0      	lsls	r0, r2, #3
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	eb12 0208 	adds.w	r2, r2, r8
 8004544:	eb43 0309 	adc.w	r3, r3, r9
 8004548:	f04f 0000 	mov.w	r0, #0
 800454c:	f04f 0100 	mov.w	r1, #0
 8004550:	0259      	lsls	r1, r3, #9
 8004552:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004556:	0250      	lsls	r0, r2, #9
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	461a      	mov	r2, r3
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	f7fc fbde 	bl	8000d28 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4613      	mov	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e04a      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004576:	4b31      	ldr	r3, [pc, #196]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	099b      	lsrs	r3, r3, #6
 800457c:	461a      	mov	r2, r3
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004586:	f04f 0100 	mov.w	r1, #0
 800458a:	ea02 0400 	and.w	r4, r2, r0
 800458e:	ea03 0501 	and.w	r5, r3, r1
 8004592:	4620      	mov	r0, r4
 8004594:	4629      	mov	r1, r5
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	014b      	lsls	r3, r1, #5
 80045a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045a4:	0142      	lsls	r2, r0, #5
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	1b00      	subs	r0, r0, r4
 80045ac:	eb61 0105 	sbc.w	r1, r1, r5
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	018b      	lsls	r3, r1, #6
 80045ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045be:	0182      	lsls	r2, r0, #6
 80045c0:	1a12      	subs	r2, r2, r0
 80045c2:	eb63 0301 	sbc.w	r3, r3, r1
 80045c6:	f04f 0000 	mov.w	r0, #0
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	00d9      	lsls	r1, r3, #3
 80045d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d4:	00d0      	lsls	r0, r2, #3
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	1912      	adds	r2, r2, r4
 80045dc:	eb45 0303 	adc.w	r3, r5, r3
 80045e0:	f04f 0000 	mov.w	r0, #0
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	0299      	lsls	r1, r3, #10
 80045ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045ee:	0290      	lsls	r0, r2, #10
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	f7fc fb92 	bl	8000d28 <__aeabi_uldivmod>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4613      	mov	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	3301      	adds	r3, #1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	60bb      	str	r3, [r7, #8]
      break;
 8004626:	e002      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800462a:	60bb      	str	r3, [r7, #8]
      break;
 800462c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462e:	68bb      	ldr	r3, [r7, #8]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800
 8004640:	00f42400 	.word	0x00f42400
 8004644:	007a1200 	.word	0x007a1200

08004648 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <HAL_RCC_GetHCLKFreq+0x14>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000000 	.word	0x20000000

08004660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004664:	f7ff fff0 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0a9b      	lsrs	r3, r3, #10
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4903      	ldr	r1, [pc, #12]	; (8004684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40023800 	.word	0x40023800
 8004684:	08009f70 	.word	0x08009f70

08004688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800468c:	f7ff ffdc 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004690:	4602      	mov	r2, r0
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	0b5b      	lsrs	r3, r3, #13
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	4903      	ldr	r1, [pc, #12]	; (80046ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800469e:	5ccb      	ldrb	r3, [r1, r3]
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40023800 	.word	0x40023800
 80046ac:	08009f70 	.word	0x08009f70

080046b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d012      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046d8:	4b69      	ldr	r3, [pc, #420]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a68      	ldr	r2, [pc, #416]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046e2:	6093      	str	r3, [r2, #8]
 80046e4:	4b66      	ldr	r3, [pc, #408]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	4964      	ldr	r1, [pc, #400]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046fa:	2301      	movs	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d017      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800470a:	4b5d      	ldr	r3, [pc, #372]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004710:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004718:	4959      	ldr	r1, [pc, #356]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004728:	d101      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d017      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004746:	4b4e      	ldr	r3, [pc, #312]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	494a      	ldr	r1, [pc, #296]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004764:	d101      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004766:	2301      	movs	r3, #1
 8004768:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004772:	2301      	movs	r3, #1
 8004774:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004782:	2301      	movs	r3, #1
 8004784:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 808b 	beq.w	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004794:	4b3a      	ldr	r3, [pc, #232]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	4a39      	ldr	r2, [pc, #228]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479e:	6413      	str	r3, [r2, #64]	; 0x40
 80047a0:	4b37      	ldr	r3, [pc, #220]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047ac:	4b35      	ldr	r3, [pc, #212]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a34      	ldr	r2, [pc, #208]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b8:	f7fe f85e 	bl	8002878 <HAL_GetTick>
 80047bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c0:	f7fe f85a 	bl	8002878 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	; 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e357      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047d2:	4b2c      	ldr	r3, [pc, #176]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047de:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d035      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d02e      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047fc:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004804:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004806:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a1d      	ldr	r2, [pc, #116]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a1a      	ldr	r2, [pc, #104]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800481e:	4a18      	ldr	r2, [pc, #96]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004824:	4b16      	ldr	r3, [pc, #88]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b01      	cmp	r3, #1
 800482e:	d114      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fe f822 	bl	8002878 <HAL_GetTick>
 8004834:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004836:	e00a      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fe f81e 	bl	8002878 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e319      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0ee      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004866:	d111      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004876:	400b      	ands	r3, r1
 8004878:	4901      	ldr	r1, [pc, #4]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
 800487e:	e00b      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004880:	40023800 	.word	0x40023800
 8004884:	40007000 	.word	0x40007000
 8004888:	0ffffcff 	.word	0x0ffffcff
 800488c:	4bb1      	ldr	r3, [pc, #708]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4ab0      	ldr	r2, [pc, #704]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004892:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004896:	6093      	str	r3, [r2, #8]
 8004898:	4bae      	ldr	r3, [pc, #696]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800489a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a4:	49ab      	ldr	r1, [pc, #684]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d010      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048b6:	4ba7      	ldr	r3, [pc, #668]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048bc:	4aa5      	ldr	r2, [pc, #660]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048c6:	4ba3      	ldr	r3, [pc, #652]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	49a0      	ldr	r1, [pc, #640]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048e4:	4b9b      	ldr	r3, [pc, #620]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048f2:	4998      	ldr	r1, [pc, #608]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004906:	4b93      	ldr	r3, [pc, #588]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004914:	498f      	ldr	r1, [pc, #572]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004928:	4b8a      	ldr	r3, [pc, #552]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004936:	4987      	ldr	r1, [pc, #540]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800494a:	4b82      	ldr	r3, [pc, #520]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	497e      	ldr	r1, [pc, #504]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800496c:	4b79      	ldr	r3, [pc, #484]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	f023 0203 	bic.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	4976      	ldr	r1, [pc, #472]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800498e:	4b71      	ldr	r3, [pc, #452]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	f023 020c 	bic.w	r2, r3, #12
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499c:	496d      	ldr	r1, [pc, #436]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049b0:	4b68      	ldr	r3, [pc, #416]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	4965      	ldr	r1, [pc, #404]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049d2:	4b60      	ldr	r3, [pc, #384]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e0:	495c      	ldr	r1, [pc, #368]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049f4:	4b57      	ldr	r3, [pc, #348]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a02:	4954      	ldr	r1, [pc, #336]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a16:	4b4f      	ldr	r3, [pc, #316]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a24:	494b      	ldr	r1, [pc, #300]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a38:	4b46      	ldr	r3, [pc, #280]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	4943      	ldr	r1, [pc, #268]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a5a:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a68:	493a      	ldr	r1, [pc, #232]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a7c:	4b35      	ldr	r3, [pc, #212]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a8a:	4932      	ldr	r1, [pc, #200]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d011      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a9e:	4b2d      	ldr	r3, [pc, #180]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aac:	4929      	ldr	r1, [pc, #164]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aec:	4919      	ldr	r1, [pc, #100]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00b      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b00:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b10:	4910      	ldr	r1, [pc, #64]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d006      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80d9 	beq.w	8004cde <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b38:	f7fd fe9e 	bl	8002878 <HAL_GetTick>
 8004b3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b3e:	e00b      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b40:	f7fd fe9a 	bl	8002878 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	; 0x64
 8004b4c:	d904      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e197      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b52:	bf00      	nop
 8004b54:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b58:	4b6c      	ldr	r3, [pc, #432]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1ed      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d021      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d11d      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b78:	4b64      	ldr	r3, [pc, #400]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7e:	0c1b      	lsrs	r3, r3, #16
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b86:	4b61      	ldr	r3, [pc, #388]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b8c:	0e1b      	lsrs	r3, r3, #24
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	019a      	lsls	r2, r3, #6
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	061b      	lsls	r3, r3, #24
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	071b      	lsls	r3, r3, #28
 8004bac:	4957      	ldr	r1, [pc, #348]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc8:	d00a      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d02e      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bde:	d129      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004be0:	4b4a      	ldr	r3, [pc, #296]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bee:	4b47      	ldr	r3, [pc, #284]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf4:	0f1b      	lsrs	r3, r3, #28
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	019a      	lsls	r2, r3, #6
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	061b      	lsls	r3, r3, #24
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	071b      	lsls	r3, r3, #28
 8004c14:	493d      	ldr	r1, [pc, #244]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c1c:	4b3b      	ldr	r3, [pc, #236]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c22:	f023 021f 	bic.w	r2, r3, #31
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	4937      	ldr	r1, [pc, #220]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01d      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c40:	4b32      	ldr	r3, [pc, #200]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c46:	0e1b      	lsrs	r3, r3, #24
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c4e:	4b2f      	ldr	r3, [pc, #188]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c54:	0f1b      	lsrs	r3, r3, #28
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	019a      	lsls	r2, r3, #6
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	041b      	lsls	r3, r3, #16
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	061b      	lsls	r3, r3, #24
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	071b      	lsls	r3, r3, #28
 8004c74:	4925      	ldr	r1, [pc, #148]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d011      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	019a      	lsls	r2, r3, #6
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	061b      	lsls	r3, r3, #24
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	071b      	lsls	r3, r3, #28
 8004ca4:	4919      	ldr	r1, [pc, #100]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cac:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a16      	ldr	r2, [pc, #88]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb8:	f7fd fdde 	bl	8002878 <HAL_GetTick>
 8004cbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cc0:	f7fd fdda 	bl	8002878 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	; 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e0d7      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	f040 80cd 	bne.w	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ce6:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf2:	f7fd fdc1 	bl	8002878 <HAL_GetTick>
 8004cf6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cf8:	e00a      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cfa:	f7fd fdbd 	bl	8002878 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b64      	cmp	r3, #100	; 0x64
 8004d06:	d903      	bls.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e0ba      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004d0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d10:	4b5e      	ldr	r3, [pc, #376]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d1c:	d0ed      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d02e      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d12a      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d46:	4b51      	ldr	r3, [pc, #324]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d54:	4b4d      	ldr	r3, [pc, #308]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	0f1b      	lsrs	r3, r3, #28
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	019a      	lsls	r2, r3, #6
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	041b      	lsls	r3, r3, #16
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	061b      	lsls	r3, r3, #24
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	071b      	lsls	r3, r3, #28
 8004d7a:	4944      	ldr	r1, [pc, #272]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d82:	4b42      	ldr	r3, [pc, #264]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	3b01      	subs	r3, #1
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	493d      	ldr	r1, [pc, #244]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d022      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db0:	d11d      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004db2:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	0e1b      	lsrs	r3, r3, #24
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dc0:	4b32      	ldr	r3, [pc, #200]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	0f1b      	lsrs	r3, r3, #28
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	019a      	lsls	r2, r3, #6
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	041b      	lsls	r3, r3, #16
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	061b      	lsls	r3, r3, #24
 8004de0:	431a      	orrs	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	071b      	lsls	r3, r3, #28
 8004de6:	4929      	ldr	r1, [pc, #164]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d028      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dfa:	4b24      	ldr	r3, [pc, #144]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	0e1b      	lsrs	r3, r3, #24
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e08:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0e:	0c1b      	lsrs	r3, r3, #16
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	019a      	lsls	r2, r3, #6
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	041b      	lsls	r3, r3, #16
 8004e20:	431a      	orrs	r2, r3
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	061b      	lsls	r3, r3, #24
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	071b      	lsls	r3, r3, #28
 8004e2e:	4917      	ldr	r1, [pc, #92]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	4911      	ldr	r1, [pc, #68]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0e      	ldr	r2, [pc, #56]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e58:	f7fd fd0e 	bl	8002878 <HAL_GetTick>
 8004e5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e60:	f7fd fd0a 	bl	8002878 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	; 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e007      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7e:	d1ef      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023800 	.word	0x40023800

08004e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e049      	b.n	8004f36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fd fa2c 	bl	8002314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f000 fd30 	bl	8005934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d001      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e054      	b.n	8005002 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a26      	ldr	r2, [pc, #152]	; (8005010 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d022      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f82:	d01d      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a22      	ldr	r2, [pc, #136]	; (8005014 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d018      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a21      	ldr	r2, [pc, #132]	; (8005018 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d013      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1f      	ldr	r2, [pc, #124]	; (800501c <HAL_TIM_Base_Start_IT+0xdc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1e      	ldr	r2, [pc, #120]	; (8005020 <HAL_TIM_Base_Start_IT+0xe0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d009      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a1c      	ldr	r2, [pc, #112]	; (8005024 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1b      	ldr	r2, [pc, #108]	; (8005028 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d115      	bne.n	8004fec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	4b19      	ldr	r3, [pc, #100]	; (800502c <HAL_TIM_Base_Start_IT+0xec>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b06      	cmp	r3, #6
 8004fd0:	d015      	beq.n	8004ffe <HAL_TIM_Base_Start_IT+0xbe>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d011      	beq.n	8004ffe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fea:	e008      	b.n	8004ffe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	e000      	b.n	8005000 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40010000 	.word	0x40010000
 8005014:	40000400 	.word	0x40000400
 8005018:	40000800 	.word	0x40000800
 800501c:	40000c00 	.word	0x40000c00
 8005020:	40010400 	.word	0x40010400
 8005024:	40014000 	.word	0x40014000
 8005028:	40001800 	.word	0x40001800
 800502c:	00010007 	.word	0x00010007

08005030 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e049      	b.n	80050d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f841 	bl	80050de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f000 fc60 	bl	8005934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <HAL_TIM_PWM_Start+0x24>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e03c      	b.n	8005192 <HAL_TIM_PWM_Start+0x9e>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b04      	cmp	r3, #4
 800511c:	d109      	bne.n	8005132 <HAL_TIM_PWM_Start+0x3e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b01      	cmp	r3, #1
 8005128:	bf14      	ite	ne
 800512a:	2301      	movne	r3, #1
 800512c:	2300      	moveq	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e02f      	b.n	8005192 <HAL_TIM_PWM_Start+0x9e>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b08      	cmp	r3, #8
 8005136:	d109      	bne.n	800514c <HAL_TIM_PWM_Start+0x58>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	e022      	b.n	8005192 <HAL_TIM_PWM_Start+0x9e>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d109      	bne.n	8005166 <HAL_TIM_PWM_Start+0x72>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b01      	cmp	r3, #1
 800515c:	bf14      	ite	ne
 800515e:	2301      	movne	r3, #1
 8005160:	2300      	moveq	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	e015      	b.n	8005192 <HAL_TIM_PWM_Start+0x9e>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b10      	cmp	r3, #16
 800516a:	d109      	bne.n	8005180 <HAL_TIM_PWM_Start+0x8c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	e008      	b.n	8005192 <HAL_TIM_PWM_Start+0x9e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e092      	b.n	80052c0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <HAL_TIM_PWM_Start+0xb6>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a8:	e023      	b.n	80051f2 <HAL_TIM_PWM_Start+0xfe>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_PWM_Start+0xc6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b8:	e01b      	b.n	80051f2 <HAL_TIM_PWM_Start+0xfe>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d104      	bne.n	80051ca <HAL_TIM_PWM_Start+0xd6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c8:	e013      	b.n	80051f2 <HAL_TIM_PWM_Start+0xfe>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b0c      	cmp	r3, #12
 80051ce:	d104      	bne.n	80051da <HAL_TIM_PWM_Start+0xe6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051d8:	e00b      	b.n	80051f2 <HAL_TIM_PWM_Start+0xfe>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Start+0xf6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e8:	e003      	b.n	80051f2 <HAL_TIM_PWM_Start+0xfe>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2201      	movs	r2, #1
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 ff32 	bl	8006064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a30      	ldr	r2, [pc, #192]	; (80052c8 <HAL_TIM_PWM_Start+0x1d4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_TIM_PWM_Start+0x120>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a2f      	ldr	r2, [pc, #188]	; (80052cc <HAL_TIM_PWM_Start+0x1d8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d101      	bne.n	8005218 <HAL_TIM_PWM_Start+0x124>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_TIM_PWM_Start+0x126>
 8005218:	2300      	movs	r3, #0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800522c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a25      	ldr	r2, [pc, #148]	; (80052c8 <HAL_TIM_PWM_Start+0x1d4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d022      	beq.n	800527e <HAL_TIM_PWM_Start+0x18a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005240:	d01d      	beq.n	800527e <HAL_TIM_PWM_Start+0x18a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <HAL_TIM_PWM_Start+0x1dc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d018      	beq.n	800527e <HAL_TIM_PWM_Start+0x18a>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a20      	ldr	r2, [pc, #128]	; (80052d4 <HAL_TIM_PWM_Start+0x1e0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <HAL_TIM_PWM_Start+0x18a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <HAL_TIM_PWM_Start+0x1e4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00e      	beq.n	800527e <HAL_TIM_PWM_Start+0x18a>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <HAL_TIM_PWM_Start+0x1d8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d009      	beq.n	800527e <HAL_TIM_PWM_Start+0x18a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <HAL_TIM_PWM_Start+0x1e8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <HAL_TIM_PWM_Start+0x18a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <HAL_TIM_PWM_Start+0x1ec>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d115      	bne.n	80052aa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <HAL_TIM_PWM_Start+0x1f0>)
 8005286:	4013      	ands	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b06      	cmp	r3, #6
 800528e:	d015      	beq.n	80052bc <HAL_TIM_PWM_Start+0x1c8>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005296:	d011      	beq.n	80052bc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	e008      	b.n	80052bc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e000      	b.n	80052be <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40010400 	.word	0x40010400
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40001800 	.word	0x40001800
 80052e4:	00010007 	.word	0x00010007

080052e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b02      	cmp	r3, #2
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0202 	mvn.w	r2, #2
 8005314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fae4 	bl	80058f8 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fad6 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fae7 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0204 	mvn.w	r2, #4
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 faba 	bl	80058f8 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 faac 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fabd 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0208 	mvn.w	r2, #8
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2204      	movs	r2, #4
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa90 	bl	80058f8 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa82 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fa93 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b10      	cmp	r3, #16
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0210 	mvn.w	r2, #16
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2208      	movs	r2, #8
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fa66 	bl	80058f8 <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa58 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fa69 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10e      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d107      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0201 	mvn.w	r2, #1
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fd f80a 	bl	8002480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d10e      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d107      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fea4 	bl	80061e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a6:	d10e      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d107      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fe97 	bl	80061f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d10e      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d107      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa17 	bl	8005920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d10e      	bne.n	800551e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b20      	cmp	r3, #32
 800550c:	d107      	bne.n	800551e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f06f 0220 	mvn.w	r2, #32
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fe57 	bl	80061cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005542:	2302      	movs	r3, #2
 8005544:	e0ff      	b.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b14      	cmp	r3, #20
 8005552:	f200 80f0 	bhi.w	8005736 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	080055b1 	.word	0x080055b1
 8005560:	08005737 	.word	0x08005737
 8005564:	08005737 	.word	0x08005737
 8005568:	08005737 	.word	0x08005737
 800556c:	080055f1 	.word	0x080055f1
 8005570:	08005737 	.word	0x08005737
 8005574:	08005737 	.word	0x08005737
 8005578:	08005737 	.word	0x08005737
 800557c:	08005633 	.word	0x08005633
 8005580:	08005737 	.word	0x08005737
 8005584:	08005737 	.word	0x08005737
 8005588:	08005737 	.word	0x08005737
 800558c:	08005673 	.word	0x08005673
 8005590:	08005737 	.word	0x08005737
 8005594:	08005737 	.word	0x08005737
 8005598:	08005737 	.word	0x08005737
 800559c:	080056b5 	.word	0x080056b5
 80055a0:	08005737 	.word	0x08005737
 80055a4:	08005737 	.word	0x08005737
 80055a8:	08005737 	.word	0x08005737
 80055ac:	080056f5 	.word	0x080056f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fa5c 	bl	8005a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0208 	orr.w	r2, r2, #8
 80055ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0204 	bic.w	r2, r2, #4
 80055da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6999      	ldr	r1, [r3, #24]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	619a      	str	r2, [r3, #24]
      break;
 80055ee:	e0a5      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 faae 	bl	8005b58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6999      	ldr	r1, [r3, #24]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	021a      	lsls	r2, r3, #8
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	619a      	str	r2, [r3, #24]
      break;
 8005630:	e084      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fb05 	bl	8005c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0208 	orr.w	r2, r2, #8
 800564c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0204 	bic.w	r2, r2, #4
 800565c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69d9      	ldr	r1, [r3, #28]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	61da      	str	r2, [r3, #28]
      break;
 8005670:	e064      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fb5b 	bl	8005d34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69d9      	ldr	r1, [r3, #28]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	021a      	lsls	r2, r3, #8
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	61da      	str	r2, [r3, #28]
      break;
 80056b2:	e043      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fb92 	bl	8005de4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0208 	orr.w	r2, r2, #8
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0204 	bic.w	r2, r2, #4
 80056de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056f2:	e023      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fbc4 	bl	8005e88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800570e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	021a      	lsls	r2, r3, #8
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005734:	e002      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	75fb      	strb	r3, [r7, #23]
      break;
 800573a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005744:	7dfb      	ldrb	r3, [r7, #23]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop

08005750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIM_ConfigClockSource+0x1c>
 8005768:	2302      	movs	r3, #2
 800576a:	e0b4      	b.n	80058d6 <HAL_TIM_ConfigClockSource+0x186>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	4b56      	ldr	r3, [pc, #344]	; (80058e0 <HAL_TIM_ConfigClockSource+0x190>)
 8005788:	4013      	ands	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a4:	d03e      	beq.n	8005824 <HAL_TIM_ConfigClockSource+0xd4>
 80057a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057aa:	f200 8087 	bhi.w	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b2:	f000 8086 	beq.w	80058c2 <HAL_TIM_ConfigClockSource+0x172>
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ba:	d87f      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057bc:	2b70      	cmp	r3, #112	; 0x70
 80057be:	d01a      	beq.n	80057f6 <HAL_TIM_ConfigClockSource+0xa6>
 80057c0:	2b70      	cmp	r3, #112	; 0x70
 80057c2:	d87b      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057c4:	2b60      	cmp	r3, #96	; 0x60
 80057c6:	d050      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x11a>
 80057c8:	2b60      	cmp	r3, #96	; 0x60
 80057ca:	d877      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057cc:	2b50      	cmp	r3, #80	; 0x50
 80057ce:	d03c      	beq.n	800584a <HAL_TIM_ConfigClockSource+0xfa>
 80057d0:	2b50      	cmp	r3, #80	; 0x50
 80057d2:	d873      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d058      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x13a>
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d86f      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057dc:	2b30      	cmp	r3, #48	; 0x30
 80057de:	d064      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x15a>
 80057e0:	2b30      	cmp	r3, #48	; 0x30
 80057e2:	d86b      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d060      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x15a>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d867      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d05c      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x15a>
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d05a      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x15a>
 80057f4:	e062      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	6899      	ldr	r1, [r3, #8]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f000 fc0d 	bl	8006024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	609a      	str	r2, [r3, #8]
      break;
 8005822:	e04f      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	6899      	ldr	r1, [r3, #8]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f000 fbf6 	bl	8006024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005846:	609a      	str	r2, [r3, #8]
      break;
 8005848:	e03c      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	461a      	mov	r2, r3
 8005858:	f000 fb6a 	bl	8005f30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2150      	movs	r1, #80	; 0x50
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fbc3 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005868:	e02c      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6859      	ldr	r1, [r3, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	461a      	mov	r2, r3
 8005878:	f000 fb89 	bl	8005f8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2160      	movs	r1, #96	; 0x60
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fbb3 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005888:	e01c      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6859      	ldr	r1, [r3, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	461a      	mov	r2, r3
 8005898:	f000 fb4a 	bl	8005f30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2140      	movs	r1, #64	; 0x40
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fba3 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 80058a8:	e00c      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4619      	mov	r1, r3
 80058b4:	4610      	mov	r0, r2
 80058b6:	f000 fb9a 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 80058ba:	e003      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
      break;
 80058c0:	e000      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	fffeff88 	.word	0xfffeff88

080058e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a40      	ldr	r2, [pc, #256]	; (8005a48 <TIM_Base_SetConfig+0x114>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d013      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005952:	d00f      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a3d      	ldr	r2, [pc, #244]	; (8005a4c <TIM_Base_SetConfig+0x118>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00b      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3c      	ldr	r2, [pc, #240]	; (8005a50 <TIM_Base_SetConfig+0x11c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d007      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3b      	ldr	r2, [pc, #236]	; (8005a54 <TIM_Base_SetConfig+0x120>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a3a      	ldr	r2, [pc, #232]	; (8005a58 <TIM_Base_SetConfig+0x124>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d108      	bne.n	8005986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2f      	ldr	r2, [pc, #188]	; (8005a48 <TIM_Base_SetConfig+0x114>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d02b      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005994:	d027      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2c      	ldr	r2, [pc, #176]	; (8005a4c <TIM_Base_SetConfig+0x118>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d023      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2b      	ldr	r2, [pc, #172]	; (8005a50 <TIM_Base_SetConfig+0x11c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01f      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2a      	ldr	r2, [pc, #168]	; (8005a54 <TIM_Base_SetConfig+0x120>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01b      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a29      	ldr	r2, [pc, #164]	; (8005a58 <TIM_Base_SetConfig+0x124>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d017      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a28      	ldr	r2, [pc, #160]	; (8005a5c <TIM_Base_SetConfig+0x128>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a27      	ldr	r2, [pc, #156]	; (8005a60 <TIM_Base_SetConfig+0x12c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00f      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a26      	ldr	r2, [pc, #152]	; (8005a64 <TIM_Base_SetConfig+0x130>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00b      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a25      	ldr	r2, [pc, #148]	; (8005a68 <TIM_Base_SetConfig+0x134>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d007      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a24      	ldr	r2, [pc, #144]	; (8005a6c <TIM_Base_SetConfig+0x138>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a23      	ldr	r2, [pc, #140]	; (8005a70 <TIM_Base_SetConfig+0x13c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d108      	bne.n	80059f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <TIM_Base_SetConfig+0x114>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_Base_SetConfig+0xf8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <TIM_Base_SetConfig+0x124>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d103      	bne.n	8005a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	615a      	str	r2, [r3, #20]
}
 8005a3a:	bf00      	nop
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	40000400 	.word	0x40000400
 8005a50:	40000800 	.word	0x40000800
 8005a54:	40000c00 	.word	0x40000c00
 8005a58:	40010400 	.word	0x40010400
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40014400 	.word	0x40014400
 8005a64:	40014800 	.word	0x40014800
 8005a68:	40001800 	.word	0x40001800
 8005a6c:	40001c00 	.word	0x40001c00
 8005a70:	40002000 	.word	0x40002000

08005a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f023 0201 	bic.w	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4b2b      	ldr	r3, [pc, #172]	; (8005b4c <TIM_OC1_SetConfig+0xd8>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 0302 	bic.w	r3, r3, #2
 8005abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a21      	ldr	r2, [pc, #132]	; (8005b50 <TIM_OC1_SetConfig+0xdc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC1_SetConfig+0x64>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a20      	ldr	r2, [pc, #128]	; (8005b54 <TIM_OC1_SetConfig+0xe0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d10c      	bne.n	8005af2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f023 0308 	bic.w	r3, r3, #8
 8005ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 0304 	bic.w	r3, r3, #4
 8005af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a16      	ldr	r2, [pc, #88]	; (8005b50 <TIM_OC1_SetConfig+0xdc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d003      	beq.n	8005b02 <TIM_OC1_SetConfig+0x8e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <TIM_OC1_SetConfig+0xe0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d111      	bne.n	8005b26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	621a      	str	r2, [r3, #32]
}
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	fffeff8f 	.word	0xfffeff8f
 8005b50:	40010000 	.word	0x40010000
 8005b54:	40010400 	.word	0x40010400

08005b58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f023 0210 	bic.w	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4b2e      	ldr	r3, [pc, #184]	; (8005c3c <TIM_OC2_SetConfig+0xe4>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0320 	bic.w	r3, r3, #32
 8005ba2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a23      	ldr	r2, [pc, #140]	; (8005c40 <TIM_OC2_SetConfig+0xe8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_OC2_SetConfig+0x68>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a22      	ldr	r2, [pc, #136]	; (8005c44 <TIM_OC2_SetConfig+0xec>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d10d      	bne.n	8005bdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <TIM_OC2_SetConfig+0xe8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_OC2_SetConfig+0x94>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <TIM_OC2_SetConfig+0xec>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d113      	bne.n	8005c14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	feff8fff 	.word	0xfeff8fff
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40010400 	.word	0x40010400

08005c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4b2d      	ldr	r3, [pc, #180]	; (8005d28 <TIM_OC3_SetConfig+0xe0>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a22      	ldr	r2, [pc, #136]	; (8005d2c <TIM_OC3_SetConfig+0xe4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <TIM_OC3_SetConfig+0x66>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a21      	ldr	r2, [pc, #132]	; (8005d30 <TIM_OC3_SetConfig+0xe8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d10d      	bne.n	8005cca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a17      	ldr	r2, [pc, #92]	; (8005d2c <TIM_OC3_SetConfig+0xe4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_OC3_SetConfig+0x92>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <TIM_OC3_SetConfig+0xe8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d113      	bne.n	8005d02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	fffeff8f 	.word	0xfffeff8f
 8005d2c:	40010000 	.word	0x40010000
 8005d30:	40010400 	.word	0x40010400

08005d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <TIM_OC4_SetConfig+0xa4>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	031b      	lsls	r3, r3, #12
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <TIM_OC4_SetConfig+0xa8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_OC4_SetConfig+0x68>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a12      	ldr	r2, [pc, #72]	; (8005de0 <TIM_OC4_SetConfig+0xac>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d109      	bne.n	8005db0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	019b      	lsls	r3, r3, #6
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	feff8fff 	.word	0xfeff8fff
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400

08005de4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4b1b      	ldr	r3, [pc, #108]	; (8005e7c <TIM_OC5_SetConfig+0x98>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	041b      	lsls	r3, r3, #16
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a12      	ldr	r2, [pc, #72]	; (8005e80 <TIM_OC5_SetConfig+0x9c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d003      	beq.n	8005e42 <TIM_OC5_SetConfig+0x5e>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a11      	ldr	r2, [pc, #68]	; (8005e84 <TIM_OC5_SetConfig+0xa0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d109      	bne.n	8005e56 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	621a      	str	r2, [r3, #32]
}
 8005e70:	bf00      	nop
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	fffeff8f 	.word	0xfffeff8f
 8005e80:	40010000 	.word	0x40010000
 8005e84:	40010400 	.word	0x40010400

08005e88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4b1c      	ldr	r3, [pc, #112]	; (8005f24 <TIM_OC6_SetConfig+0x9c>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	051b      	lsls	r3, r3, #20
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <TIM_OC6_SetConfig+0xa0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_OC6_SetConfig+0x60>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a12      	ldr	r2, [pc, #72]	; (8005f2c <TIM_OC6_SetConfig+0xa4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d109      	bne.n	8005efc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	029b      	lsls	r3, r3, #10
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	feff8fff 	.word	0xfeff8fff
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40010400 	.word	0x40010400

08005f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f023 0201 	bic.w	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f023 030a 	bic.w	r3, r3, #10
 8005f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b087      	sub	sp, #28
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f023 0210 	bic.w	r2, r3, #16
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	031b      	lsls	r3, r3, #12
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	f043 0307 	orr.w	r3, r3, #7
 8006010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	609a      	str	r2, [r3, #8]
}
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800603e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	021a      	lsls	r2, r3, #8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	431a      	orrs	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4313      	orrs	r3, r2
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	609a      	str	r2, [r3, #8]
}
 8006058:	bf00      	nop
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	2201      	movs	r2, #1
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1a      	ldr	r2, [r3, #32]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	43db      	mvns	r3, r3
 8006086:	401a      	ands	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a1a      	ldr	r2, [r3, #32]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f003 031f 	and.w	r3, r3, #31
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	fa01 f303 	lsl.w	r3, r1, r3
 800609c:	431a      	orrs	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	621a      	str	r2, [r3, #32]
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e06d      	b.n	80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a30      	ldr	r2, [pc, #192]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2f      	ldr	r2, [pc, #188]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d108      	bne.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006102:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a20      	ldr	r2, [pc, #128]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d022      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613a:	d01d      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1d      	ldr	r2, [pc, #116]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d018      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1c      	ldr	r2, [pc, #112]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1a      	ldr	r2, [pc, #104]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00e      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d009      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a16      	ldr	r2, [pc, #88]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d004      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a15      	ldr	r2, [pc, #84]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d10c      	bne.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	4313      	orrs	r3, r2
 8006188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40010400 	.word	0x40010400
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800
 80061c0:	40000c00 	.word	0x40000c00
 80061c4:	40014000 	.word	0x40014000
 80061c8:	40001800 	.word	0x40001800

080061cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e040      	b.n	800629c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fc f9a2 	bl	8002574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2224      	movs	r2, #36	; 0x24
 8006234:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0201 	bic.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f8c0 	bl	80063cc <UART_SetConfig>
 800624c:	4603      	mov	r3, r0
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e022      	b.n	800629c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fb16 	bl	8006890 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fb9d 	bl	80069d4 <UART_CheckIdleState>
 800629a:	4603      	mov	r3, r0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08a      	sub	sp, #40	; 0x28
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	f040 8081 	bne.w	80063c0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <HAL_UART_Transmit+0x26>
 80062c4:	88fb      	ldrh	r3, [r7, #6]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e079      	b.n	80063c2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_UART_Transmit+0x38>
 80062d8:	2302      	movs	r3, #2
 80062da:	e072      	b.n	80063c2 <HAL_UART_Transmit+0x11e>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2221      	movs	r2, #33	; 0x21
 80062f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062f2:	f7fc fac1 	bl	8002878 <HAL_GetTick>
 80062f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	88fa      	ldrh	r2, [r7, #6]
 80062fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	88fa      	ldrh	r2, [r7, #6]
 8006304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006310:	d108      	bne.n	8006324 <HAL_UART_Transmit+0x80>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	e003      	b.n	800632c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006334:	e02c      	b.n	8006390 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2200      	movs	r2, #0
 800633e:	2180      	movs	r1, #128	; 0x80
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 fb7a 	bl	8006a3a <UART_WaitOnFlagUntilTimeout>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e038      	b.n	80063c2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006364:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	3302      	adds	r3, #2
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e007      	b.n	800637e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	3301      	adds	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1cc      	bne.n	8006336 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2200      	movs	r2, #0
 80063a4:	2140      	movs	r1, #64	; 0x40
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fb47 	bl	8006a3a <UART_WaitOnFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e005      	b.n	80063c2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	e000      	b.n	80063c2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80063c0:	2302      	movs	r3, #2
  }
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4ba7      	ldr	r3, [pc, #668]	; (8006694 <UART_SetConfig+0x2c8>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	6979      	ldr	r1, [r7, #20]
 8006400:	430b      	orrs	r3, r1
 8006402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	430a      	orrs	r2, r1
 800643c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a95      	ldr	r2, [pc, #596]	; (8006698 <UART_SetConfig+0x2cc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d120      	bne.n	800648a <UART_SetConfig+0xbe>
 8006448:	4b94      	ldr	r3, [pc, #592]	; (800669c <UART_SetConfig+0x2d0>)
 800644a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	2b03      	cmp	r3, #3
 8006454:	d816      	bhi.n	8006484 <UART_SetConfig+0xb8>
 8006456:	a201      	add	r2, pc, #4	; (adr r2, 800645c <UART_SetConfig+0x90>)
 8006458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645c:	0800646d 	.word	0x0800646d
 8006460:	08006479 	.word	0x08006479
 8006464:	08006473 	.word	0x08006473
 8006468:	0800647f 	.word	0x0800647f
 800646c:	2301      	movs	r3, #1
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e14f      	b.n	8006712 <UART_SetConfig+0x346>
 8006472:	2302      	movs	r3, #2
 8006474:	77fb      	strb	r3, [r7, #31]
 8006476:	e14c      	b.n	8006712 <UART_SetConfig+0x346>
 8006478:	2304      	movs	r3, #4
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e149      	b.n	8006712 <UART_SetConfig+0x346>
 800647e:	2308      	movs	r3, #8
 8006480:	77fb      	strb	r3, [r7, #31]
 8006482:	e146      	b.n	8006712 <UART_SetConfig+0x346>
 8006484:	2310      	movs	r3, #16
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	e143      	b.n	8006712 <UART_SetConfig+0x346>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a84      	ldr	r2, [pc, #528]	; (80066a0 <UART_SetConfig+0x2d4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d132      	bne.n	80064fa <UART_SetConfig+0x12e>
 8006494:	4b81      	ldr	r3, [pc, #516]	; (800669c <UART_SetConfig+0x2d0>)
 8006496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649a:	f003 030c 	and.w	r3, r3, #12
 800649e:	2b0c      	cmp	r3, #12
 80064a0:	d828      	bhi.n	80064f4 <UART_SetConfig+0x128>
 80064a2:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <UART_SetConfig+0xdc>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064dd 	.word	0x080064dd
 80064ac:	080064f5 	.word	0x080064f5
 80064b0:	080064f5 	.word	0x080064f5
 80064b4:	080064f5 	.word	0x080064f5
 80064b8:	080064e9 	.word	0x080064e9
 80064bc:	080064f5 	.word	0x080064f5
 80064c0:	080064f5 	.word	0x080064f5
 80064c4:	080064f5 	.word	0x080064f5
 80064c8:	080064e3 	.word	0x080064e3
 80064cc:	080064f5 	.word	0x080064f5
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	080064f5 	.word	0x080064f5
 80064d8:	080064ef 	.word	0x080064ef
 80064dc:	2300      	movs	r3, #0
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e117      	b.n	8006712 <UART_SetConfig+0x346>
 80064e2:	2302      	movs	r3, #2
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e114      	b.n	8006712 <UART_SetConfig+0x346>
 80064e8:	2304      	movs	r3, #4
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e111      	b.n	8006712 <UART_SetConfig+0x346>
 80064ee:	2308      	movs	r3, #8
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e10e      	b.n	8006712 <UART_SetConfig+0x346>
 80064f4:	2310      	movs	r3, #16
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e10b      	b.n	8006712 <UART_SetConfig+0x346>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a69      	ldr	r2, [pc, #420]	; (80066a4 <UART_SetConfig+0x2d8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d120      	bne.n	8006546 <UART_SetConfig+0x17a>
 8006504:	4b65      	ldr	r3, [pc, #404]	; (800669c <UART_SetConfig+0x2d0>)
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800650e:	2b30      	cmp	r3, #48	; 0x30
 8006510:	d013      	beq.n	800653a <UART_SetConfig+0x16e>
 8006512:	2b30      	cmp	r3, #48	; 0x30
 8006514:	d814      	bhi.n	8006540 <UART_SetConfig+0x174>
 8006516:	2b20      	cmp	r3, #32
 8006518:	d009      	beq.n	800652e <UART_SetConfig+0x162>
 800651a:	2b20      	cmp	r3, #32
 800651c:	d810      	bhi.n	8006540 <UART_SetConfig+0x174>
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <UART_SetConfig+0x15c>
 8006522:	2b10      	cmp	r3, #16
 8006524:	d006      	beq.n	8006534 <UART_SetConfig+0x168>
 8006526:	e00b      	b.n	8006540 <UART_SetConfig+0x174>
 8006528:	2300      	movs	r3, #0
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e0f1      	b.n	8006712 <UART_SetConfig+0x346>
 800652e:	2302      	movs	r3, #2
 8006530:	77fb      	strb	r3, [r7, #31]
 8006532:	e0ee      	b.n	8006712 <UART_SetConfig+0x346>
 8006534:	2304      	movs	r3, #4
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e0eb      	b.n	8006712 <UART_SetConfig+0x346>
 800653a:	2308      	movs	r3, #8
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	e0e8      	b.n	8006712 <UART_SetConfig+0x346>
 8006540:	2310      	movs	r3, #16
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e0e5      	b.n	8006712 <UART_SetConfig+0x346>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a57      	ldr	r2, [pc, #348]	; (80066a8 <UART_SetConfig+0x2dc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d120      	bne.n	8006592 <UART_SetConfig+0x1c6>
 8006550:	4b52      	ldr	r3, [pc, #328]	; (800669c <UART_SetConfig+0x2d0>)
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800655a:	2bc0      	cmp	r3, #192	; 0xc0
 800655c:	d013      	beq.n	8006586 <UART_SetConfig+0x1ba>
 800655e:	2bc0      	cmp	r3, #192	; 0xc0
 8006560:	d814      	bhi.n	800658c <UART_SetConfig+0x1c0>
 8006562:	2b80      	cmp	r3, #128	; 0x80
 8006564:	d009      	beq.n	800657a <UART_SetConfig+0x1ae>
 8006566:	2b80      	cmp	r3, #128	; 0x80
 8006568:	d810      	bhi.n	800658c <UART_SetConfig+0x1c0>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <UART_SetConfig+0x1a8>
 800656e:	2b40      	cmp	r3, #64	; 0x40
 8006570:	d006      	beq.n	8006580 <UART_SetConfig+0x1b4>
 8006572:	e00b      	b.n	800658c <UART_SetConfig+0x1c0>
 8006574:	2300      	movs	r3, #0
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e0cb      	b.n	8006712 <UART_SetConfig+0x346>
 800657a:	2302      	movs	r3, #2
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	e0c8      	b.n	8006712 <UART_SetConfig+0x346>
 8006580:	2304      	movs	r3, #4
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	e0c5      	b.n	8006712 <UART_SetConfig+0x346>
 8006586:	2308      	movs	r3, #8
 8006588:	77fb      	strb	r3, [r7, #31]
 800658a:	e0c2      	b.n	8006712 <UART_SetConfig+0x346>
 800658c:	2310      	movs	r3, #16
 800658e:	77fb      	strb	r3, [r7, #31]
 8006590:	e0bf      	b.n	8006712 <UART_SetConfig+0x346>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a45      	ldr	r2, [pc, #276]	; (80066ac <UART_SetConfig+0x2e0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d125      	bne.n	80065e8 <UART_SetConfig+0x21c>
 800659c:	4b3f      	ldr	r3, [pc, #252]	; (800669c <UART_SetConfig+0x2d0>)
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065aa:	d017      	beq.n	80065dc <UART_SetConfig+0x210>
 80065ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065b0:	d817      	bhi.n	80065e2 <UART_SetConfig+0x216>
 80065b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b6:	d00b      	beq.n	80065d0 <UART_SetConfig+0x204>
 80065b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065bc:	d811      	bhi.n	80065e2 <UART_SetConfig+0x216>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <UART_SetConfig+0x1fe>
 80065c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c6:	d006      	beq.n	80065d6 <UART_SetConfig+0x20a>
 80065c8:	e00b      	b.n	80065e2 <UART_SetConfig+0x216>
 80065ca:	2300      	movs	r3, #0
 80065cc:	77fb      	strb	r3, [r7, #31]
 80065ce:	e0a0      	b.n	8006712 <UART_SetConfig+0x346>
 80065d0:	2302      	movs	r3, #2
 80065d2:	77fb      	strb	r3, [r7, #31]
 80065d4:	e09d      	b.n	8006712 <UART_SetConfig+0x346>
 80065d6:	2304      	movs	r3, #4
 80065d8:	77fb      	strb	r3, [r7, #31]
 80065da:	e09a      	b.n	8006712 <UART_SetConfig+0x346>
 80065dc:	2308      	movs	r3, #8
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e097      	b.n	8006712 <UART_SetConfig+0x346>
 80065e2:	2310      	movs	r3, #16
 80065e4:	77fb      	strb	r3, [r7, #31]
 80065e6:	e094      	b.n	8006712 <UART_SetConfig+0x346>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a30      	ldr	r2, [pc, #192]	; (80066b0 <UART_SetConfig+0x2e4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d125      	bne.n	800663e <UART_SetConfig+0x272>
 80065f2:	4b2a      	ldr	r3, [pc, #168]	; (800669c <UART_SetConfig+0x2d0>)
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006600:	d017      	beq.n	8006632 <UART_SetConfig+0x266>
 8006602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006606:	d817      	bhi.n	8006638 <UART_SetConfig+0x26c>
 8006608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660c:	d00b      	beq.n	8006626 <UART_SetConfig+0x25a>
 800660e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006612:	d811      	bhi.n	8006638 <UART_SetConfig+0x26c>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <UART_SetConfig+0x254>
 8006618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661c:	d006      	beq.n	800662c <UART_SetConfig+0x260>
 800661e:	e00b      	b.n	8006638 <UART_SetConfig+0x26c>
 8006620:	2301      	movs	r3, #1
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e075      	b.n	8006712 <UART_SetConfig+0x346>
 8006626:	2302      	movs	r3, #2
 8006628:	77fb      	strb	r3, [r7, #31]
 800662a:	e072      	b.n	8006712 <UART_SetConfig+0x346>
 800662c:	2304      	movs	r3, #4
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e06f      	b.n	8006712 <UART_SetConfig+0x346>
 8006632:	2308      	movs	r3, #8
 8006634:	77fb      	strb	r3, [r7, #31]
 8006636:	e06c      	b.n	8006712 <UART_SetConfig+0x346>
 8006638:	2310      	movs	r3, #16
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e069      	b.n	8006712 <UART_SetConfig+0x346>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a1c      	ldr	r2, [pc, #112]	; (80066b4 <UART_SetConfig+0x2e8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d137      	bne.n	80066b8 <UART_SetConfig+0x2ec>
 8006648:	4b14      	ldr	r3, [pc, #80]	; (800669c <UART_SetConfig+0x2d0>)
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006652:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006656:	d017      	beq.n	8006688 <UART_SetConfig+0x2bc>
 8006658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800665c:	d817      	bhi.n	800668e <UART_SetConfig+0x2c2>
 800665e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006662:	d00b      	beq.n	800667c <UART_SetConfig+0x2b0>
 8006664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006668:	d811      	bhi.n	800668e <UART_SetConfig+0x2c2>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <UART_SetConfig+0x2aa>
 800666e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006672:	d006      	beq.n	8006682 <UART_SetConfig+0x2b6>
 8006674:	e00b      	b.n	800668e <UART_SetConfig+0x2c2>
 8006676:	2300      	movs	r3, #0
 8006678:	77fb      	strb	r3, [r7, #31]
 800667a:	e04a      	b.n	8006712 <UART_SetConfig+0x346>
 800667c:	2302      	movs	r3, #2
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e047      	b.n	8006712 <UART_SetConfig+0x346>
 8006682:	2304      	movs	r3, #4
 8006684:	77fb      	strb	r3, [r7, #31]
 8006686:	e044      	b.n	8006712 <UART_SetConfig+0x346>
 8006688:	2308      	movs	r3, #8
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e041      	b.n	8006712 <UART_SetConfig+0x346>
 800668e:	2310      	movs	r3, #16
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e03e      	b.n	8006712 <UART_SetConfig+0x346>
 8006694:	efff69f3 	.word	0xefff69f3
 8006698:	40011000 	.word	0x40011000
 800669c:	40023800 	.word	0x40023800
 80066a0:	40004400 	.word	0x40004400
 80066a4:	40004800 	.word	0x40004800
 80066a8:	40004c00 	.word	0x40004c00
 80066ac:	40005000 	.word	0x40005000
 80066b0:	40011400 	.word	0x40011400
 80066b4:	40007800 	.word	0x40007800
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a71      	ldr	r2, [pc, #452]	; (8006884 <UART_SetConfig+0x4b8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d125      	bne.n	800670e <UART_SetConfig+0x342>
 80066c2:	4b71      	ldr	r3, [pc, #452]	; (8006888 <UART_SetConfig+0x4bc>)
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066d0:	d017      	beq.n	8006702 <UART_SetConfig+0x336>
 80066d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066d6:	d817      	bhi.n	8006708 <UART_SetConfig+0x33c>
 80066d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066dc:	d00b      	beq.n	80066f6 <UART_SetConfig+0x32a>
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e2:	d811      	bhi.n	8006708 <UART_SetConfig+0x33c>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <UART_SetConfig+0x324>
 80066e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066ec:	d006      	beq.n	80066fc <UART_SetConfig+0x330>
 80066ee:	e00b      	b.n	8006708 <UART_SetConfig+0x33c>
 80066f0:	2300      	movs	r3, #0
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e00d      	b.n	8006712 <UART_SetConfig+0x346>
 80066f6:	2302      	movs	r3, #2
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	e00a      	b.n	8006712 <UART_SetConfig+0x346>
 80066fc:	2304      	movs	r3, #4
 80066fe:	77fb      	strb	r3, [r7, #31]
 8006700:	e007      	b.n	8006712 <UART_SetConfig+0x346>
 8006702:	2308      	movs	r3, #8
 8006704:	77fb      	strb	r3, [r7, #31]
 8006706:	e004      	b.n	8006712 <UART_SetConfig+0x346>
 8006708:	2310      	movs	r3, #16
 800670a:	77fb      	strb	r3, [r7, #31]
 800670c:	e001      	b.n	8006712 <UART_SetConfig+0x346>
 800670e:	2310      	movs	r3, #16
 8006710:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800671a:	d15a      	bne.n	80067d2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800671c:	7ffb      	ldrb	r3, [r7, #31]
 800671e:	2b08      	cmp	r3, #8
 8006720:	d827      	bhi.n	8006772 <UART_SetConfig+0x3a6>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x35c>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800674d 	.word	0x0800674d
 800672c:	08006755 	.word	0x08006755
 8006730:	0800675d 	.word	0x0800675d
 8006734:	08006773 	.word	0x08006773
 8006738:	08006763 	.word	0x08006763
 800673c:	08006773 	.word	0x08006773
 8006740:	08006773 	.word	0x08006773
 8006744:	08006773 	.word	0x08006773
 8006748:	0800676b 	.word	0x0800676b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fd ff88 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 8006750:	61b8      	str	r0, [r7, #24]
        break;
 8006752:	e013      	b.n	800677c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006754:	f7fd ff98 	bl	8004688 <HAL_RCC_GetPCLK2Freq>
 8006758:	61b8      	str	r0, [r7, #24]
        break;
 800675a:	e00f      	b.n	800677c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800675c:	4b4b      	ldr	r3, [pc, #300]	; (800688c <UART_SetConfig+0x4c0>)
 800675e:	61bb      	str	r3, [r7, #24]
        break;
 8006760:	e00c      	b.n	800677c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006762:	f7fd fe8f 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8006766:	61b8      	str	r0, [r7, #24]
        break;
 8006768:	e008      	b.n	800677c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676e:	61bb      	str	r3, [r7, #24]
        break;
 8006770:	e004      	b.n	800677c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	77bb      	strb	r3, [r7, #30]
        break;
 800677a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d074      	beq.n	800686c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	005a      	lsls	r2, r3, #1
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	441a      	add	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	fbb2 f3f3 	udiv	r3, r2, r3
 8006796:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b0f      	cmp	r3, #15
 800679c:	d916      	bls.n	80067cc <UART_SetConfig+0x400>
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a4:	d212      	bcs.n	80067cc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f023 030f 	bic.w	r3, r3, #15
 80067ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	085b      	lsrs	r3, r3, #1
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	89fb      	ldrh	r3, [r7, #14]
 80067be:	4313      	orrs	r3, r2
 80067c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	89fa      	ldrh	r2, [r7, #14]
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	e04f      	b.n	800686c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	77bb      	strb	r3, [r7, #30]
 80067d0:	e04c      	b.n	800686c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067d2:	7ffb      	ldrb	r3, [r7, #31]
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d828      	bhi.n	800682a <UART_SetConfig+0x45e>
 80067d8:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <UART_SetConfig+0x414>)
 80067da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067de:	bf00      	nop
 80067e0:	08006805 	.word	0x08006805
 80067e4:	0800680d 	.word	0x0800680d
 80067e8:	08006815 	.word	0x08006815
 80067ec:	0800682b 	.word	0x0800682b
 80067f0:	0800681b 	.word	0x0800681b
 80067f4:	0800682b 	.word	0x0800682b
 80067f8:	0800682b 	.word	0x0800682b
 80067fc:	0800682b 	.word	0x0800682b
 8006800:	08006823 	.word	0x08006823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006804:	f7fd ff2c 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 8006808:	61b8      	str	r0, [r7, #24]
        break;
 800680a:	e013      	b.n	8006834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800680c:	f7fd ff3c 	bl	8004688 <HAL_RCC_GetPCLK2Freq>
 8006810:	61b8      	str	r0, [r7, #24]
        break;
 8006812:	e00f      	b.n	8006834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006814:	4b1d      	ldr	r3, [pc, #116]	; (800688c <UART_SetConfig+0x4c0>)
 8006816:	61bb      	str	r3, [r7, #24]
        break;
 8006818:	e00c      	b.n	8006834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681a:	f7fd fe33 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 800681e:	61b8      	str	r0, [r7, #24]
        break;
 8006820:	e008      	b.n	8006834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006826:	61bb      	str	r3, [r7, #24]
        break;
 8006828:	e004      	b.n	8006834 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	77bb      	strb	r3, [r7, #30]
        break;
 8006832:	bf00      	nop
    }

    if (pclk != 0U)
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d018      	beq.n	800686c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	085a      	lsrs	r2, r3, #1
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	441a      	add	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	fbb2 f3f3 	udiv	r3, r2, r3
 800684c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b0f      	cmp	r3, #15
 8006852:	d909      	bls.n	8006868 <UART_SetConfig+0x49c>
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685a:	d205      	bcs.n	8006868 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	b29a      	uxth	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	e001      	b.n	800686c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006878:	7fbb      	ldrb	r3, [r7, #30]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40007c00 	.word	0x40007c00
 8006888:	40023800 	.word	0x40023800
 800688c:	00f42400 	.word	0x00f42400

08006890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01a      	beq.n	80069a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698e:	d10a      	bne.n	80069a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af02      	add	r7, sp, #8
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069e4:	f7fb ff48 	bl	8002878 <HAL_GetTick>
 80069e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0308 	and.w	r3, r3, #8
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d10e      	bne.n	8006a16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f817 	bl	8006a3a <UART_WaitOnFlagUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e00d      	b.n	8006a32 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b09c      	sub	sp, #112	; 0x70
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	4613      	mov	r3, r2
 8006a48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4a:	e0a5      	b.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a52:	f000 80a1 	beq.w	8006b98 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a56:	f7fb ff0f 	bl	8002878 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d302      	bcc.n	8006a6c <UART_WaitOnFlagUntilTimeout+0x32>
 8006a66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d13e      	bne.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a80:	667b      	str	r3, [r7, #100]	; 0x64
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e6      	bne.n	8006a6c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	f023 0301 	bic.w	r3, r3, #1
 8006ab4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006abe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ac0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e5      	bne.n	8006a9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e067      	b.n	8006bba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d04f      	beq.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b06:	d147      	bne.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
 8006b32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e6      	bne.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	613b      	str	r3, [r7, #16]
   return(result);
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b64:	623a      	str	r2, [r7, #32]
 8006b66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	69f9      	ldr	r1, [r7, #28]
 8006b6a:	6a3a      	ldr	r2, [r7, #32]
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e5      	bne.n	8006b44 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2220      	movs	r2, #32
 8006b82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e010      	b.n	8006bba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69da      	ldr	r2, [r3, #28]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2301      	moveq	r3, #1
 8006baa:	2300      	movne	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	f43f af4a 	beq.w	8006a4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3770      	adds	r7, #112	; 0x70
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	f107 001c 	add.w	r0, r7, #28
 8006bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d120      	bne.n	8006c1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	4b20      	ldr	r3, [pc, #128]	; (8006c70 <USB_CoreInit+0xac>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d105      	bne.n	8006c12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fa92 	bl	800713c <USB_CoreReset>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
 8006c1c:	e010      	b.n	8006c40 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa86 	bl	800713c <USB_CoreReset>
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d10b      	bne.n	8006c5e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f043 0206 	orr.w	r2, r3, #6
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f043 0220 	orr.w	r2, r3, #32
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c6a:	b004      	add	sp, #16
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	ffbdffbf 	.word	0xffbdffbf

08006c74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f023 0201 	bic.w	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d115      	bne.n	8006ce4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	f7fb fde3 	bl	8002890 <HAL_Delay>
      ms++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fa25 	bl	8007120 <USB_GetMode>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d01e      	beq.n	8006d1a <USB_SetCurrentMode+0x84>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b31      	cmp	r3, #49	; 0x31
 8006ce0:	d9f0      	bls.n	8006cc4 <USB_SetCurrentMode+0x2e>
 8006ce2:	e01a      	b.n	8006d1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ce4:	78fb      	ldrb	r3, [r7, #3]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d115      	bne.n	8006d16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	f7fb fdca 	bl	8002890 <HAL_Delay>
      ms++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa0c 	bl	8007120 <USB_GetMode>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <USB_SetCurrentMode+0x84>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b31      	cmp	r3, #49	; 0x31
 8006d12:	d9f0      	bls.n	8006cf6 <USB_SetCurrentMode+0x60>
 8006d14:	e001      	b.n	8006d1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e005      	b.n	8006d26 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b32      	cmp	r3, #50	; 0x32
 8006d1e:	d101      	bne.n	8006d24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e000      	b.n	8006d26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d30:	b084      	sub	sp, #16
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b086      	sub	sp, #24
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	e009      	b.n	8006d64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	3340      	adds	r3, #64	; 0x40
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	3301      	adds	r3, #1
 8006d62:	613b      	str	r3, [r7, #16]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	2b0e      	cmp	r3, #14
 8006d68:	d9f2      	bls.n	8006d50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d11c      	bne.n	8006daa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d7e:	f043 0302 	orr.w	r3, r3, #2
 8006d82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	e005      	b.n	8006db6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc8:	4619      	mov	r1, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	680b      	ldr	r3, [r1, #0]
 8006dd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d10c      	bne.n	8006df6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d104      	bne.n	8006dec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006de2:	2100      	movs	r1, #0
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f961 	bl	80070ac <USB_SetDevSpeed>
 8006dea:	e008      	b.n	8006dfe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006dec:	2101      	movs	r1, #1
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f95c 	bl	80070ac <USB_SetDevSpeed>
 8006df4:	e003      	b.n	8006dfe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006df6:	2103      	movs	r1, #3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f957 	bl	80070ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dfe:	2110      	movs	r1, #16
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f8f3 	bl	8006fec <USB_FlushTxFifo>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f91d 	bl	8007050 <USB_FlushRxFifo>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e26:	461a      	mov	r2, r3
 8006e28:	2300      	movs	r3, #0
 8006e2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e32:	461a      	mov	r2, r3
 8006e34:	2300      	movs	r3, #0
 8006e36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2300      	movs	r3, #0
 8006e42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e44:	2300      	movs	r3, #0
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	e043      	b.n	8006ed2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e60:	d118      	bne.n	8006e94 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e74:	461a      	mov	r2, r3
 8006e76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	e013      	b.n	8006ea6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	e008      	b.n	8006ea6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d3b7      	bcc.n	8006e4a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eda:	2300      	movs	r3, #0
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	e043      	b.n	8006f68 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ef6:	d118      	bne.n	8006f2a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	e013      	b.n	8006f3c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f20:	461a      	mov	r2, r3
 8006f22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	e008      	b.n	8006f3c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f36:	461a      	mov	r2, r3
 8006f38:	2300      	movs	r3, #0
 8006f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	3301      	adds	r3, #1
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d3b7      	bcc.n	8006ee0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d105      	bne.n	8006fa4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	f043 0210 	orr.w	r2, r3, #16
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	699a      	ldr	r2, [r3, #24]
 8006fa8:	4b0e      	ldr	r3, [pc, #56]	; (8006fe4 <USB_DevInit+0x2b4>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d005      	beq.n	8006fc2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f043 0208 	orr.w	r2, r3, #8
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d105      	bne.n	8006fd4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <USB_DevInit+0x2b8>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fe0:	b004      	add	sp, #16
 8006fe2:	4770      	bx	lr
 8006fe4:	803c3800 	.word	0x803c3800
 8006fe8:	40000004 	.word	0x40000004

08006fec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	4a12      	ldr	r2, [pc, #72]	; (800704c <USB_FlushTxFifo+0x60>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d901      	bls.n	800700a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e01a      	b.n	8007040 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	daf3      	bge.n	8006ffa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	019b      	lsls	r3, r3, #6
 800701a:	f043 0220 	orr.w	r2, r3, #32
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3301      	adds	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	4a08      	ldr	r2, [pc, #32]	; (800704c <USB_FlushTxFifo+0x60>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e006      	b.n	8007040 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b20      	cmp	r3, #32
 800703c:	d0f1      	beq.n	8007022 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	00030d40 	.word	0x00030d40

08007050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3301      	adds	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	4a11      	ldr	r2, [pc, #68]	; (80070a8 <USB_FlushRxFifo+0x58>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d901      	bls.n	800706c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e017      	b.n	800709c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	daf3      	bge.n	800705c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2210      	movs	r2, #16
 800707c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3301      	adds	r3, #1
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	4a08      	ldr	r2, [pc, #32]	; (80070a8 <USB_FlushRxFifo+0x58>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e006      	b.n	800709c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b10      	cmp	r3, #16
 8007098:	d0f1      	beq.n	800707e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	00030d40 	.word	0x00030d40

080070ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	68f9      	ldr	r1, [r7, #12]
 80070c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070cc:	4313      	orrs	r3, r2
 80070ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070de:	b480      	push	{r7}
 80070e0:	b085      	sub	sp, #20
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070f8:	f023 0303 	bic.w	r3, r3, #3
 80070fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800710c:	f043 0302 	orr.w	r3, r3, #2
 8007110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	f003 0301 	and.w	r3, r3, #1
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3301      	adds	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	4a13      	ldr	r2, [pc, #76]	; (800719c <USB_CoreReset+0x60>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d901      	bls.n	8007158 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e01a      	b.n	800718e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	daf3      	bge.n	8007148 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f043 0201 	orr.w	r2, r3, #1
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3301      	adds	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	4a09      	ldr	r2, [pc, #36]	; (800719c <USB_CoreReset+0x60>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d901      	bls.n	8007180 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e006      	b.n	800718e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b01      	cmp	r3, #1
 800718a:	d0f1      	beq.n	8007170 <USB_CoreReset+0x34>

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	00030d40 	.word	0x00030d40

080071a0 <calloc>:
 80071a0:	4b02      	ldr	r3, [pc, #8]	; (80071ac <calloc+0xc>)
 80071a2:	460a      	mov	r2, r1
 80071a4:	4601      	mov	r1, r0
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	f000 b834 	b.w	8007214 <_calloc_r>
 80071ac:	20000010 	.word	0x20000010

080071b0 <__errno>:
 80071b0:	4b01      	ldr	r3, [pc, #4]	; (80071b8 <__errno+0x8>)
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20000010 	.word	0x20000010

080071bc <__libc_init_array>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	4d0d      	ldr	r5, [pc, #52]	; (80071f4 <__libc_init_array+0x38>)
 80071c0:	4c0d      	ldr	r4, [pc, #52]	; (80071f8 <__libc_init_array+0x3c>)
 80071c2:	1b64      	subs	r4, r4, r5
 80071c4:	10a4      	asrs	r4, r4, #2
 80071c6:	2600      	movs	r6, #0
 80071c8:	42a6      	cmp	r6, r4
 80071ca:	d109      	bne.n	80071e0 <__libc_init_array+0x24>
 80071cc:	4d0b      	ldr	r5, [pc, #44]	; (80071fc <__libc_init_array+0x40>)
 80071ce:	4c0c      	ldr	r4, [pc, #48]	; (8007200 <__libc_init_array+0x44>)
 80071d0:	f002 feb6 	bl	8009f40 <_init>
 80071d4:	1b64      	subs	r4, r4, r5
 80071d6:	10a4      	asrs	r4, r4, #2
 80071d8:	2600      	movs	r6, #0
 80071da:	42a6      	cmp	r6, r4
 80071dc:	d105      	bne.n	80071ea <__libc_init_array+0x2e>
 80071de:	bd70      	pop	{r4, r5, r6, pc}
 80071e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e4:	4798      	blx	r3
 80071e6:	3601      	adds	r6, #1
 80071e8:	e7ee      	b.n	80071c8 <__libc_init_array+0xc>
 80071ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ee:	4798      	blx	r3
 80071f0:	3601      	adds	r6, #1
 80071f2:	e7f2      	b.n	80071da <__libc_init_array+0x1e>
 80071f4:	0800a364 	.word	0x0800a364
 80071f8:	0800a364 	.word	0x0800a364
 80071fc:	0800a364 	.word	0x0800a364
 8007200:	0800a368 	.word	0x0800a368

08007204 <memset>:
 8007204:	4402      	add	r2, r0
 8007206:	4603      	mov	r3, r0
 8007208:	4293      	cmp	r3, r2
 800720a:	d100      	bne.n	800720e <memset+0xa>
 800720c:	4770      	bx	lr
 800720e:	f803 1b01 	strb.w	r1, [r3], #1
 8007212:	e7f9      	b.n	8007208 <memset+0x4>

08007214 <_calloc_r>:
 8007214:	b513      	push	{r0, r1, r4, lr}
 8007216:	434a      	muls	r2, r1
 8007218:	4611      	mov	r1, r2
 800721a:	9201      	str	r2, [sp, #4]
 800721c:	f000 f80a 	bl	8007234 <_malloc_r>
 8007220:	4604      	mov	r4, r0
 8007222:	b118      	cbz	r0, 800722c <_calloc_r+0x18>
 8007224:	9a01      	ldr	r2, [sp, #4]
 8007226:	2100      	movs	r1, #0
 8007228:	f7ff ffec 	bl	8007204 <memset>
 800722c:	4620      	mov	r0, r4
 800722e:	b002      	add	sp, #8
 8007230:	bd10      	pop	{r4, pc}
	...

08007234 <_malloc_r>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	1ccd      	adds	r5, r1, #3
 8007238:	f025 0503 	bic.w	r5, r5, #3
 800723c:	3508      	adds	r5, #8
 800723e:	2d0c      	cmp	r5, #12
 8007240:	bf38      	it	cc
 8007242:	250c      	movcc	r5, #12
 8007244:	2d00      	cmp	r5, #0
 8007246:	4606      	mov	r6, r0
 8007248:	db01      	blt.n	800724e <_malloc_r+0x1a>
 800724a:	42a9      	cmp	r1, r5
 800724c:	d903      	bls.n	8007256 <_malloc_r+0x22>
 800724e:	230c      	movs	r3, #12
 8007250:	6033      	str	r3, [r6, #0]
 8007252:	2000      	movs	r0, #0
 8007254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007256:	f001 fb75 	bl	8008944 <__malloc_lock>
 800725a:	4921      	ldr	r1, [pc, #132]	; (80072e0 <_malloc_r+0xac>)
 800725c:	680a      	ldr	r2, [r1, #0]
 800725e:	4614      	mov	r4, r2
 8007260:	b99c      	cbnz	r4, 800728a <_malloc_r+0x56>
 8007262:	4f20      	ldr	r7, [pc, #128]	; (80072e4 <_malloc_r+0xb0>)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	b923      	cbnz	r3, 8007272 <_malloc_r+0x3e>
 8007268:	4621      	mov	r1, r4
 800726a:	4630      	mov	r0, r6
 800726c:	f000 fca6 	bl	8007bbc <_sbrk_r>
 8007270:	6038      	str	r0, [r7, #0]
 8007272:	4629      	mov	r1, r5
 8007274:	4630      	mov	r0, r6
 8007276:	f000 fca1 	bl	8007bbc <_sbrk_r>
 800727a:	1c43      	adds	r3, r0, #1
 800727c:	d123      	bne.n	80072c6 <_malloc_r+0x92>
 800727e:	230c      	movs	r3, #12
 8007280:	6033      	str	r3, [r6, #0]
 8007282:	4630      	mov	r0, r6
 8007284:	f001 fb64 	bl	8008950 <__malloc_unlock>
 8007288:	e7e3      	b.n	8007252 <_malloc_r+0x1e>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	1b5b      	subs	r3, r3, r5
 800728e:	d417      	bmi.n	80072c0 <_malloc_r+0x8c>
 8007290:	2b0b      	cmp	r3, #11
 8007292:	d903      	bls.n	800729c <_malloc_r+0x68>
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	441c      	add	r4, r3
 8007298:	6025      	str	r5, [r4, #0]
 800729a:	e004      	b.n	80072a6 <_malloc_r+0x72>
 800729c:	6863      	ldr	r3, [r4, #4]
 800729e:	42a2      	cmp	r2, r4
 80072a0:	bf0c      	ite	eq
 80072a2:	600b      	streq	r3, [r1, #0]
 80072a4:	6053      	strne	r3, [r2, #4]
 80072a6:	4630      	mov	r0, r6
 80072a8:	f001 fb52 	bl	8008950 <__malloc_unlock>
 80072ac:	f104 000b 	add.w	r0, r4, #11
 80072b0:	1d23      	adds	r3, r4, #4
 80072b2:	f020 0007 	bic.w	r0, r0, #7
 80072b6:	1ac2      	subs	r2, r0, r3
 80072b8:	d0cc      	beq.n	8007254 <_malloc_r+0x20>
 80072ba:	1a1b      	subs	r3, r3, r0
 80072bc:	50a3      	str	r3, [r4, r2]
 80072be:	e7c9      	b.n	8007254 <_malloc_r+0x20>
 80072c0:	4622      	mov	r2, r4
 80072c2:	6864      	ldr	r4, [r4, #4]
 80072c4:	e7cc      	b.n	8007260 <_malloc_r+0x2c>
 80072c6:	1cc4      	adds	r4, r0, #3
 80072c8:	f024 0403 	bic.w	r4, r4, #3
 80072cc:	42a0      	cmp	r0, r4
 80072ce:	d0e3      	beq.n	8007298 <_malloc_r+0x64>
 80072d0:	1a21      	subs	r1, r4, r0
 80072d2:	4630      	mov	r0, r6
 80072d4:	f000 fc72 	bl	8007bbc <_sbrk_r>
 80072d8:	3001      	adds	r0, #1
 80072da:	d1dd      	bne.n	8007298 <_malloc_r+0x64>
 80072dc:	e7cf      	b.n	800727e <_malloc_r+0x4a>
 80072de:	bf00      	nop
 80072e0:	20000204 	.word	0x20000204
 80072e4:	20000208 	.word	0x20000208

080072e8 <__cvt>:
 80072e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072ec:	ec55 4b10 	vmov	r4, r5, d0
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	460e      	mov	r6, r1
 80072f4:	4619      	mov	r1, r3
 80072f6:	462b      	mov	r3, r5
 80072f8:	bfbb      	ittet	lt
 80072fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072fe:	461d      	movlt	r5, r3
 8007300:	2300      	movge	r3, #0
 8007302:	232d      	movlt	r3, #45	; 0x2d
 8007304:	700b      	strb	r3, [r1, #0]
 8007306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007308:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800730c:	4691      	mov	r9, r2
 800730e:	f023 0820 	bic.w	r8, r3, #32
 8007312:	bfbc      	itt	lt
 8007314:	4622      	movlt	r2, r4
 8007316:	4614      	movlt	r4, r2
 8007318:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800731c:	d005      	beq.n	800732a <__cvt+0x42>
 800731e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007322:	d100      	bne.n	8007326 <__cvt+0x3e>
 8007324:	3601      	adds	r6, #1
 8007326:	2102      	movs	r1, #2
 8007328:	e000      	b.n	800732c <__cvt+0x44>
 800732a:	2103      	movs	r1, #3
 800732c:	ab03      	add	r3, sp, #12
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	ab02      	add	r3, sp, #8
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	ec45 4b10 	vmov	d0, r4, r5
 8007338:	4653      	mov	r3, sl
 800733a:	4632      	mov	r2, r6
 800733c:	f000 fcfc 	bl	8007d38 <_dtoa_r>
 8007340:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007344:	4607      	mov	r7, r0
 8007346:	d102      	bne.n	800734e <__cvt+0x66>
 8007348:	f019 0f01 	tst.w	r9, #1
 800734c:	d022      	beq.n	8007394 <__cvt+0xac>
 800734e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007352:	eb07 0906 	add.w	r9, r7, r6
 8007356:	d110      	bne.n	800737a <__cvt+0x92>
 8007358:	783b      	ldrb	r3, [r7, #0]
 800735a:	2b30      	cmp	r3, #48	; 0x30
 800735c:	d10a      	bne.n	8007374 <__cvt+0x8c>
 800735e:	2200      	movs	r2, #0
 8007360:	2300      	movs	r3, #0
 8007362:	4620      	mov	r0, r4
 8007364:	4629      	mov	r1, r5
 8007366:	f7f9 fbcf 	bl	8000b08 <__aeabi_dcmpeq>
 800736a:	b918      	cbnz	r0, 8007374 <__cvt+0x8c>
 800736c:	f1c6 0601 	rsb	r6, r6, #1
 8007370:	f8ca 6000 	str.w	r6, [sl]
 8007374:	f8da 3000 	ldr.w	r3, [sl]
 8007378:	4499      	add	r9, r3
 800737a:	2200      	movs	r2, #0
 800737c:	2300      	movs	r3, #0
 800737e:	4620      	mov	r0, r4
 8007380:	4629      	mov	r1, r5
 8007382:	f7f9 fbc1 	bl	8000b08 <__aeabi_dcmpeq>
 8007386:	b108      	cbz	r0, 800738c <__cvt+0xa4>
 8007388:	f8cd 900c 	str.w	r9, [sp, #12]
 800738c:	2230      	movs	r2, #48	; 0x30
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	454b      	cmp	r3, r9
 8007392:	d307      	bcc.n	80073a4 <__cvt+0xbc>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007398:	1bdb      	subs	r3, r3, r7
 800739a:	4638      	mov	r0, r7
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	b004      	add	sp, #16
 80073a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a4:	1c59      	adds	r1, r3, #1
 80073a6:	9103      	str	r1, [sp, #12]
 80073a8:	701a      	strb	r2, [r3, #0]
 80073aa:	e7f0      	b.n	800738e <__cvt+0xa6>

080073ac <__exponent>:
 80073ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073ae:	4603      	mov	r3, r0
 80073b0:	2900      	cmp	r1, #0
 80073b2:	bfb8      	it	lt
 80073b4:	4249      	neglt	r1, r1
 80073b6:	f803 2b02 	strb.w	r2, [r3], #2
 80073ba:	bfb4      	ite	lt
 80073bc:	222d      	movlt	r2, #45	; 0x2d
 80073be:	222b      	movge	r2, #43	; 0x2b
 80073c0:	2909      	cmp	r1, #9
 80073c2:	7042      	strb	r2, [r0, #1]
 80073c4:	dd2a      	ble.n	800741c <__exponent+0x70>
 80073c6:	f10d 0407 	add.w	r4, sp, #7
 80073ca:	46a4      	mov	ip, r4
 80073cc:	270a      	movs	r7, #10
 80073ce:	46a6      	mov	lr, r4
 80073d0:	460a      	mov	r2, r1
 80073d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80073d6:	fb07 1516 	mls	r5, r7, r6, r1
 80073da:	3530      	adds	r5, #48	; 0x30
 80073dc:	2a63      	cmp	r2, #99	; 0x63
 80073de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80073e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073e6:	4631      	mov	r1, r6
 80073e8:	dcf1      	bgt.n	80073ce <__exponent+0x22>
 80073ea:	3130      	adds	r1, #48	; 0x30
 80073ec:	f1ae 0502 	sub.w	r5, lr, #2
 80073f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073f4:	1c44      	adds	r4, r0, #1
 80073f6:	4629      	mov	r1, r5
 80073f8:	4561      	cmp	r1, ip
 80073fa:	d30a      	bcc.n	8007412 <__exponent+0x66>
 80073fc:	f10d 0209 	add.w	r2, sp, #9
 8007400:	eba2 020e 	sub.w	r2, r2, lr
 8007404:	4565      	cmp	r5, ip
 8007406:	bf88      	it	hi
 8007408:	2200      	movhi	r2, #0
 800740a:	4413      	add	r3, r2
 800740c:	1a18      	subs	r0, r3, r0
 800740e:	b003      	add	sp, #12
 8007410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007416:	f804 2f01 	strb.w	r2, [r4, #1]!
 800741a:	e7ed      	b.n	80073f8 <__exponent+0x4c>
 800741c:	2330      	movs	r3, #48	; 0x30
 800741e:	3130      	adds	r1, #48	; 0x30
 8007420:	7083      	strb	r3, [r0, #2]
 8007422:	70c1      	strb	r1, [r0, #3]
 8007424:	1d03      	adds	r3, r0, #4
 8007426:	e7f1      	b.n	800740c <__exponent+0x60>

08007428 <_printf_float>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	ed2d 8b02 	vpush	{d8}
 8007430:	b08d      	sub	sp, #52	; 0x34
 8007432:	460c      	mov	r4, r1
 8007434:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007438:	4616      	mov	r6, r2
 800743a:	461f      	mov	r7, r3
 800743c:	4605      	mov	r5, r0
 800743e:	f001 fa67 	bl	8008910 <_localeconv_r>
 8007442:	f8d0 a000 	ldr.w	sl, [r0]
 8007446:	4650      	mov	r0, sl
 8007448:	f7f8 fee2 	bl	8000210 <strlen>
 800744c:	2300      	movs	r3, #0
 800744e:	930a      	str	r3, [sp, #40]	; 0x28
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	9305      	str	r3, [sp, #20]
 8007454:	f8d8 3000 	ldr.w	r3, [r8]
 8007458:	f894 b018 	ldrb.w	fp, [r4, #24]
 800745c:	3307      	adds	r3, #7
 800745e:	f023 0307 	bic.w	r3, r3, #7
 8007462:	f103 0208 	add.w	r2, r3, #8
 8007466:	f8c8 2000 	str.w	r2, [r8]
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007472:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007476:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800747a:	9307      	str	r3, [sp, #28]
 800747c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007480:	ee08 0a10 	vmov	s16, r0
 8007484:	4b9f      	ldr	r3, [pc, #636]	; (8007704 <_printf_float+0x2dc>)
 8007486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800748a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800748e:	f7f9 fb6d 	bl	8000b6c <__aeabi_dcmpun>
 8007492:	bb88      	cbnz	r0, 80074f8 <_printf_float+0xd0>
 8007494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007498:	4b9a      	ldr	r3, [pc, #616]	; (8007704 <_printf_float+0x2dc>)
 800749a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800749e:	f7f9 fb47 	bl	8000b30 <__aeabi_dcmple>
 80074a2:	bb48      	cbnz	r0, 80074f8 <_printf_float+0xd0>
 80074a4:	2200      	movs	r2, #0
 80074a6:	2300      	movs	r3, #0
 80074a8:	4640      	mov	r0, r8
 80074aa:	4649      	mov	r1, r9
 80074ac:	f7f9 fb36 	bl	8000b1c <__aeabi_dcmplt>
 80074b0:	b110      	cbz	r0, 80074b8 <_printf_float+0x90>
 80074b2:	232d      	movs	r3, #45	; 0x2d
 80074b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074b8:	4b93      	ldr	r3, [pc, #588]	; (8007708 <_printf_float+0x2e0>)
 80074ba:	4894      	ldr	r0, [pc, #592]	; (800770c <_printf_float+0x2e4>)
 80074bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074c0:	bf94      	ite	ls
 80074c2:	4698      	movls	r8, r3
 80074c4:	4680      	movhi	r8, r0
 80074c6:	2303      	movs	r3, #3
 80074c8:	6123      	str	r3, [r4, #16]
 80074ca:	9b05      	ldr	r3, [sp, #20]
 80074cc:	f023 0204 	bic.w	r2, r3, #4
 80074d0:	6022      	str	r2, [r4, #0]
 80074d2:	f04f 0900 	mov.w	r9, #0
 80074d6:	9700      	str	r7, [sp, #0]
 80074d8:	4633      	mov	r3, r6
 80074da:	aa0b      	add	r2, sp, #44	; 0x2c
 80074dc:	4621      	mov	r1, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 f9d8 	bl	8007894 <_printf_common>
 80074e4:	3001      	adds	r0, #1
 80074e6:	f040 8090 	bne.w	800760a <_printf_float+0x1e2>
 80074ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074ee:	b00d      	add	sp, #52	; 0x34
 80074f0:	ecbd 8b02 	vpop	{d8}
 80074f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f8:	4642      	mov	r2, r8
 80074fa:	464b      	mov	r3, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	4649      	mov	r1, r9
 8007500:	f7f9 fb34 	bl	8000b6c <__aeabi_dcmpun>
 8007504:	b140      	cbz	r0, 8007518 <_printf_float+0xf0>
 8007506:	464b      	mov	r3, r9
 8007508:	2b00      	cmp	r3, #0
 800750a:	bfbc      	itt	lt
 800750c:	232d      	movlt	r3, #45	; 0x2d
 800750e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007512:	487f      	ldr	r0, [pc, #508]	; (8007710 <_printf_float+0x2e8>)
 8007514:	4b7f      	ldr	r3, [pc, #508]	; (8007714 <_printf_float+0x2ec>)
 8007516:	e7d1      	b.n	80074bc <_printf_float+0x94>
 8007518:	6863      	ldr	r3, [r4, #4]
 800751a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800751e:	9206      	str	r2, [sp, #24]
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	d13f      	bne.n	80075a4 <_printf_float+0x17c>
 8007524:	2306      	movs	r3, #6
 8007526:	6063      	str	r3, [r4, #4]
 8007528:	9b05      	ldr	r3, [sp, #20]
 800752a:	6861      	ldr	r1, [r4, #4]
 800752c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007530:	2300      	movs	r3, #0
 8007532:	9303      	str	r3, [sp, #12]
 8007534:	ab0a      	add	r3, sp, #40	; 0x28
 8007536:	e9cd b301 	strd	fp, r3, [sp, #4]
 800753a:	ab09      	add	r3, sp, #36	; 0x24
 800753c:	ec49 8b10 	vmov	d0, r8, r9
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	6022      	str	r2, [r4, #0]
 8007544:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007548:	4628      	mov	r0, r5
 800754a:	f7ff fecd 	bl	80072e8 <__cvt>
 800754e:	9b06      	ldr	r3, [sp, #24]
 8007550:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007552:	2b47      	cmp	r3, #71	; 0x47
 8007554:	4680      	mov	r8, r0
 8007556:	d108      	bne.n	800756a <_printf_float+0x142>
 8007558:	1cc8      	adds	r0, r1, #3
 800755a:	db02      	blt.n	8007562 <_printf_float+0x13a>
 800755c:	6863      	ldr	r3, [r4, #4]
 800755e:	4299      	cmp	r1, r3
 8007560:	dd41      	ble.n	80075e6 <_printf_float+0x1be>
 8007562:	f1ab 0b02 	sub.w	fp, fp, #2
 8007566:	fa5f fb8b 	uxtb.w	fp, fp
 800756a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800756e:	d820      	bhi.n	80075b2 <_printf_float+0x18a>
 8007570:	3901      	subs	r1, #1
 8007572:	465a      	mov	r2, fp
 8007574:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007578:	9109      	str	r1, [sp, #36]	; 0x24
 800757a:	f7ff ff17 	bl	80073ac <__exponent>
 800757e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007580:	1813      	adds	r3, r2, r0
 8007582:	2a01      	cmp	r2, #1
 8007584:	4681      	mov	r9, r0
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	dc02      	bgt.n	8007590 <_printf_float+0x168>
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	07d2      	lsls	r2, r2, #31
 800758e:	d501      	bpl.n	8007594 <_printf_float+0x16c>
 8007590:	3301      	adds	r3, #1
 8007592:	6123      	str	r3, [r4, #16]
 8007594:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007598:	2b00      	cmp	r3, #0
 800759a:	d09c      	beq.n	80074d6 <_printf_float+0xae>
 800759c:	232d      	movs	r3, #45	; 0x2d
 800759e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a2:	e798      	b.n	80074d6 <_printf_float+0xae>
 80075a4:	9a06      	ldr	r2, [sp, #24]
 80075a6:	2a47      	cmp	r2, #71	; 0x47
 80075a8:	d1be      	bne.n	8007528 <_printf_float+0x100>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1bc      	bne.n	8007528 <_printf_float+0x100>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e7b9      	b.n	8007526 <_printf_float+0xfe>
 80075b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075b6:	d118      	bne.n	80075ea <_printf_float+0x1c2>
 80075b8:	2900      	cmp	r1, #0
 80075ba:	6863      	ldr	r3, [r4, #4]
 80075bc:	dd0b      	ble.n	80075d6 <_printf_float+0x1ae>
 80075be:	6121      	str	r1, [r4, #16]
 80075c0:	b913      	cbnz	r3, 80075c8 <_printf_float+0x1a0>
 80075c2:	6822      	ldr	r2, [r4, #0]
 80075c4:	07d0      	lsls	r0, r2, #31
 80075c6:	d502      	bpl.n	80075ce <_printf_float+0x1a6>
 80075c8:	3301      	adds	r3, #1
 80075ca:	440b      	add	r3, r1
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80075d0:	f04f 0900 	mov.w	r9, #0
 80075d4:	e7de      	b.n	8007594 <_printf_float+0x16c>
 80075d6:	b913      	cbnz	r3, 80075de <_printf_float+0x1b6>
 80075d8:	6822      	ldr	r2, [r4, #0]
 80075da:	07d2      	lsls	r2, r2, #31
 80075dc:	d501      	bpl.n	80075e2 <_printf_float+0x1ba>
 80075de:	3302      	adds	r3, #2
 80075e0:	e7f4      	b.n	80075cc <_printf_float+0x1a4>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e7f2      	b.n	80075cc <_printf_float+0x1a4>
 80075e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ec:	4299      	cmp	r1, r3
 80075ee:	db05      	blt.n	80075fc <_printf_float+0x1d4>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	6121      	str	r1, [r4, #16]
 80075f4:	07d8      	lsls	r0, r3, #31
 80075f6:	d5ea      	bpl.n	80075ce <_printf_float+0x1a6>
 80075f8:	1c4b      	adds	r3, r1, #1
 80075fa:	e7e7      	b.n	80075cc <_printf_float+0x1a4>
 80075fc:	2900      	cmp	r1, #0
 80075fe:	bfd4      	ite	le
 8007600:	f1c1 0202 	rsble	r2, r1, #2
 8007604:	2201      	movgt	r2, #1
 8007606:	4413      	add	r3, r2
 8007608:	e7e0      	b.n	80075cc <_printf_float+0x1a4>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	055a      	lsls	r2, r3, #21
 800760e:	d407      	bmi.n	8007620 <_printf_float+0x1f8>
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	4642      	mov	r2, r8
 8007614:	4631      	mov	r1, r6
 8007616:	4628      	mov	r0, r5
 8007618:	47b8      	blx	r7
 800761a:	3001      	adds	r0, #1
 800761c:	d12c      	bne.n	8007678 <_printf_float+0x250>
 800761e:	e764      	b.n	80074ea <_printf_float+0xc2>
 8007620:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007624:	f240 80e0 	bls.w	80077e8 <_printf_float+0x3c0>
 8007628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800762c:	2200      	movs	r2, #0
 800762e:	2300      	movs	r3, #0
 8007630:	f7f9 fa6a 	bl	8000b08 <__aeabi_dcmpeq>
 8007634:	2800      	cmp	r0, #0
 8007636:	d034      	beq.n	80076a2 <_printf_float+0x27a>
 8007638:	4a37      	ldr	r2, [pc, #220]	; (8007718 <_printf_float+0x2f0>)
 800763a:	2301      	movs	r3, #1
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	f43f af51 	beq.w	80074ea <_printf_float+0xc2>
 8007648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800764c:	429a      	cmp	r2, r3
 800764e:	db02      	blt.n	8007656 <_printf_float+0x22e>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	07d8      	lsls	r0, r3, #31
 8007654:	d510      	bpl.n	8007678 <_printf_float+0x250>
 8007656:	ee18 3a10 	vmov	r3, s16
 800765a:	4652      	mov	r2, sl
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f af41 	beq.w	80074ea <_printf_float+0xc2>
 8007668:	f04f 0800 	mov.w	r8, #0
 800766c:	f104 091a 	add.w	r9, r4, #26
 8007670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007672:	3b01      	subs	r3, #1
 8007674:	4543      	cmp	r3, r8
 8007676:	dc09      	bgt.n	800768c <_printf_float+0x264>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	079b      	lsls	r3, r3, #30
 800767c:	f100 8105 	bmi.w	800788a <_printf_float+0x462>
 8007680:	68e0      	ldr	r0, [r4, #12]
 8007682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007684:	4298      	cmp	r0, r3
 8007686:	bfb8      	it	lt
 8007688:	4618      	movlt	r0, r3
 800768a:	e730      	b.n	80074ee <_printf_float+0xc6>
 800768c:	2301      	movs	r3, #1
 800768e:	464a      	mov	r2, r9
 8007690:	4631      	mov	r1, r6
 8007692:	4628      	mov	r0, r5
 8007694:	47b8      	blx	r7
 8007696:	3001      	adds	r0, #1
 8007698:	f43f af27 	beq.w	80074ea <_printf_float+0xc2>
 800769c:	f108 0801 	add.w	r8, r8, #1
 80076a0:	e7e6      	b.n	8007670 <_printf_float+0x248>
 80076a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	dc39      	bgt.n	800771c <_printf_float+0x2f4>
 80076a8:	4a1b      	ldr	r2, [pc, #108]	; (8007718 <_printf_float+0x2f0>)
 80076aa:	2301      	movs	r3, #1
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	47b8      	blx	r7
 80076b2:	3001      	adds	r0, #1
 80076b4:	f43f af19 	beq.w	80074ea <_printf_float+0xc2>
 80076b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076bc:	4313      	orrs	r3, r2
 80076be:	d102      	bne.n	80076c6 <_printf_float+0x29e>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	07d9      	lsls	r1, r3, #31
 80076c4:	d5d8      	bpl.n	8007678 <_printf_float+0x250>
 80076c6:	ee18 3a10 	vmov	r3, s16
 80076ca:	4652      	mov	r2, sl
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	47b8      	blx	r7
 80076d2:	3001      	adds	r0, #1
 80076d4:	f43f af09 	beq.w	80074ea <_printf_float+0xc2>
 80076d8:	f04f 0900 	mov.w	r9, #0
 80076dc:	f104 0a1a 	add.w	sl, r4, #26
 80076e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e2:	425b      	negs	r3, r3
 80076e4:	454b      	cmp	r3, r9
 80076e6:	dc01      	bgt.n	80076ec <_printf_float+0x2c4>
 80076e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ea:	e792      	b.n	8007612 <_printf_float+0x1ea>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4652      	mov	r2, sl
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b8      	blx	r7
 80076f6:	3001      	adds	r0, #1
 80076f8:	f43f aef7 	beq.w	80074ea <_printf_float+0xc2>
 80076fc:	f109 0901 	add.w	r9, r9, #1
 8007700:	e7ee      	b.n	80076e0 <_printf_float+0x2b8>
 8007702:	bf00      	nop
 8007704:	7fefffff 	.word	0x7fefffff
 8007708:	08009f7c 	.word	0x08009f7c
 800770c:	08009f80 	.word	0x08009f80
 8007710:	08009f88 	.word	0x08009f88
 8007714:	08009f84 	.word	0x08009f84
 8007718:	08009f8c 	.word	0x08009f8c
 800771c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800771e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007720:	429a      	cmp	r2, r3
 8007722:	bfa8      	it	ge
 8007724:	461a      	movge	r2, r3
 8007726:	2a00      	cmp	r2, #0
 8007728:	4691      	mov	r9, r2
 800772a:	dc37      	bgt.n	800779c <_printf_float+0x374>
 800772c:	f04f 0b00 	mov.w	fp, #0
 8007730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007734:	f104 021a 	add.w	r2, r4, #26
 8007738:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800773a:	9305      	str	r3, [sp, #20]
 800773c:	eba3 0309 	sub.w	r3, r3, r9
 8007740:	455b      	cmp	r3, fp
 8007742:	dc33      	bgt.n	80077ac <_printf_float+0x384>
 8007744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007748:	429a      	cmp	r2, r3
 800774a:	db3b      	blt.n	80077c4 <_printf_float+0x39c>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	07da      	lsls	r2, r3, #31
 8007750:	d438      	bmi.n	80077c4 <_printf_float+0x39c>
 8007752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007754:	9b05      	ldr	r3, [sp, #20]
 8007756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	eba2 0901 	sub.w	r9, r2, r1
 800775e:	4599      	cmp	r9, r3
 8007760:	bfa8      	it	ge
 8007762:	4699      	movge	r9, r3
 8007764:	f1b9 0f00 	cmp.w	r9, #0
 8007768:	dc35      	bgt.n	80077d6 <_printf_float+0x3ae>
 800776a:	f04f 0800 	mov.w	r8, #0
 800776e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007772:	f104 0a1a 	add.w	sl, r4, #26
 8007776:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	eba3 0309 	sub.w	r3, r3, r9
 8007780:	4543      	cmp	r3, r8
 8007782:	f77f af79 	ble.w	8007678 <_printf_float+0x250>
 8007786:	2301      	movs	r3, #1
 8007788:	4652      	mov	r2, sl
 800778a:	4631      	mov	r1, r6
 800778c:	4628      	mov	r0, r5
 800778e:	47b8      	blx	r7
 8007790:	3001      	adds	r0, #1
 8007792:	f43f aeaa 	beq.w	80074ea <_printf_float+0xc2>
 8007796:	f108 0801 	add.w	r8, r8, #1
 800779a:	e7ec      	b.n	8007776 <_printf_float+0x34e>
 800779c:	4613      	mov	r3, r2
 800779e:	4631      	mov	r1, r6
 80077a0:	4642      	mov	r2, r8
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	d1c0      	bne.n	800772c <_printf_float+0x304>
 80077aa:	e69e      	b.n	80074ea <_printf_float+0xc2>
 80077ac:	2301      	movs	r3, #1
 80077ae:	4631      	mov	r1, r6
 80077b0:	4628      	mov	r0, r5
 80077b2:	9205      	str	r2, [sp, #20]
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f ae97 	beq.w	80074ea <_printf_float+0xc2>
 80077bc:	9a05      	ldr	r2, [sp, #20]
 80077be:	f10b 0b01 	add.w	fp, fp, #1
 80077c2:	e7b9      	b.n	8007738 <_printf_float+0x310>
 80077c4:	ee18 3a10 	vmov	r3, s16
 80077c8:	4652      	mov	r2, sl
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	d1be      	bne.n	8007752 <_printf_float+0x32a>
 80077d4:	e689      	b.n	80074ea <_printf_float+0xc2>
 80077d6:	9a05      	ldr	r2, [sp, #20]
 80077d8:	464b      	mov	r3, r9
 80077da:	4442      	add	r2, r8
 80077dc:	4631      	mov	r1, r6
 80077de:	4628      	mov	r0, r5
 80077e0:	47b8      	blx	r7
 80077e2:	3001      	adds	r0, #1
 80077e4:	d1c1      	bne.n	800776a <_printf_float+0x342>
 80077e6:	e680      	b.n	80074ea <_printf_float+0xc2>
 80077e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ea:	2a01      	cmp	r2, #1
 80077ec:	dc01      	bgt.n	80077f2 <_printf_float+0x3ca>
 80077ee:	07db      	lsls	r3, r3, #31
 80077f0:	d538      	bpl.n	8007864 <_printf_float+0x43c>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4642      	mov	r2, r8
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	f43f ae74 	beq.w	80074ea <_printf_float+0xc2>
 8007802:	ee18 3a10 	vmov	r3, s16
 8007806:	4652      	mov	r2, sl
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	f43f ae6b 	beq.w	80074ea <_printf_float+0xc2>
 8007814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007818:	2200      	movs	r2, #0
 800781a:	2300      	movs	r3, #0
 800781c:	f7f9 f974 	bl	8000b08 <__aeabi_dcmpeq>
 8007820:	b9d8      	cbnz	r0, 800785a <_printf_float+0x432>
 8007822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007824:	f108 0201 	add.w	r2, r8, #1
 8007828:	3b01      	subs	r3, #1
 800782a:	4631      	mov	r1, r6
 800782c:	4628      	mov	r0, r5
 800782e:	47b8      	blx	r7
 8007830:	3001      	adds	r0, #1
 8007832:	d10e      	bne.n	8007852 <_printf_float+0x42a>
 8007834:	e659      	b.n	80074ea <_printf_float+0xc2>
 8007836:	2301      	movs	r3, #1
 8007838:	4652      	mov	r2, sl
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	f43f ae52 	beq.w	80074ea <_printf_float+0xc2>
 8007846:	f108 0801 	add.w	r8, r8, #1
 800784a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784c:	3b01      	subs	r3, #1
 800784e:	4543      	cmp	r3, r8
 8007850:	dcf1      	bgt.n	8007836 <_printf_float+0x40e>
 8007852:	464b      	mov	r3, r9
 8007854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007858:	e6dc      	b.n	8007614 <_printf_float+0x1ec>
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	f104 0a1a 	add.w	sl, r4, #26
 8007862:	e7f2      	b.n	800784a <_printf_float+0x422>
 8007864:	2301      	movs	r3, #1
 8007866:	4642      	mov	r2, r8
 8007868:	e7df      	b.n	800782a <_printf_float+0x402>
 800786a:	2301      	movs	r3, #1
 800786c:	464a      	mov	r2, r9
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	f43f ae38 	beq.w	80074ea <_printf_float+0xc2>
 800787a:	f108 0801 	add.w	r8, r8, #1
 800787e:	68e3      	ldr	r3, [r4, #12]
 8007880:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007882:	1a5b      	subs	r3, r3, r1
 8007884:	4543      	cmp	r3, r8
 8007886:	dcf0      	bgt.n	800786a <_printf_float+0x442>
 8007888:	e6fa      	b.n	8007680 <_printf_float+0x258>
 800788a:	f04f 0800 	mov.w	r8, #0
 800788e:	f104 0919 	add.w	r9, r4, #25
 8007892:	e7f4      	b.n	800787e <_printf_float+0x456>

08007894 <_printf_common>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	4616      	mov	r6, r2
 800789a:	4699      	mov	r9, r3
 800789c:	688a      	ldr	r2, [r1, #8]
 800789e:	690b      	ldr	r3, [r1, #16]
 80078a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078a4:	4293      	cmp	r3, r2
 80078a6:	bfb8      	it	lt
 80078a8:	4613      	movlt	r3, r2
 80078aa:	6033      	str	r3, [r6, #0]
 80078ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078b0:	4607      	mov	r7, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	b10a      	cbz	r2, 80078ba <_printf_common+0x26>
 80078b6:	3301      	adds	r3, #1
 80078b8:	6033      	str	r3, [r6, #0]
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	0699      	lsls	r1, r3, #26
 80078be:	bf42      	ittt	mi
 80078c0:	6833      	ldrmi	r3, [r6, #0]
 80078c2:	3302      	addmi	r3, #2
 80078c4:	6033      	strmi	r3, [r6, #0]
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	f015 0506 	ands.w	r5, r5, #6
 80078cc:	d106      	bne.n	80078dc <_printf_common+0x48>
 80078ce:	f104 0a19 	add.w	sl, r4, #25
 80078d2:	68e3      	ldr	r3, [r4, #12]
 80078d4:	6832      	ldr	r2, [r6, #0]
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc26      	bgt.n	800792a <_printf_common+0x96>
 80078dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078e0:	1e13      	subs	r3, r2, #0
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	bf18      	it	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	0692      	lsls	r2, r2, #26
 80078ea:	d42b      	bmi.n	8007944 <_printf_common+0xb0>
 80078ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078f0:	4649      	mov	r1, r9
 80078f2:	4638      	mov	r0, r7
 80078f4:	47c0      	blx	r8
 80078f6:	3001      	adds	r0, #1
 80078f8:	d01e      	beq.n	8007938 <_printf_common+0xa4>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	68e5      	ldr	r5, [r4, #12]
 80078fe:	6832      	ldr	r2, [r6, #0]
 8007900:	f003 0306 	and.w	r3, r3, #6
 8007904:	2b04      	cmp	r3, #4
 8007906:	bf08      	it	eq
 8007908:	1aad      	subeq	r5, r5, r2
 800790a:	68a3      	ldr	r3, [r4, #8]
 800790c:	6922      	ldr	r2, [r4, #16]
 800790e:	bf0c      	ite	eq
 8007910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007914:	2500      	movne	r5, #0
 8007916:	4293      	cmp	r3, r2
 8007918:	bfc4      	itt	gt
 800791a:	1a9b      	subgt	r3, r3, r2
 800791c:	18ed      	addgt	r5, r5, r3
 800791e:	2600      	movs	r6, #0
 8007920:	341a      	adds	r4, #26
 8007922:	42b5      	cmp	r5, r6
 8007924:	d11a      	bne.n	800795c <_printf_common+0xc8>
 8007926:	2000      	movs	r0, #0
 8007928:	e008      	b.n	800793c <_printf_common+0xa8>
 800792a:	2301      	movs	r3, #1
 800792c:	4652      	mov	r2, sl
 800792e:	4649      	mov	r1, r9
 8007930:	4638      	mov	r0, r7
 8007932:	47c0      	blx	r8
 8007934:	3001      	adds	r0, #1
 8007936:	d103      	bne.n	8007940 <_printf_common+0xac>
 8007938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007940:	3501      	adds	r5, #1
 8007942:	e7c6      	b.n	80078d2 <_printf_common+0x3e>
 8007944:	18e1      	adds	r1, r4, r3
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	2030      	movs	r0, #48	; 0x30
 800794a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800794e:	4422      	add	r2, r4
 8007950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007958:	3302      	adds	r3, #2
 800795a:	e7c7      	b.n	80078ec <_printf_common+0x58>
 800795c:	2301      	movs	r3, #1
 800795e:	4622      	mov	r2, r4
 8007960:	4649      	mov	r1, r9
 8007962:	4638      	mov	r0, r7
 8007964:	47c0      	blx	r8
 8007966:	3001      	adds	r0, #1
 8007968:	d0e6      	beq.n	8007938 <_printf_common+0xa4>
 800796a:	3601      	adds	r6, #1
 800796c:	e7d9      	b.n	8007922 <_printf_common+0x8e>
	...

08007970 <_printf_i>:
 8007970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	460c      	mov	r4, r1
 8007976:	4691      	mov	r9, r2
 8007978:	7e27      	ldrb	r7, [r4, #24]
 800797a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800797c:	2f78      	cmp	r7, #120	; 0x78
 800797e:	4680      	mov	r8, r0
 8007980:	469a      	mov	sl, r3
 8007982:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007986:	d807      	bhi.n	8007998 <_printf_i+0x28>
 8007988:	2f62      	cmp	r7, #98	; 0x62
 800798a:	d80a      	bhi.n	80079a2 <_printf_i+0x32>
 800798c:	2f00      	cmp	r7, #0
 800798e:	f000 80d8 	beq.w	8007b42 <_printf_i+0x1d2>
 8007992:	2f58      	cmp	r7, #88	; 0x58
 8007994:	f000 80a3 	beq.w	8007ade <_printf_i+0x16e>
 8007998:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800799c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079a0:	e03a      	b.n	8007a18 <_printf_i+0xa8>
 80079a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079a6:	2b15      	cmp	r3, #21
 80079a8:	d8f6      	bhi.n	8007998 <_printf_i+0x28>
 80079aa:	a001      	add	r0, pc, #4	; (adr r0, 80079b0 <_printf_i+0x40>)
 80079ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	08007a1d 	.word	0x08007a1d
 80079b8:	08007999 	.word	0x08007999
 80079bc:	08007999 	.word	0x08007999
 80079c0:	08007999 	.word	0x08007999
 80079c4:	08007999 	.word	0x08007999
 80079c8:	08007a1d 	.word	0x08007a1d
 80079cc:	08007999 	.word	0x08007999
 80079d0:	08007999 	.word	0x08007999
 80079d4:	08007999 	.word	0x08007999
 80079d8:	08007999 	.word	0x08007999
 80079dc:	08007b29 	.word	0x08007b29
 80079e0:	08007a4d 	.word	0x08007a4d
 80079e4:	08007b0b 	.word	0x08007b0b
 80079e8:	08007999 	.word	0x08007999
 80079ec:	08007999 	.word	0x08007999
 80079f0:	08007b4b 	.word	0x08007b4b
 80079f4:	08007999 	.word	0x08007999
 80079f8:	08007a4d 	.word	0x08007a4d
 80079fc:	08007999 	.word	0x08007999
 8007a00:	08007999 	.word	0x08007999
 8007a04:	08007b13 	.word	0x08007b13
 8007a08:	680b      	ldr	r3, [r1, #0]
 8007a0a:	1d1a      	adds	r2, r3, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	600a      	str	r2, [r1, #0]
 8007a10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e0a3      	b.n	8007b64 <_printf_i+0x1f4>
 8007a1c:	6825      	ldr	r5, [r4, #0]
 8007a1e:	6808      	ldr	r0, [r1, #0]
 8007a20:	062e      	lsls	r6, r5, #24
 8007a22:	f100 0304 	add.w	r3, r0, #4
 8007a26:	d50a      	bpl.n	8007a3e <_printf_i+0xce>
 8007a28:	6805      	ldr	r5, [r0, #0]
 8007a2a:	600b      	str	r3, [r1, #0]
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	da03      	bge.n	8007a38 <_printf_i+0xc8>
 8007a30:	232d      	movs	r3, #45	; 0x2d
 8007a32:	426d      	negs	r5, r5
 8007a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a38:	485e      	ldr	r0, [pc, #376]	; (8007bb4 <_printf_i+0x244>)
 8007a3a:	230a      	movs	r3, #10
 8007a3c:	e019      	b.n	8007a72 <_printf_i+0x102>
 8007a3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a42:	6805      	ldr	r5, [r0, #0]
 8007a44:	600b      	str	r3, [r1, #0]
 8007a46:	bf18      	it	ne
 8007a48:	b22d      	sxthne	r5, r5
 8007a4a:	e7ef      	b.n	8007a2c <_printf_i+0xbc>
 8007a4c:	680b      	ldr	r3, [r1, #0]
 8007a4e:	6825      	ldr	r5, [r4, #0]
 8007a50:	1d18      	adds	r0, r3, #4
 8007a52:	6008      	str	r0, [r1, #0]
 8007a54:	0628      	lsls	r0, r5, #24
 8007a56:	d501      	bpl.n	8007a5c <_printf_i+0xec>
 8007a58:	681d      	ldr	r5, [r3, #0]
 8007a5a:	e002      	b.n	8007a62 <_printf_i+0xf2>
 8007a5c:	0669      	lsls	r1, r5, #25
 8007a5e:	d5fb      	bpl.n	8007a58 <_printf_i+0xe8>
 8007a60:	881d      	ldrh	r5, [r3, #0]
 8007a62:	4854      	ldr	r0, [pc, #336]	; (8007bb4 <_printf_i+0x244>)
 8007a64:	2f6f      	cmp	r7, #111	; 0x6f
 8007a66:	bf0c      	ite	eq
 8007a68:	2308      	moveq	r3, #8
 8007a6a:	230a      	movne	r3, #10
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a72:	6866      	ldr	r6, [r4, #4]
 8007a74:	60a6      	str	r6, [r4, #8]
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	bfa2      	ittt	ge
 8007a7a:	6821      	ldrge	r1, [r4, #0]
 8007a7c:	f021 0104 	bicge.w	r1, r1, #4
 8007a80:	6021      	strge	r1, [r4, #0]
 8007a82:	b90d      	cbnz	r5, 8007a88 <_printf_i+0x118>
 8007a84:	2e00      	cmp	r6, #0
 8007a86:	d04d      	beq.n	8007b24 <_printf_i+0x1b4>
 8007a88:	4616      	mov	r6, r2
 8007a8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a8e:	fb03 5711 	mls	r7, r3, r1, r5
 8007a92:	5dc7      	ldrb	r7, [r0, r7]
 8007a94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a98:	462f      	mov	r7, r5
 8007a9a:	42bb      	cmp	r3, r7
 8007a9c:	460d      	mov	r5, r1
 8007a9e:	d9f4      	bls.n	8007a8a <_printf_i+0x11a>
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	d10b      	bne.n	8007abc <_printf_i+0x14c>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	07df      	lsls	r7, r3, #31
 8007aa8:	d508      	bpl.n	8007abc <_printf_i+0x14c>
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	6861      	ldr	r1, [r4, #4]
 8007aae:	4299      	cmp	r1, r3
 8007ab0:	bfde      	ittt	le
 8007ab2:	2330      	movle	r3, #48	; 0x30
 8007ab4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ab8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007abc:	1b92      	subs	r2, r2, r6
 8007abe:	6122      	str	r2, [r4, #16]
 8007ac0:	f8cd a000 	str.w	sl, [sp]
 8007ac4:	464b      	mov	r3, r9
 8007ac6:	aa03      	add	r2, sp, #12
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4640      	mov	r0, r8
 8007acc:	f7ff fee2 	bl	8007894 <_printf_common>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d14c      	bne.n	8007b6e <_printf_i+0x1fe>
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ad8:	b004      	add	sp, #16
 8007ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ade:	4835      	ldr	r0, [pc, #212]	; (8007bb4 <_printf_i+0x244>)
 8007ae0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	680e      	ldr	r6, [r1, #0]
 8007ae8:	061f      	lsls	r7, r3, #24
 8007aea:	f856 5b04 	ldr.w	r5, [r6], #4
 8007aee:	600e      	str	r6, [r1, #0]
 8007af0:	d514      	bpl.n	8007b1c <_printf_i+0x1ac>
 8007af2:	07d9      	lsls	r1, r3, #31
 8007af4:	bf44      	itt	mi
 8007af6:	f043 0320 	orrmi.w	r3, r3, #32
 8007afa:	6023      	strmi	r3, [r4, #0]
 8007afc:	b91d      	cbnz	r5, 8007b06 <_printf_i+0x196>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	f023 0320 	bic.w	r3, r3, #32
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	2310      	movs	r3, #16
 8007b08:	e7b0      	b.n	8007a6c <_printf_i+0xfc>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	f043 0320 	orr.w	r3, r3, #32
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	2378      	movs	r3, #120	; 0x78
 8007b14:	4828      	ldr	r0, [pc, #160]	; (8007bb8 <_printf_i+0x248>)
 8007b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b1a:	e7e3      	b.n	8007ae4 <_printf_i+0x174>
 8007b1c:	065e      	lsls	r6, r3, #25
 8007b1e:	bf48      	it	mi
 8007b20:	b2ad      	uxthmi	r5, r5
 8007b22:	e7e6      	b.n	8007af2 <_printf_i+0x182>
 8007b24:	4616      	mov	r6, r2
 8007b26:	e7bb      	b.n	8007aa0 <_printf_i+0x130>
 8007b28:	680b      	ldr	r3, [r1, #0]
 8007b2a:	6826      	ldr	r6, [r4, #0]
 8007b2c:	6960      	ldr	r0, [r4, #20]
 8007b2e:	1d1d      	adds	r5, r3, #4
 8007b30:	600d      	str	r5, [r1, #0]
 8007b32:	0635      	lsls	r5, r6, #24
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	d501      	bpl.n	8007b3c <_printf_i+0x1cc>
 8007b38:	6018      	str	r0, [r3, #0]
 8007b3a:	e002      	b.n	8007b42 <_printf_i+0x1d2>
 8007b3c:	0671      	lsls	r1, r6, #25
 8007b3e:	d5fb      	bpl.n	8007b38 <_printf_i+0x1c8>
 8007b40:	8018      	strh	r0, [r3, #0]
 8007b42:	2300      	movs	r3, #0
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	4616      	mov	r6, r2
 8007b48:	e7ba      	b.n	8007ac0 <_printf_i+0x150>
 8007b4a:	680b      	ldr	r3, [r1, #0]
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	600a      	str	r2, [r1, #0]
 8007b50:	681e      	ldr	r6, [r3, #0]
 8007b52:	6862      	ldr	r2, [r4, #4]
 8007b54:	2100      	movs	r1, #0
 8007b56:	4630      	mov	r0, r6
 8007b58:	f7f8 fb62 	bl	8000220 <memchr>
 8007b5c:	b108      	cbz	r0, 8007b62 <_printf_i+0x1f2>
 8007b5e:	1b80      	subs	r0, r0, r6
 8007b60:	6060      	str	r0, [r4, #4]
 8007b62:	6863      	ldr	r3, [r4, #4]
 8007b64:	6123      	str	r3, [r4, #16]
 8007b66:	2300      	movs	r3, #0
 8007b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b6c:	e7a8      	b.n	8007ac0 <_printf_i+0x150>
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	4632      	mov	r2, r6
 8007b72:	4649      	mov	r1, r9
 8007b74:	4640      	mov	r0, r8
 8007b76:	47d0      	blx	sl
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d0ab      	beq.n	8007ad4 <_printf_i+0x164>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	079b      	lsls	r3, r3, #30
 8007b80:	d413      	bmi.n	8007baa <_printf_i+0x23a>
 8007b82:	68e0      	ldr	r0, [r4, #12]
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	4298      	cmp	r0, r3
 8007b88:	bfb8      	it	lt
 8007b8a:	4618      	movlt	r0, r3
 8007b8c:	e7a4      	b.n	8007ad8 <_printf_i+0x168>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4632      	mov	r2, r6
 8007b92:	4649      	mov	r1, r9
 8007b94:	4640      	mov	r0, r8
 8007b96:	47d0      	blx	sl
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d09b      	beq.n	8007ad4 <_printf_i+0x164>
 8007b9c:	3501      	adds	r5, #1
 8007b9e:	68e3      	ldr	r3, [r4, #12]
 8007ba0:	9903      	ldr	r1, [sp, #12]
 8007ba2:	1a5b      	subs	r3, r3, r1
 8007ba4:	42ab      	cmp	r3, r5
 8007ba6:	dcf2      	bgt.n	8007b8e <_printf_i+0x21e>
 8007ba8:	e7eb      	b.n	8007b82 <_printf_i+0x212>
 8007baa:	2500      	movs	r5, #0
 8007bac:	f104 0619 	add.w	r6, r4, #25
 8007bb0:	e7f5      	b.n	8007b9e <_printf_i+0x22e>
 8007bb2:	bf00      	nop
 8007bb4:	08009f8e 	.word	0x08009f8e
 8007bb8:	08009f9f 	.word	0x08009f9f

08007bbc <_sbrk_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4d06      	ldr	r5, [pc, #24]	; (8007bd8 <_sbrk_r+0x1c>)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	602b      	str	r3, [r5, #0]
 8007bc8:	f7fa faac 	bl	8002124 <_sbrk>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_sbrk_r+0x1a>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_sbrk_r+0x1a>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	200007e0 	.word	0x200007e0

08007bdc <siprintf>:
 8007bdc:	b40e      	push	{r1, r2, r3}
 8007bde:	b500      	push	{lr}
 8007be0:	b09c      	sub	sp, #112	; 0x70
 8007be2:	ab1d      	add	r3, sp, #116	; 0x74
 8007be4:	9002      	str	r0, [sp, #8]
 8007be6:	9006      	str	r0, [sp, #24]
 8007be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bec:	4809      	ldr	r0, [pc, #36]	; (8007c14 <siprintf+0x38>)
 8007bee:	9107      	str	r1, [sp, #28]
 8007bf0:	9104      	str	r1, [sp, #16]
 8007bf2:	4909      	ldr	r1, [pc, #36]	; (8007c18 <siprintf+0x3c>)
 8007bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bf8:	9105      	str	r1, [sp, #20]
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	9301      	str	r3, [sp, #4]
 8007bfe:	a902      	add	r1, sp, #8
 8007c00:	f001 fad6 	bl	80091b0 <_svfiprintf_r>
 8007c04:	9b02      	ldr	r3, [sp, #8]
 8007c06:	2200      	movs	r2, #0
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	b01c      	add	sp, #112	; 0x70
 8007c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c10:	b003      	add	sp, #12
 8007c12:	4770      	bx	lr
 8007c14:	20000010 	.word	0x20000010
 8007c18:	ffff0208 	.word	0xffff0208

08007c1c <quorem>:
 8007c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c20:	6903      	ldr	r3, [r0, #16]
 8007c22:	690c      	ldr	r4, [r1, #16]
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	4607      	mov	r7, r0
 8007c28:	f2c0 8081 	blt.w	8007d2e <quorem+0x112>
 8007c2c:	3c01      	subs	r4, #1
 8007c2e:	f101 0814 	add.w	r8, r1, #20
 8007c32:	f100 0514 	add.w	r5, r0, #20
 8007c36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c3a:	9301      	str	r3, [sp, #4]
 8007c3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c44:	3301      	adds	r3, #1
 8007c46:	429a      	cmp	r2, r3
 8007c48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c50:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c54:	d331      	bcc.n	8007cba <quorem+0x9e>
 8007c56:	f04f 0e00 	mov.w	lr, #0
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	46ac      	mov	ip, r5
 8007c5e:	46f2      	mov	sl, lr
 8007c60:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c64:	b293      	uxth	r3, r2
 8007c66:	fb06 e303 	mla	r3, r6, r3, lr
 8007c6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	ebaa 0303 	sub.w	r3, sl, r3
 8007c74:	0c12      	lsrs	r2, r2, #16
 8007c76:	f8dc a000 	ldr.w	sl, [ip]
 8007c7a:	fb06 e202 	mla	r2, r6, r2, lr
 8007c7e:	fa13 f38a 	uxtah	r3, r3, sl
 8007c82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c86:	fa1f fa82 	uxth.w	sl, r2
 8007c8a:	f8dc 2000 	ldr.w	r2, [ip]
 8007c8e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007c92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c9c:	4581      	cmp	r9, r0
 8007c9e:	f84c 3b04 	str.w	r3, [ip], #4
 8007ca2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ca6:	d2db      	bcs.n	8007c60 <quorem+0x44>
 8007ca8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cac:	b92b      	cbnz	r3, 8007cba <quorem+0x9e>
 8007cae:	9b01      	ldr	r3, [sp, #4]
 8007cb0:	3b04      	subs	r3, #4
 8007cb2:	429d      	cmp	r5, r3
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	d32e      	bcc.n	8007d16 <quorem+0xfa>
 8007cb8:	613c      	str	r4, [r7, #16]
 8007cba:	4638      	mov	r0, r7
 8007cbc:	f001 f8cc 	bl	8008e58 <__mcmp>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	db24      	blt.n	8007d0e <quorem+0xf2>
 8007cc4:	3601      	adds	r6, #1
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f04f 0c00 	mov.w	ip, #0
 8007ccc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cd0:	f8d0 e000 	ldr.w	lr, [r0]
 8007cd4:	b293      	uxth	r3, r2
 8007cd6:	ebac 0303 	sub.w	r3, ip, r3
 8007cda:	0c12      	lsrs	r2, r2, #16
 8007cdc:	fa13 f38e 	uxtah	r3, r3, lr
 8007ce0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ce4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cee:	45c1      	cmp	r9, r8
 8007cf0:	f840 3b04 	str.w	r3, [r0], #4
 8007cf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cf8:	d2e8      	bcs.n	8007ccc <quorem+0xb0>
 8007cfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d02:	b922      	cbnz	r2, 8007d0e <quorem+0xf2>
 8007d04:	3b04      	subs	r3, #4
 8007d06:	429d      	cmp	r5, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	d30a      	bcc.n	8007d22 <quorem+0x106>
 8007d0c:	613c      	str	r4, [r7, #16]
 8007d0e:	4630      	mov	r0, r6
 8007d10:	b003      	add	sp, #12
 8007d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d16:	6812      	ldr	r2, [r2, #0]
 8007d18:	3b04      	subs	r3, #4
 8007d1a:	2a00      	cmp	r2, #0
 8007d1c:	d1cc      	bne.n	8007cb8 <quorem+0x9c>
 8007d1e:	3c01      	subs	r4, #1
 8007d20:	e7c7      	b.n	8007cb2 <quorem+0x96>
 8007d22:	6812      	ldr	r2, [r2, #0]
 8007d24:	3b04      	subs	r3, #4
 8007d26:	2a00      	cmp	r2, #0
 8007d28:	d1f0      	bne.n	8007d0c <quorem+0xf0>
 8007d2a:	3c01      	subs	r4, #1
 8007d2c:	e7eb      	b.n	8007d06 <quorem+0xea>
 8007d2e:	2000      	movs	r0, #0
 8007d30:	e7ee      	b.n	8007d10 <quorem+0xf4>
 8007d32:	0000      	movs	r0, r0
 8007d34:	0000      	movs	r0, r0
	...

08007d38 <_dtoa_r>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	ed2d 8b02 	vpush	{d8}
 8007d40:	ec57 6b10 	vmov	r6, r7, d0
 8007d44:	b095      	sub	sp, #84	; 0x54
 8007d46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d4c:	9105      	str	r1, [sp, #20]
 8007d4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007d52:	4604      	mov	r4, r0
 8007d54:	9209      	str	r2, [sp, #36]	; 0x24
 8007d56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d58:	b975      	cbnz	r5, 8007d78 <_dtoa_r+0x40>
 8007d5a:	2010      	movs	r0, #16
 8007d5c:	f000 fddc 	bl	8008918 <malloc>
 8007d60:	4602      	mov	r2, r0
 8007d62:	6260      	str	r0, [r4, #36]	; 0x24
 8007d64:	b920      	cbnz	r0, 8007d70 <_dtoa_r+0x38>
 8007d66:	4bb2      	ldr	r3, [pc, #712]	; (8008030 <_dtoa_r+0x2f8>)
 8007d68:	21ea      	movs	r1, #234	; 0xea
 8007d6a:	48b2      	ldr	r0, [pc, #712]	; (8008034 <_dtoa_r+0x2fc>)
 8007d6c:	f001 fb20 	bl	80093b0 <__assert_func>
 8007d70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d74:	6005      	str	r5, [r0, #0]
 8007d76:	60c5      	str	r5, [r0, #12]
 8007d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d7a:	6819      	ldr	r1, [r3, #0]
 8007d7c:	b151      	cbz	r1, 8007d94 <_dtoa_r+0x5c>
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	604a      	str	r2, [r1, #4]
 8007d82:	2301      	movs	r3, #1
 8007d84:	4093      	lsls	r3, r2
 8007d86:	608b      	str	r3, [r1, #8]
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 fe27 	bl	80089dc <_Bfree>
 8007d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	1e3b      	subs	r3, r7, #0
 8007d96:	bfb9      	ittee	lt
 8007d98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d9c:	9303      	strlt	r3, [sp, #12]
 8007d9e:	2300      	movge	r3, #0
 8007da0:	f8c8 3000 	strge.w	r3, [r8]
 8007da4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007da8:	4ba3      	ldr	r3, [pc, #652]	; (8008038 <_dtoa_r+0x300>)
 8007daa:	bfbc      	itt	lt
 8007dac:	2201      	movlt	r2, #1
 8007dae:	f8c8 2000 	strlt.w	r2, [r8]
 8007db2:	ea33 0309 	bics.w	r3, r3, r9
 8007db6:	d11b      	bne.n	8007df0 <_dtoa_r+0xb8>
 8007db8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dba:	f242 730f 	movw	r3, #9999	; 0x270f
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dc4:	4333      	orrs	r3, r6
 8007dc6:	f000 857a 	beq.w	80088be <_dtoa_r+0xb86>
 8007dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dcc:	b963      	cbnz	r3, 8007de8 <_dtoa_r+0xb0>
 8007dce:	4b9b      	ldr	r3, [pc, #620]	; (800803c <_dtoa_r+0x304>)
 8007dd0:	e024      	b.n	8007e1c <_dtoa_r+0xe4>
 8007dd2:	4b9b      	ldr	r3, [pc, #620]	; (8008040 <_dtoa_r+0x308>)
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	9800      	ldr	r0, [sp, #0]
 8007dde:	b015      	add	sp, #84	; 0x54
 8007de0:	ecbd 8b02 	vpop	{d8}
 8007de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de8:	4b94      	ldr	r3, [pc, #592]	; (800803c <_dtoa_r+0x304>)
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	3303      	adds	r3, #3
 8007dee:	e7f3      	b.n	8007dd8 <_dtoa_r+0xa0>
 8007df0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007df4:	2200      	movs	r2, #0
 8007df6:	ec51 0b17 	vmov	r0, r1, d7
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007e00:	f7f8 fe82 	bl	8000b08 <__aeabi_dcmpeq>
 8007e04:	4680      	mov	r8, r0
 8007e06:	b158      	cbz	r0, 8007e20 <_dtoa_r+0xe8>
 8007e08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 8551 	beq.w	80088b8 <_dtoa_r+0xb80>
 8007e16:	488b      	ldr	r0, [pc, #556]	; (8008044 <_dtoa_r+0x30c>)
 8007e18:	6018      	str	r0, [r3, #0]
 8007e1a:	1e43      	subs	r3, r0, #1
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	e7dd      	b.n	8007ddc <_dtoa_r+0xa4>
 8007e20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007e24:	aa12      	add	r2, sp, #72	; 0x48
 8007e26:	a913      	add	r1, sp, #76	; 0x4c
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f001 f8b9 	bl	8008fa0 <__d2b>
 8007e2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e32:	4683      	mov	fp, r0
 8007e34:	2d00      	cmp	r5, #0
 8007e36:	d07c      	beq.n	8007f32 <_dtoa_r+0x1fa>
 8007e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007e46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e52:	4b7d      	ldr	r3, [pc, #500]	; (8008048 <_dtoa_r+0x310>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	4630      	mov	r0, r6
 8007e58:	4639      	mov	r1, r7
 8007e5a:	f7f8 fa35 	bl	80002c8 <__aeabi_dsub>
 8007e5e:	a36e      	add	r3, pc, #440	; (adr r3, 8008018 <_dtoa_r+0x2e0>)
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	f7f8 fbe8 	bl	8000638 <__aeabi_dmul>
 8007e68:	a36d      	add	r3, pc, #436	; (adr r3, 8008020 <_dtoa_r+0x2e8>)
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	f7f8 fa2d 	bl	80002cc <__adddf3>
 8007e72:	4606      	mov	r6, r0
 8007e74:	4628      	mov	r0, r5
 8007e76:	460f      	mov	r7, r1
 8007e78:	f7f8 fb74 	bl	8000564 <__aeabi_i2d>
 8007e7c:	a36a      	add	r3, pc, #424	; (adr r3, 8008028 <_dtoa_r+0x2f0>)
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	f7f8 fbd9 	bl	8000638 <__aeabi_dmul>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	f7f8 fa1d 	bl	80002cc <__adddf3>
 8007e92:	4606      	mov	r6, r0
 8007e94:	460f      	mov	r7, r1
 8007e96:	f7f8 fe7f 	bl	8000b98 <__aeabi_d2iz>
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	4682      	mov	sl, r0
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	f7f8 fe3a 	bl	8000b1c <__aeabi_dcmplt>
 8007ea8:	b148      	cbz	r0, 8007ebe <_dtoa_r+0x186>
 8007eaa:	4650      	mov	r0, sl
 8007eac:	f7f8 fb5a 	bl	8000564 <__aeabi_i2d>
 8007eb0:	4632      	mov	r2, r6
 8007eb2:	463b      	mov	r3, r7
 8007eb4:	f7f8 fe28 	bl	8000b08 <__aeabi_dcmpeq>
 8007eb8:	b908      	cbnz	r0, 8007ebe <_dtoa_r+0x186>
 8007eba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007ebe:	f1ba 0f16 	cmp.w	sl, #22
 8007ec2:	d854      	bhi.n	8007f6e <_dtoa_r+0x236>
 8007ec4:	4b61      	ldr	r3, [pc, #388]	; (800804c <_dtoa_r+0x314>)
 8007ec6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ed2:	f7f8 fe23 	bl	8000b1c <__aeabi_dcmplt>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d04b      	beq.n	8007f72 <_dtoa_r+0x23a>
 8007eda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007ede:	2300      	movs	r3, #0
 8007ee0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ee4:	1b5d      	subs	r5, r3, r5
 8007ee6:	1e6b      	subs	r3, r5, #1
 8007ee8:	9304      	str	r3, [sp, #16]
 8007eea:	bf43      	ittte	mi
 8007eec:	2300      	movmi	r3, #0
 8007eee:	f1c5 0801 	rsbmi	r8, r5, #1
 8007ef2:	9304      	strmi	r3, [sp, #16]
 8007ef4:	f04f 0800 	movpl.w	r8, #0
 8007ef8:	f1ba 0f00 	cmp.w	sl, #0
 8007efc:	db3b      	blt.n	8007f76 <_dtoa_r+0x23e>
 8007efe:	9b04      	ldr	r3, [sp, #16]
 8007f00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007f04:	4453      	add	r3, sl
 8007f06:	9304      	str	r3, [sp, #16]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9306      	str	r3, [sp, #24]
 8007f0c:	9b05      	ldr	r3, [sp, #20]
 8007f0e:	2b09      	cmp	r3, #9
 8007f10:	d869      	bhi.n	8007fe6 <_dtoa_r+0x2ae>
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	bfc4      	itt	gt
 8007f16:	3b04      	subgt	r3, #4
 8007f18:	9305      	strgt	r3, [sp, #20]
 8007f1a:	9b05      	ldr	r3, [sp, #20]
 8007f1c:	f1a3 0302 	sub.w	r3, r3, #2
 8007f20:	bfcc      	ite	gt
 8007f22:	2500      	movgt	r5, #0
 8007f24:	2501      	movle	r5, #1
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d869      	bhi.n	8007ffe <_dtoa_r+0x2c6>
 8007f2a:	e8df f003 	tbb	[pc, r3]
 8007f2e:	4e2c      	.short	0x4e2c
 8007f30:	5a4c      	.short	0x5a4c
 8007f32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007f36:	441d      	add	r5, r3
 8007f38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	bfc1      	itttt	gt
 8007f40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f48:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f50:	bfda      	itte	le
 8007f52:	f1c3 0320 	rsble	r3, r3, #32
 8007f56:	fa06 f003 	lslle.w	r0, r6, r3
 8007f5a:	4318      	orrgt	r0, r3
 8007f5c:	f7f8 faf2 	bl	8000544 <__aeabi_ui2d>
 8007f60:	2301      	movs	r3, #1
 8007f62:	4606      	mov	r6, r0
 8007f64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f68:	3d01      	subs	r5, #1
 8007f6a:	9310      	str	r3, [sp, #64]	; 0x40
 8007f6c:	e771      	b.n	8007e52 <_dtoa_r+0x11a>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e7b6      	b.n	8007ee0 <_dtoa_r+0x1a8>
 8007f72:	900e      	str	r0, [sp, #56]	; 0x38
 8007f74:	e7b5      	b.n	8007ee2 <_dtoa_r+0x1aa>
 8007f76:	f1ca 0300 	rsb	r3, sl, #0
 8007f7a:	9306      	str	r3, [sp, #24]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	eba8 080a 	sub.w	r8, r8, sl
 8007f82:	930d      	str	r3, [sp, #52]	; 0x34
 8007f84:	e7c2      	b.n	8007f0c <_dtoa_r+0x1d4>
 8007f86:	2300      	movs	r3, #0
 8007f88:	9308      	str	r3, [sp, #32]
 8007f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	dc39      	bgt.n	8008004 <_dtoa_r+0x2cc>
 8007f90:	f04f 0901 	mov.w	r9, #1
 8007f94:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f98:	464b      	mov	r3, r9
 8007f9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007f9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	6042      	str	r2, [r0, #4]
 8007fa4:	2204      	movs	r2, #4
 8007fa6:	f102 0614 	add.w	r6, r2, #20
 8007faa:	429e      	cmp	r6, r3
 8007fac:	6841      	ldr	r1, [r0, #4]
 8007fae:	d92f      	bls.n	8008010 <_dtoa_r+0x2d8>
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 fcd3 	bl	800895c <_Balloc>
 8007fb6:	9000      	str	r0, [sp, #0]
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d14b      	bne.n	8008054 <_dtoa_r+0x31c>
 8007fbc:	4b24      	ldr	r3, [pc, #144]	; (8008050 <_dtoa_r+0x318>)
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007fc4:	e6d1      	b.n	8007d6a <_dtoa_r+0x32>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e7de      	b.n	8007f88 <_dtoa_r+0x250>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9308      	str	r3, [sp, #32]
 8007fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd0:	eb0a 0903 	add.w	r9, sl, r3
 8007fd4:	f109 0301 	add.w	r3, r9, #1
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	9301      	str	r3, [sp, #4]
 8007fdc:	bfb8      	it	lt
 8007fde:	2301      	movlt	r3, #1
 8007fe0:	e7dd      	b.n	8007f9e <_dtoa_r+0x266>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e7f2      	b.n	8007fcc <_dtoa_r+0x294>
 8007fe6:	2501      	movs	r5, #1
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9305      	str	r3, [sp, #20]
 8007fec:	9508      	str	r5, [sp, #32]
 8007fee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ff8:	2312      	movs	r3, #18
 8007ffa:	9209      	str	r2, [sp, #36]	; 0x24
 8007ffc:	e7cf      	b.n	8007f9e <_dtoa_r+0x266>
 8007ffe:	2301      	movs	r3, #1
 8008000:	9308      	str	r3, [sp, #32]
 8008002:	e7f4      	b.n	8007fee <_dtoa_r+0x2b6>
 8008004:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008008:	f8cd 9004 	str.w	r9, [sp, #4]
 800800c:	464b      	mov	r3, r9
 800800e:	e7c6      	b.n	8007f9e <_dtoa_r+0x266>
 8008010:	3101      	adds	r1, #1
 8008012:	6041      	str	r1, [r0, #4]
 8008014:	0052      	lsls	r2, r2, #1
 8008016:	e7c6      	b.n	8007fa6 <_dtoa_r+0x26e>
 8008018:	636f4361 	.word	0x636f4361
 800801c:	3fd287a7 	.word	0x3fd287a7
 8008020:	8b60c8b3 	.word	0x8b60c8b3
 8008024:	3fc68a28 	.word	0x3fc68a28
 8008028:	509f79fb 	.word	0x509f79fb
 800802c:	3fd34413 	.word	0x3fd34413
 8008030:	08009fbd 	.word	0x08009fbd
 8008034:	08009fd4 	.word	0x08009fd4
 8008038:	7ff00000 	.word	0x7ff00000
 800803c:	08009fb9 	.word	0x08009fb9
 8008040:	08009fb0 	.word	0x08009fb0
 8008044:	08009f8d 	.word	0x08009f8d
 8008048:	3ff80000 	.word	0x3ff80000
 800804c:	0800a0d0 	.word	0x0800a0d0
 8008050:	0800a033 	.word	0x0800a033
 8008054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008056:	9a00      	ldr	r2, [sp, #0]
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	9b01      	ldr	r3, [sp, #4]
 800805c:	2b0e      	cmp	r3, #14
 800805e:	f200 80ad 	bhi.w	80081bc <_dtoa_r+0x484>
 8008062:	2d00      	cmp	r5, #0
 8008064:	f000 80aa 	beq.w	80081bc <_dtoa_r+0x484>
 8008068:	f1ba 0f00 	cmp.w	sl, #0
 800806c:	dd36      	ble.n	80080dc <_dtoa_r+0x3a4>
 800806e:	4ac3      	ldr	r2, [pc, #780]	; (800837c <_dtoa_r+0x644>)
 8008070:	f00a 030f 	and.w	r3, sl, #15
 8008074:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008078:	ed93 7b00 	vldr	d7, [r3]
 800807c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008080:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008084:	eeb0 8a47 	vmov.f32	s16, s14
 8008088:	eef0 8a67 	vmov.f32	s17, s15
 800808c:	d016      	beq.n	80080bc <_dtoa_r+0x384>
 800808e:	4bbc      	ldr	r3, [pc, #752]	; (8008380 <_dtoa_r+0x648>)
 8008090:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008098:	f7f8 fbf8 	bl	800088c <__aeabi_ddiv>
 800809c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080a0:	f007 070f 	and.w	r7, r7, #15
 80080a4:	2503      	movs	r5, #3
 80080a6:	4eb6      	ldr	r6, [pc, #728]	; (8008380 <_dtoa_r+0x648>)
 80080a8:	b957      	cbnz	r7, 80080c0 <_dtoa_r+0x388>
 80080aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ae:	ec53 2b18 	vmov	r2, r3, d8
 80080b2:	f7f8 fbeb 	bl	800088c <__aeabi_ddiv>
 80080b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ba:	e029      	b.n	8008110 <_dtoa_r+0x3d8>
 80080bc:	2502      	movs	r5, #2
 80080be:	e7f2      	b.n	80080a6 <_dtoa_r+0x36e>
 80080c0:	07f9      	lsls	r1, r7, #31
 80080c2:	d508      	bpl.n	80080d6 <_dtoa_r+0x39e>
 80080c4:	ec51 0b18 	vmov	r0, r1, d8
 80080c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080cc:	f7f8 fab4 	bl	8000638 <__aeabi_dmul>
 80080d0:	ec41 0b18 	vmov	d8, r0, r1
 80080d4:	3501      	adds	r5, #1
 80080d6:	107f      	asrs	r7, r7, #1
 80080d8:	3608      	adds	r6, #8
 80080da:	e7e5      	b.n	80080a8 <_dtoa_r+0x370>
 80080dc:	f000 80a6 	beq.w	800822c <_dtoa_r+0x4f4>
 80080e0:	f1ca 0600 	rsb	r6, sl, #0
 80080e4:	4ba5      	ldr	r3, [pc, #660]	; (800837c <_dtoa_r+0x644>)
 80080e6:	4fa6      	ldr	r7, [pc, #664]	; (8008380 <_dtoa_r+0x648>)
 80080e8:	f006 020f 	and.w	r2, r6, #15
 80080ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080f8:	f7f8 fa9e 	bl	8000638 <__aeabi_dmul>
 80080fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008100:	1136      	asrs	r6, r6, #4
 8008102:	2300      	movs	r3, #0
 8008104:	2502      	movs	r5, #2
 8008106:	2e00      	cmp	r6, #0
 8008108:	f040 8085 	bne.w	8008216 <_dtoa_r+0x4de>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1d2      	bne.n	80080b6 <_dtoa_r+0x37e>
 8008110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 808c 	beq.w	8008230 <_dtoa_r+0x4f8>
 8008118:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800811c:	4b99      	ldr	r3, [pc, #612]	; (8008384 <_dtoa_r+0x64c>)
 800811e:	2200      	movs	r2, #0
 8008120:	4630      	mov	r0, r6
 8008122:	4639      	mov	r1, r7
 8008124:	f7f8 fcfa 	bl	8000b1c <__aeabi_dcmplt>
 8008128:	2800      	cmp	r0, #0
 800812a:	f000 8081 	beq.w	8008230 <_dtoa_r+0x4f8>
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d07d      	beq.n	8008230 <_dtoa_r+0x4f8>
 8008134:	f1b9 0f00 	cmp.w	r9, #0
 8008138:	dd3c      	ble.n	80081b4 <_dtoa_r+0x47c>
 800813a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800813e:	9307      	str	r3, [sp, #28]
 8008140:	2200      	movs	r2, #0
 8008142:	4b91      	ldr	r3, [pc, #580]	; (8008388 <_dtoa_r+0x650>)
 8008144:	4630      	mov	r0, r6
 8008146:	4639      	mov	r1, r7
 8008148:	f7f8 fa76 	bl	8000638 <__aeabi_dmul>
 800814c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008150:	3501      	adds	r5, #1
 8008152:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008156:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800815a:	4628      	mov	r0, r5
 800815c:	f7f8 fa02 	bl	8000564 <__aeabi_i2d>
 8008160:	4632      	mov	r2, r6
 8008162:	463b      	mov	r3, r7
 8008164:	f7f8 fa68 	bl	8000638 <__aeabi_dmul>
 8008168:	4b88      	ldr	r3, [pc, #544]	; (800838c <_dtoa_r+0x654>)
 800816a:	2200      	movs	r2, #0
 800816c:	f7f8 f8ae 	bl	80002cc <__adddf3>
 8008170:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800817c:	2b00      	cmp	r3, #0
 800817e:	d15c      	bne.n	800823a <_dtoa_r+0x502>
 8008180:	4b83      	ldr	r3, [pc, #524]	; (8008390 <_dtoa_r+0x658>)
 8008182:	2200      	movs	r2, #0
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 f89e 	bl	80002c8 <__aeabi_dsub>
 800818c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008190:	4606      	mov	r6, r0
 8008192:	460f      	mov	r7, r1
 8008194:	f7f8 fce0 	bl	8000b58 <__aeabi_dcmpgt>
 8008198:	2800      	cmp	r0, #0
 800819a:	f040 8296 	bne.w	80086ca <_dtoa_r+0x992>
 800819e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80081a2:	4630      	mov	r0, r6
 80081a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081a8:	4639      	mov	r1, r7
 80081aa:	f7f8 fcb7 	bl	8000b1c <__aeabi_dcmplt>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	f040 8288 	bne.w	80086c4 <_dtoa_r+0x98c>
 80081b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80081b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f2c0 8158 	blt.w	8008474 <_dtoa_r+0x73c>
 80081c4:	f1ba 0f0e 	cmp.w	sl, #14
 80081c8:	f300 8154 	bgt.w	8008474 <_dtoa_r+0x73c>
 80081cc:	4b6b      	ldr	r3, [pc, #428]	; (800837c <_dtoa_r+0x644>)
 80081ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f280 80e3 	bge.w	80083a4 <_dtoa_r+0x66c>
 80081de:	9b01      	ldr	r3, [sp, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f300 80df 	bgt.w	80083a4 <_dtoa_r+0x66c>
 80081e6:	f040 826d 	bne.w	80086c4 <_dtoa_r+0x98c>
 80081ea:	4b69      	ldr	r3, [pc, #420]	; (8008390 <_dtoa_r+0x658>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	4640      	mov	r0, r8
 80081f0:	4649      	mov	r1, r9
 80081f2:	f7f8 fa21 	bl	8000638 <__aeabi_dmul>
 80081f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081fa:	f7f8 fca3 	bl	8000b44 <__aeabi_dcmpge>
 80081fe:	9e01      	ldr	r6, [sp, #4]
 8008200:	4637      	mov	r7, r6
 8008202:	2800      	cmp	r0, #0
 8008204:	f040 8243 	bne.w	800868e <_dtoa_r+0x956>
 8008208:	9d00      	ldr	r5, [sp, #0]
 800820a:	2331      	movs	r3, #49	; 0x31
 800820c:	f805 3b01 	strb.w	r3, [r5], #1
 8008210:	f10a 0a01 	add.w	sl, sl, #1
 8008214:	e23f      	b.n	8008696 <_dtoa_r+0x95e>
 8008216:	07f2      	lsls	r2, r6, #31
 8008218:	d505      	bpl.n	8008226 <_dtoa_r+0x4ee>
 800821a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800821e:	f7f8 fa0b 	bl	8000638 <__aeabi_dmul>
 8008222:	3501      	adds	r5, #1
 8008224:	2301      	movs	r3, #1
 8008226:	1076      	asrs	r6, r6, #1
 8008228:	3708      	adds	r7, #8
 800822a:	e76c      	b.n	8008106 <_dtoa_r+0x3ce>
 800822c:	2502      	movs	r5, #2
 800822e:	e76f      	b.n	8008110 <_dtoa_r+0x3d8>
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	f8cd a01c 	str.w	sl, [sp, #28]
 8008236:	930c      	str	r3, [sp, #48]	; 0x30
 8008238:	e78d      	b.n	8008156 <_dtoa_r+0x41e>
 800823a:	9900      	ldr	r1, [sp, #0]
 800823c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800823e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008240:	4b4e      	ldr	r3, [pc, #312]	; (800837c <_dtoa_r+0x644>)
 8008242:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008246:	4401      	add	r1, r0
 8008248:	9102      	str	r1, [sp, #8]
 800824a:	9908      	ldr	r1, [sp, #32]
 800824c:	eeb0 8a47 	vmov.f32	s16, s14
 8008250:	eef0 8a67 	vmov.f32	s17, s15
 8008254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008258:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800825c:	2900      	cmp	r1, #0
 800825e:	d045      	beq.n	80082ec <_dtoa_r+0x5b4>
 8008260:	494c      	ldr	r1, [pc, #304]	; (8008394 <_dtoa_r+0x65c>)
 8008262:	2000      	movs	r0, #0
 8008264:	f7f8 fb12 	bl	800088c <__aeabi_ddiv>
 8008268:	ec53 2b18 	vmov	r2, r3, d8
 800826c:	f7f8 f82c 	bl	80002c8 <__aeabi_dsub>
 8008270:	9d00      	ldr	r5, [sp, #0]
 8008272:	ec41 0b18 	vmov	d8, r0, r1
 8008276:	4639      	mov	r1, r7
 8008278:	4630      	mov	r0, r6
 800827a:	f7f8 fc8d 	bl	8000b98 <__aeabi_d2iz>
 800827e:	900c      	str	r0, [sp, #48]	; 0x30
 8008280:	f7f8 f970 	bl	8000564 <__aeabi_i2d>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4630      	mov	r0, r6
 800828a:	4639      	mov	r1, r7
 800828c:	f7f8 f81c 	bl	80002c8 <__aeabi_dsub>
 8008290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008292:	3330      	adds	r3, #48	; 0x30
 8008294:	f805 3b01 	strb.w	r3, [r5], #1
 8008298:	ec53 2b18 	vmov	r2, r3, d8
 800829c:	4606      	mov	r6, r0
 800829e:	460f      	mov	r7, r1
 80082a0:	f7f8 fc3c 	bl	8000b1c <__aeabi_dcmplt>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d165      	bne.n	8008374 <_dtoa_r+0x63c>
 80082a8:	4632      	mov	r2, r6
 80082aa:	463b      	mov	r3, r7
 80082ac:	4935      	ldr	r1, [pc, #212]	; (8008384 <_dtoa_r+0x64c>)
 80082ae:	2000      	movs	r0, #0
 80082b0:	f7f8 f80a 	bl	80002c8 <__aeabi_dsub>
 80082b4:	ec53 2b18 	vmov	r2, r3, d8
 80082b8:	f7f8 fc30 	bl	8000b1c <__aeabi_dcmplt>
 80082bc:	2800      	cmp	r0, #0
 80082be:	f040 80b9 	bne.w	8008434 <_dtoa_r+0x6fc>
 80082c2:	9b02      	ldr	r3, [sp, #8]
 80082c4:	429d      	cmp	r5, r3
 80082c6:	f43f af75 	beq.w	80081b4 <_dtoa_r+0x47c>
 80082ca:	4b2f      	ldr	r3, [pc, #188]	; (8008388 <_dtoa_r+0x650>)
 80082cc:	ec51 0b18 	vmov	r0, r1, d8
 80082d0:	2200      	movs	r2, #0
 80082d2:	f7f8 f9b1 	bl	8000638 <__aeabi_dmul>
 80082d6:	4b2c      	ldr	r3, [pc, #176]	; (8008388 <_dtoa_r+0x650>)
 80082d8:	ec41 0b18 	vmov	d8, r0, r1
 80082dc:	2200      	movs	r2, #0
 80082de:	4630      	mov	r0, r6
 80082e0:	4639      	mov	r1, r7
 80082e2:	f7f8 f9a9 	bl	8000638 <__aeabi_dmul>
 80082e6:	4606      	mov	r6, r0
 80082e8:	460f      	mov	r7, r1
 80082ea:	e7c4      	b.n	8008276 <_dtoa_r+0x53e>
 80082ec:	ec51 0b17 	vmov	r0, r1, d7
 80082f0:	f7f8 f9a2 	bl	8000638 <__aeabi_dmul>
 80082f4:	9b02      	ldr	r3, [sp, #8]
 80082f6:	9d00      	ldr	r5, [sp, #0]
 80082f8:	930c      	str	r3, [sp, #48]	; 0x30
 80082fa:	ec41 0b18 	vmov	d8, r0, r1
 80082fe:	4639      	mov	r1, r7
 8008300:	4630      	mov	r0, r6
 8008302:	f7f8 fc49 	bl	8000b98 <__aeabi_d2iz>
 8008306:	9011      	str	r0, [sp, #68]	; 0x44
 8008308:	f7f8 f92c 	bl	8000564 <__aeabi_i2d>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4630      	mov	r0, r6
 8008312:	4639      	mov	r1, r7
 8008314:	f7f7 ffd8 	bl	80002c8 <__aeabi_dsub>
 8008318:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800831a:	3330      	adds	r3, #48	; 0x30
 800831c:	f805 3b01 	strb.w	r3, [r5], #1
 8008320:	9b02      	ldr	r3, [sp, #8]
 8008322:	429d      	cmp	r5, r3
 8008324:	4606      	mov	r6, r0
 8008326:	460f      	mov	r7, r1
 8008328:	f04f 0200 	mov.w	r2, #0
 800832c:	d134      	bne.n	8008398 <_dtoa_r+0x660>
 800832e:	4b19      	ldr	r3, [pc, #100]	; (8008394 <_dtoa_r+0x65c>)
 8008330:	ec51 0b18 	vmov	r0, r1, d8
 8008334:	f7f7 ffca 	bl	80002cc <__adddf3>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4630      	mov	r0, r6
 800833e:	4639      	mov	r1, r7
 8008340:	f7f8 fc0a 	bl	8000b58 <__aeabi_dcmpgt>
 8008344:	2800      	cmp	r0, #0
 8008346:	d175      	bne.n	8008434 <_dtoa_r+0x6fc>
 8008348:	ec53 2b18 	vmov	r2, r3, d8
 800834c:	4911      	ldr	r1, [pc, #68]	; (8008394 <_dtoa_r+0x65c>)
 800834e:	2000      	movs	r0, #0
 8008350:	f7f7 ffba 	bl	80002c8 <__aeabi_dsub>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 fbde 	bl	8000b1c <__aeabi_dcmplt>
 8008360:	2800      	cmp	r0, #0
 8008362:	f43f af27 	beq.w	80081b4 <_dtoa_r+0x47c>
 8008366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008368:	1e6b      	subs	r3, r5, #1
 800836a:	930c      	str	r3, [sp, #48]	; 0x30
 800836c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008370:	2b30      	cmp	r3, #48	; 0x30
 8008372:	d0f8      	beq.n	8008366 <_dtoa_r+0x62e>
 8008374:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008378:	e04a      	b.n	8008410 <_dtoa_r+0x6d8>
 800837a:	bf00      	nop
 800837c:	0800a0d0 	.word	0x0800a0d0
 8008380:	0800a0a8 	.word	0x0800a0a8
 8008384:	3ff00000 	.word	0x3ff00000
 8008388:	40240000 	.word	0x40240000
 800838c:	401c0000 	.word	0x401c0000
 8008390:	40140000 	.word	0x40140000
 8008394:	3fe00000 	.word	0x3fe00000
 8008398:	4baf      	ldr	r3, [pc, #700]	; (8008658 <_dtoa_r+0x920>)
 800839a:	f7f8 f94d 	bl	8000638 <__aeabi_dmul>
 800839e:	4606      	mov	r6, r0
 80083a0:	460f      	mov	r7, r1
 80083a2:	e7ac      	b.n	80082fe <_dtoa_r+0x5c6>
 80083a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083a8:	9d00      	ldr	r5, [sp, #0]
 80083aa:	4642      	mov	r2, r8
 80083ac:	464b      	mov	r3, r9
 80083ae:	4630      	mov	r0, r6
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7f8 fa6b 	bl	800088c <__aeabi_ddiv>
 80083b6:	f7f8 fbef 	bl	8000b98 <__aeabi_d2iz>
 80083ba:	9002      	str	r0, [sp, #8]
 80083bc:	f7f8 f8d2 	bl	8000564 <__aeabi_i2d>
 80083c0:	4642      	mov	r2, r8
 80083c2:	464b      	mov	r3, r9
 80083c4:	f7f8 f938 	bl	8000638 <__aeabi_dmul>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4630      	mov	r0, r6
 80083ce:	4639      	mov	r1, r7
 80083d0:	f7f7 ff7a 	bl	80002c8 <__aeabi_dsub>
 80083d4:	9e02      	ldr	r6, [sp, #8]
 80083d6:	9f01      	ldr	r7, [sp, #4]
 80083d8:	3630      	adds	r6, #48	; 0x30
 80083da:	f805 6b01 	strb.w	r6, [r5], #1
 80083de:	9e00      	ldr	r6, [sp, #0]
 80083e0:	1bae      	subs	r6, r5, r6
 80083e2:	42b7      	cmp	r7, r6
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	d137      	bne.n	800845a <_dtoa_r+0x722>
 80083ea:	f7f7 ff6f 	bl	80002cc <__adddf3>
 80083ee:	4642      	mov	r2, r8
 80083f0:	464b      	mov	r3, r9
 80083f2:	4606      	mov	r6, r0
 80083f4:	460f      	mov	r7, r1
 80083f6:	f7f8 fbaf 	bl	8000b58 <__aeabi_dcmpgt>
 80083fa:	b9c8      	cbnz	r0, 8008430 <_dtoa_r+0x6f8>
 80083fc:	4642      	mov	r2, r8
 80083fe:	464b      	mov	r3, r9
 8008400:	4630      	mov	r0, r6
 8008402:	4639      	mov	r1, r7
 8008404:	f7f8 fb80 	bl	8000b08 <__aeabi_dcmpeq>
 8008408:	b110      	cbz	r0, 8008410 <_dtoa_r+0x6d8>
 800840a:	9b02      	ldr	r3, [sp, #8]
 800840c:	07d9      	lsls	r1, r3, #31
 800840e:	d40f      	bmi.n	8008430 <_dtoa_r+0x6f8>
 8008410:	4620      	mov	r0, r4
 8008412:	4659      	mov	r1, fp
 8008414:	f000 fae2 	bl	80089dc <_Bfree>
 8008418:	2300      	movs	r3, #0
 800841a:	702b      	strb	r3, [r5, #0]
 800841c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800841e:	f10a 0001 	add.w	r0, sl, #1
 8008422:	6018      	str	r0, [r3, #0]
 8008424:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008426:	2b00      	cmp	r3, #0
 8008428:	f43f acd8 	beq.w	8007ddc <_dtoa_r+0xa4>
 800842c:	601d      	str	r5, [r3, #0]
 800842e:	e4d5      	b.n	8007ddc <_dtoa_r+0xa4>
 8008430:	f8cd a01c 	str.w	sl, [sp, #28]
 8008434:	462b      	mov	r3, r5
 8008436:	461d      	mov	r5, r3
 8008438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800843c:	2a39      	cmp	r2, #57	; 0x39
 800843e:	d108      	bne.n	8008452 <_dtoa_r+0x71a>
 8008440:	9a00      	ldr	r2, [sp, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d1f7      	bne.n	8008436 <_dtoa_r+0x6fe>
 8008446:	9a07      	ldr	r2, [sp, #28]
 8008448:	9900      	ldr	r1, [sp, #0]
 800844a:	3201      	adds	r2, #1
 800844c:	9207      	str	r2, [sp, #28]
 800844e:	2230      	movs	r2, #48	; 0x30
 8008450:	700a      	strb	r2, [r1, #0]
 8008452:	781a      	ldrb	r2, [r3, #0]
 8008454:	3201      	adds	r2, #1
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	e78c      	b.n	8008374 <_dtoa_r+0x63c>
 800845a:	4b7f      	ldr	r3, [pc, #508]	; (8008658 <_dtoa_r+0x920>)
 800845c:	2200      	movs	r2, #0
 800845e:	f7f8 f8eb 	bl	8000638 <__aeabi_dmul>
 8008462:	2200      	movs	r2, #0
 8008464:	2300      	movs	r3, #0
 8008466:	4606      	mov	r6, r0
 8008468:	460f      	mov	r7, r1
 800846a:	f7f8 fb4d 	bl	8000b08 <__aeabi_dcmpeq>
 800846e:	2800      	cmp	r0, #0
 8008470:	d09b      	beq.n	80083aa <_dtoa_r+0x672>
 8008472:	e7cd      	b.n	8008410 <_dtoa_r+0x6d8>
 8008474:	9a08      	ldr	r2, [sp, #32]
 8008476:	2a00      	cmp	r2, #0
 8008478:	f000 80c4 	beq.w	8008604 <_dtoa_r+0x8cc>
 800847c:	9a05      	ldr	r2, [sp, #20]
 800847e:	2a01      	cmp	r2, #1
 8008480:	f300 80a8 	bgt.w	80085d4 <_dtoa_r+0x89c>
 8008484:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008486:	2a00      	cmp	r2, #0
 8008488:	f000 80a0 	beq.w	80085cc <_dtoa_r+0x894>
 800848c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008490:	9e06      	ldr	r6, [sp, #24]
 8008492:	4645      	mov	r5, r8
 8008494:	9a04      	ldr	r2, [sp, #16]
 8008496:	2101      	movs	r1, #1
 8008498:	441a      	add	r2, r3
 800849a:	4620      	mov	r0, r4
 800849c:	4498      	add	r8, r3
 800849e:	9204      	str	r2, [sp, #16]
 80084a0:	f000 fb58 	bl	8008b54 <__i2b>
 80084a4:	4607      	mov	r7, r0
 80084a6:	2d00      	cmp	r5, #0
 80084a8:	dd0b      	ble.n	80084c2 <_dtoa_r+0x78a>
 80084aa:	9b04      	ldr	r3, [sp, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	dd08      	ble.n	80084c2 <_dtoa_r+0x78a>
 80084b0:	42ab      	cmp	r3, r5
 80084b2:	9a04      	ldr	r2, [sp, #16]
 80084b4:	bfa8      	it	ge
 80084b6:	462b      	movge	r3, r5
 80084b8:	eba8 0803 	sub.w	r8, r8, r3
 80084bc:	1aed      	subs	r5, r5, r3
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	9304      	str	r3, [sp, #16]
 80084c2:	9b06      	ldr	r3, [sp, #24]
 80084c4:	b1fb      	cbz	r3, 8008506 <_dtoa_r+0x7ce>
 80084c6:	9b08      	ldr	r3, [sp, #32]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 809f 	beq.w	800860c <_dtoa_r+0x8d4>
 80084ce:	2e00      	cmp	r6, #0
 80084d0:	dd11      	ble.n	80084f6 <_dtoa_r+0x7be>
 80084d2:	4639      	mov	r1, r7
 80084d4:	4632      	mov	r2, r6
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 fbf8 	bl	8008ccc <__pow5mult>
 80084dc:	465a      	mov	r2, fp
 80084de:	4601      	mov	r1, r0
 80084e0:	4607      	mov	r7, r0
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 fb4c 	bl	8008b80 <__multiply>
 80084e8:	4659      	mov	r1, fp
 80084ea:	9007      	str	r0, [sp, #28]
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 fa75 	bl	80089dc <_Bfree>
 80084f2:	9b07      	ldr	r3, [sp, #28]
 80084f4:	469b      	mov	fp, r3
 80084f6:	9b06      	ldr	r3, [sp, #24]
 80084f8:	1b9a      	subs	r2, r3, r6
 80084fa:	d004      	beq.n	8008506 <_dtoa_r+0x7ce>
 80084fc:	4659      	mov	r1, fp
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 fbe4 	bl	8008ccc <__pow5mult>
 8008504:	4683      	mov	fp, r0
 8008506:	2101      	movs	r1, #1
 8008508:	4620      	mov	r0, r4
 800850a:	f000 fb23 	bl	8008b54 <__i2b>
 800850e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008510:	2b00      	cmp	r3, #0
 8008512:	4606      	mov	r6, r0
 8008514:	dd7c      	ble.n	8008610 <_dtoa_r+0x8d8>
 8008516:	461a      	mov	r2, r3
 8008518:	4601      	mov	r1, r0
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fbd6 	bl	8008ccc <__pow5mult>
 8008520:	9b05      	ldr	r3, [sp, #20]
 8008522:	2b01      	cmp	r3, #1
 8008524:	4606      	mov	r6, r0
 8008526:	dd76      	ble.n	8008616 <_dtoa_r+0x8de>
 8008528:	2300      	movs	r3, #0
 800852a:	9306      	str	r3, [sp, #24]
 800852c:	6933      	ldr	r3, [r6, #16]
 800852e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008532:	6918      	ldr	r0, [r3, #16]
 8008534:	f000 fabe 	bl	8008ab4 <__hi0bits>
 8008538:	f1c0 0020 	rsb	r0, r0, #32
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	4418      	add	r0, r3
 8008540:	f010 001f 	ands.w	r0, r0, #31
 8008544:	f000 8086 	beq.w	8008654 <_dtoa_r+0x91c>
 8008548:	f1c0 0320 	rsb	r3, r0, #32
 800854c:	2b04      	cmp	r3, #4
 800854e:	dd7f      	ble.n	8008650 <_dtoa_r+0x918>
 8008550:	f1c0 001c 	rsb	r0, r0, #28
 8008554:	9b04      	ldr	r3, [sp, #16]
 8008556:	4403      	add	r3, r0
 8008558:	4480      	add	r8, r0
 800855a:	4405      	add	r5, r0
 800855c:	9304      	str	r3, [sp, #16]
 800855e:	f1b8 0f00 	cmp.w	r8, #0
 8008562:	dd05      	ble.n	8008570 <_dtoa_r+0x838>
 8008564:	4659      	mov	r1, fp
 8008566:	4642      	mov	r2, r8
 8008568:	4620      	mov	r0, r4
 800856a:	f000 fc09 	bl	8008d80 <__lshift>
 800856e:	4683      	mov	fp, r0
 8008570:	9b04      	ldr	r3, [sp, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	dd05      	ble.n	8008582 <_dtoa_r+0x84a>
 8008576:	4631      	mov	r1, r6
 8008578:	461a      	mov	r2, r3
 800857a:	4620      	mov	r0, r4
 800857c:	f000 fc00 	bl	8008d80 <__lshift>
 8008580:	4606      	mov	r6, r0
 8008582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d069      	beq.n	800865c <_dtoa_r+0x924>
 8008588:	4631      	mov	r1, r6
 800858a:	4658      	mov	r0, fp
 800858c:	f000 fc64 	bl	8008e58 <__mcmp>
 8008590:	2800      	cmp	r0, #0
 8008592:	da63      	bge.n	800865c <_dtoa_r+0x924>
 8008594:	2300      	movs	r3, #0
 8008596:	4659      	mov	r1, fp
 8008598:	220a      	movs	r2, #10
 800859a:	4620      	mov	r0, r4
 800859c:	f000 fa40 	bl	8008a20 <__multadd>
 80085a0:	9b08      	ldr	r3, [sp, #32]
 80085a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80085a6:	4683      	mov	fp, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 818f 	beq.w	80088cc <_dtoa_r+0xb94>
 80085ae:	4639      	mov	r1, r7
 80085b0:	2300      	movs	r3, #0
 80085b2:	220a      	movs	r2, #10
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fa33 	bl	8008a20 <__multadd>
 80085ba:	f1b9 0f00 	cmp.w	r9, #0
 80085be:	4607      	mov	r7, r0
 80085c0:	f300 808e 	bgt.w	80086e0 <_dtoa_r+0x9a8>
 80085c4:	9b05      	ldr	r3, [sp, #20]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	dc50      	bgt.n	800866c <_dtoa_r+0x934>
 80085ca:	e089      	b.n	80086e0 <_dtoa_r+0x9a8>
 80085cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085d2:	e75d      	b.n	8008490 <_dtoa_r+0x758>
 80085d4:	9b01      	ldr	r3, [sp, #4]
 80085d6:	1e5e      	subs	r6, r3, #1
 80085d8:	9b06      	ldr	r3, [sp, #24]
 80085da:	42b3      	cmp	r3, r6
 80085dc:	bfbf      	itttt	lt
 80085de:	9b06      	ldrlt	r3, [sp, #24]
 80085e0:	9606      	strlt	r6, [sp, #24]
 80085e2:	1af2      	sublt	r2, r6, r3
 80085e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80085e6:	bfb6      	itet	lt
 80085e8:	189b      	addlt	r3, r3, r2
 80085ea:	1b9e      	subge	r6, r3, r6
 80085ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80085ee:	9b01      	ldr	r3, [sp, #4]
 80085f0:	bfb8      	it	lt
 80085f2:	2600      	movlt	r6, #0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	bfb5      	itete	lt
 80085f8:	eba8 0503 	sublt.w	r5, r8, r3
 80085fc:	9b01      	ldrge	r3, [sp, #4]
 80085fe:	2300      	movlt	r3, #0
 8008600:	4645      	movge	r5, r8
 8008602:	e747      	b.n	8008494 <_dtoa_r+0x75c>
 8008604:	9e06      	ldr	r6, [sp, #24]
 8008606:	9f08      	ldr	r7, [sp, #32]
 8008608:	4645      	mov	r5, r8
 800860a:	e74c      	b.n	80084a6 <_dtoa_r+0x76e>
 800860c:	9a06      	ldr	r2, [sp, #24]
 800860e:	e775      	b.n	80084fc <_dtoa_r+0x7c4>
 8008610:	9b05      	ldr	r3, [sp, #20]
 8008612:	2b01      	cmp	r3, #1
 8008614:	dc18      	bgt.n	8008648 <_dtoa_r+0x910>
 8008616:	9b02      	ldr	r3, [sp, #8]
 8008618:	b9b3      	cbnz	r3, 8008648 <_dtoa_r+0x910>
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008620:	b9a3      	cbnz	r3, 800864c <_dtoa_r+0x914>
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008628:	0d1b      	lsrs	r3, r3, #20
 800862a:	051b      	lsls	r3, r3, #20
 800862c:	b12b      	cbz	r3, 800863a <_dtoa_r+0x902>
 800862e:	9b04      	ldr	r3, [sp, #16]
 8008630:	3301      	adds	r3, #1
 8008632:	9304      	str	r3, [sp, #16]
 8008634:	f108 0801 	add.w	r8, r8, #1
 8008638:	2301      	movs	r3, #1
 800863a:	9306      	str	r3, [sp, #24]
 800863c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800863e:	2b00      	cmp	r3, #0
 8008640:	f47f af74 	bne.w	800852c <_dtoa_r+0x7f4>
 8008644:	2001      	movs	r0, #1
 8008646:	e779      	b.n	800853c <_dtoa_r+0x804>
 8008648:	2300      	movs	r3, #0
 800864a:	e7f6      	b.n	800863a <_dtoa_r+0x902>
 800864c:	9b02      	ldr	r3, [sp, #8]
 800864e:	e7f4      	b.n	800863a <_dtoa_r+0x902>
 8008650:	d085      	beq.n	800855e <_dtoa_r+0x826>
 8008652:	4618      	mov	r0, r3
 8008654:	301c      	adds	r0, #28
 8008656:	e77d      	b.n	8008554 <_dtoa_r+0x81c>
 8008658:	40240000 	.word	0x40240000
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	dc38      	bgt.n	80086d4 <_dtoa_r+0x99c>
 8008662:	9b05      	ldr	r3, [sp, #20]
 8008664:	2b02      	cmp	r3, #2
 8008666:	dd35      	ble.n	80086d4 <_dtoa_r+0x99c>
 8008668:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800866c:	f1b9 0f00 	cmp.w	r9, #0
 8008670:	d10d      	bne.n	800868e <_dtoa_r+0x956>
 8008672:	4631      	mov	r1, r6
 8008674:	464b      	mov	r3, r9
 8008676:	2205      	movs	r2, #5
 8008678:	4620      	mov	r0, r4
 800867a:	f000 f9d1 	bl	8008a20 <__multadd>
 800867e:	4601      	mov	r1, r0
 8008680:	4606      	mov	r6, r0
 8008682:	4658      	mov	r0, fp
 8008684:	f000 fbe8 	bl	8008e58 <__mcmp>
 8008688:	2800      	cmp	r0, #0
 800868a:	f73f adbd 	bgt.w	8008208 <_dtoa_r+0x4d0>
 800868e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008690:	9d00      	ldr	r5, [sp, #0]
 8008692:	ea6f 0a03 	mvn.w	sl, r3
 8008696:	f04f 0800 	mov.w	r8, #0
 800869a:	4631      	mov	r1, r6
 800869c:	4620      	mov	r0, r4
 800869e:	f000 f99d 	bl	80089dc <_Bfree>
 80086a2:	2f00      	cmp	r7, #0
 80086a4:	f43f aeb4 	beq.w	8008410 <_dtoa_r+0x6d8>
 80086a8:	f1b8 0f00 	cmp.w	r8, #0
 80086ac:	d005      	beq.n	80086ba <_dtoa_r+0x982>
 80086ae:	45b8      	cmp	r8, r7
 80086b0:	d003      	beq.n	80086ba <_dtoa_r+0x982>
 80086b2:	4641      	mov	r1, r8
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 f991 	bl	80089dc <_Bfree>
 80086ba:	4639      	mov	r1, r7
 80086bc:	4620      	mov	r0, r4
 80086be:	f000 f98d 	bl	80089dc <_Bfree>
 80086c2:	e6a5      	b.n	8008410 <_dtoa_r+0x6d8>
 80086c4:	2600      	movs	r6, #0
 80086c6:	4637      	mov	r7, r6
 80086c8:	e7e1      	b.n	800868e <_dtoa_r+0x956>
 80086ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80086cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80086d0:	4637      	mov	r7, r6
 80086d2:	e599      	b.n	8008208 <_dtoa_r+0x4d0>
 80086d4:	9b08      	ldr	r3, [sp, #32]
 80086d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 80fd 	beq.w	80088da <_dtoa_r+0xba2>
 80086e0:	2d00      	cmp	r5, #0
 80086e2:	dd05      	ble.n	80086f0 <_dtoa_r+0x9b8>
 80086e4:	4639      	mov	r1, r7
 80086e6:	462a      	mov	r2, r5
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 fb49 	bl	8008d80 <__lshift>
 80086ee:	4607      	mov	r7, r0
 80086f0:	9b06      	ldr	r3, [sp, #24]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d05c      	beq.n	80087b0 <_dtoa_r+0xa78>
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 f92f 	bl	800895c <_Balloc>
 80086fe:	4605      	mov	r5, r0
 8008700:	b928      	cbnz	r0, 800870e <_dtoa_r+0x9d6>
 8008702:	4b80      	ldr	r3, [pc, #512]	; (8008904 <_dtoa_r+0xbcc>)
 8008704:	4602      	mov	r2, r0
 8008706:	f240 21ea 	movw	r1, #746	; 0x2ea
 800870a:	f7ff bb2e 	b.w	8007d6a <_dtoa_r+0x32>
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	3202      	adds	r2, #2
 8008712:	0092      	lsls	r2, r2, #2
 8008714:	f107 010c 	add.w	r1, r7, #12
 8008718:	300c      	adds	r0, #12
 800871a:	f000 f905 	bl	8008928 <memcpy>
 800871e:	2201      	movs	r2, #1
 8008720:	4629      	mov	r1, r5
 8008722:	4620      	mov	r0, r4
 8008724:	f000 fb2c 	bl	8008d80 <__lshift>
 8008728:	9b00      	ldr	r3, [sp, #0]
 800872a:	3301      	adds	r3, #1
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	9b00      	ldr	r3, [sp, #0]
 8008730:	444b      	add	r3, r9
 8008732:	9307      	str	r3, [sp, #28]
 8008734:	9b02      	ldr	r3, [sp, #8]
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	46b8      	mov	r8, r7
 800873c:	9306      	str	r3, [sp, #24]
 800873e:	4607      	mov	r7, r0
 8008740:	9b01      	ldr	r3, [sp, #4]
 8008742:	4631      	mov	r1, r6
 8008744:	3b01      	subs	r3, #1
 8008746:	4658      	mov	r0, fp
 8008748:	9302      	str	r3, [sp, #8]
 800874a:	f7ff fa67 	bl	8007c1c <quorem>
 800874e:	4603      	mov	r3, r0
 8008750:	3330      	adds	r3, #48	; 0x30
 8008752:	9004      	str	r0, [sp, #16]
 8008754:	4641      	mov	r1, r8
 8008756:	4658      	mov	r0, fp
 8008758:	9308      	str	r3, [sp, #32]
 800875a:	f000 fb7d 	bl	8008e58 <__mcmp>
 800875e:	463a      	mov	r2, r7
 8008760:	4681      	mov	r9, r0
 8008762:	4631      	mov	r1, r6
 8008764:	4620      	mov	r0, r4
 8008766:	f000 fb93 	bl	8008e90 <__mdiff>
 800876a:	68c2      	ldr	r2, [r0, #12]
 800876c:	9b08      	ldr	r3, [sp, #32]
 800876e:	4605      	mov	r5, r0
 8008770:	bb02      	cbnz	r2, 80087b4 <_dtoa_r+0xa7c>
 8008772:	4601      	mov	r1, r0
 8008774:	4658      	mov	r0, fp
 8008776:	f000 fb6f 	bl	8008e58 <__mcmp>
 800877a:	9b08      	ldr	r3, [sp, #32]
 800877c:	4602      	mov	r2, r0
 800877e:	4629      	mov	r1, r5
 8008780:	4620      	mov	r0, r4
 8008782:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008786:	f000 f929 	bl	80089dc <_Bfree>
 800878a:	9b05      	ldr	r3, [sp, #20]
 800878c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800878e:	9d01      	ldr	r5, [sp, #4]
 8008790:	ea43 0102 	orr.w	r1, r3, r2
 8008794:	9b06      	ldr	r3, [sp, #24]
 8008796:	430b      	orrs	r3, r1
 8008798:	9b08      	ldr	r3, [sp, #32]
 800879a:	d10d      	bne.n	80087b8 <_dtoa_r+0xa80>
 800879c:	2b39      	cmp	r3, #57	; 0x39
 800879e:	d029      	beq.n	80087f4 <_dtoa_r+0xabc>
 80087a0:	f1b9 0f00 	cmp.w	r9, #0
 80087a4:	dd01      	ble.n	80087aa <_dtoa_r+0xa72>
 80087a6:	9b04      	ldr	r3, [sp, #16]
 80087a8:	3331      	adds	r3, #49	; 0x31
 80087aa:	9a02      	ldr	r2, [sp, #8]
 80087ac:	7013      	strb	r3, [r2, #0]
 80087ae:	e774      	b.n	800869a <_dtoa_r+0x962>
 80087b0:	4638      	mov	r0, r7
 80087b2:	e7b9      	b.n	8008728 <_dtoa_r+0x9f0>
 80087b4:	2201      	movs	r2, #1
 80087b6:	e7e2      	b.n	800877e <_dtoa_r+0xa46>
 80087b8:	f1b9 0f00 	cmp.w	r9, #0
 80087bc:	db06      	blt.n	80087cc <_dtoa_r+0xa94>
 80087be:	9905      	ldr	r1, [sp, #20]
 80087c0:	ea41 0909 	orr.w	r9, r1, r9
 80087c4:	9906      	ldr	r1, [sp, #24]
 80087c6:	ea59 0101 	orrs.w	r1, r9, r1
 80087ca:	d120      	bne.n	800880e <_dtoa_r+0xad6>
 80087cc:	2a00      	cmp	r2, #0
 80087ce:	ddec      	ble.n	80087aa <_dtoa_r+0xa72>
 80087d0:	4659      	mov	r1, fp
 80087d2:	2201      	movs	r2, #1
 80087d4:	4620      	mov	r0, r4
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	f000 fad2 	bl	8008d80 <__lshift>
 80087dc:	4631      	mov	r1, r6
 80087de:	4683      	mov	fp, r0
 80087e0:	f000 fb3a 	bl	8008e58 <__mcmp>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	dc02      	bgt.n	80087f0 <_dtoa_r+0xab8>
 80087ea:	d1de      	bne.n	80087aa <_dtoa_r+0xa72>
 80087ec:	07da      	lsls	r2, r3, #31
 80087ee:	d5dc      	bpl.n	80087aa <_dtoa_r+0xa72>
 80087f0:	2b39      	cmp	r3, #57	; 0x39
 80087f2:	d1d8      	bne.n	80087a6 <_dtoa_r+0xa6e>
 80087f4:	9a02      	ldr	r2, [sp, #8]
 80087f6:	2339      	movs	r3, #57	; 0x39
 80087f8:	7013      	strb	r3, [r2, #0]
 80087fa:	462b      	mov	r3, r5
 80087fc:	461d      	mov	r5, r3
 80087fe:	3b01      	subs	r3, #1
 8008800:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008804:	2a39      	cmp	r2, #57	; 0x39
 8008806:	d050      	beq.n	80088aa <_dtoa_r+0xb72>
 8008808:	3201      	adds	r2, #1
 800880a:	701a      	strb	r2, [r3, #0]
 800880c:	e745      	b.n	800869a <_dtoa_r+0x962>
 800880e:	2a00      	cmp	r2, #0
 8008810:	dd03      	ble.n	800881a <_dtoa_r+0xae2>
 8008812:	2b39      	cmp	r3, #57	; 0x39
 8008814:	d0ee      	beq.n	80087f4 <_dtoa_r+0xabc>
 8008816:	3301      	adds	r3, #1
 8008818:	e7c7      	b.n	80087aa <_dtoa_r+0xa72>
 800881a:	9a01      	ldr	r2, [sp, #4]
 800881c:	9907      	ldr	r1, [sp, #28]
 800881e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008822:	428a      	cmp	r2, r1
 8008824:	d02a      	beq.n	800887c <_dtoa_r+0xb44>
 8008826:	4659      	mov	r1, fp
 8008828:	2300      	movs	r3, #0
 800882a:	220a      	movs	r2, #10
 800882c:	4620      	mov	r0, r4
 800882e:	f000 f8f7 	bl	8008a20 <__multadd>
 8008832:	45b8      	cmp	r8, r7
 8008834:	4683      	mov	fp, r0
 8008836:	f04f 0300 	mov.w	r3, #0
 800883a:	f04f 020a 	mov.w	r2, #10
 800883e:	4641      	mov	r1, r8
 8008840:	4620      	mov	r0, r4
 8008842:	d107      	bne.n	8008854 <_dtoa_r+0xb1c>
 8008844:	f000 f8ec 	bl	8008a20 <__multadd>
 8008848:	4680      	mov	r8, r0
 800884a:	4607      	mov	r7, r0
 800884c:	9b01      	ldr	r3, [sp, #4]
 800884e:	3301      	adds	r3, #1
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	e775      	b.n	8008740 <_dtoa_r+0xa08>
 8008854:	f000 f8e4 	bl	8008a20 <__multadd>
 8008858:	4639      	mov	r1, r7
 800885a:	4680      	mov	r8, r0
 800885c:	2300      	movs	r3, #0
 800885e:	220a      	movs	r2, #10
 8008860:	4620      	mov	r0, r4
 8008862:	f000 f8dd 	bl	8008a20 <__multadd>
 8008866:	4607      	mov	r7, r0
 8008868:	e7f0      	b.n	800884c <_dtoa_r+0xb14>
 800886a:	f1b9 0f00 	cmp.w	r9, #0
 800886e:	9a00      	ldr	r2, [sp, #0]
 8008870:	bfcc      	ite	gt
 8008872:	464d      	movgt	r5, r9
 8008874:	2501      	movle	r5, #1
 8008876:	4415      	add	r5, r2
 8008878:	f04f 0800 	mov.w	r8, #0
 800887c:	4659      	mov	r1, fp
 800887e:	2201      	movs	r2, #1
 8008880:	4620      	mov	r0, r4
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	f000 fa7c 	bl	8008d80 <__lshift>
 8008888:	4631      	mov	r1, r6
 800888a:	4683      	mov	fp, r0
 800888c:	f000 fae4 	bl	8008e58 <__mcmp>
 8008890:	2800      	cmp	r0, #0
 8008892:	dcb2      	bgt.n	80087fa <_dtoa_r+0xac2>
 8008894:	d102      	bne.n	800889c <_dtoa_r+0xb64>
 8008896:	9b01      	ldr	r3, [sp, #4]
 8008898:	07db      	lsls	r3, r3, #31
 800889a:	d4ae      	bmi.n	80087fa <_dtoa_r+0xac2>
 800889c:	462b      	mov	r3, r5
 800889e:	461d      	mov	r5, r3
 80088a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088a4:	2a30      	cmp	r2, #48	; 0x30
 80088a6:	d0fa      	beq.n	800889e <_dtoa_r+0xb66>
 80088a8:	e6f7      	b.n	800869a <_dtoa_r+0x962>
 80088aa:	9a00      	ldr	r2, [sp, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d1a5      	bne.n	80087fc <_dtoa_r+0xac4>
 80088b0:	f10a 0a01 	add.w	sl, sl, #1
 80088b4:	2331      	movs	r3, #49	; 0x31
 80088b6:	e779      	b.n	80087ac <_dtoa_r+0xa74>
 80088b8:	4b13      	ldr	r3, [pc, #76]	; (8008908 <_dtoa_r+0xbd0>)
 80088ba:	f7ff baaf 	b.w	8007e1c <_dtoa_r+0xe4>
 80088be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f47f aa86 	bne.w	8007dd2 <_dtoa_r+0x9a>
 80088c6:	4b11      	ldr	r3, [pc, #68]	; (800890c <_dtoa_r+0xbd4>)
 80088c8:	f7ff baa8 	b.w	8007e1c <_dtoa_r+0xe4>
 80088cc:	f1b9 0f00 	cmp.w	r9, #0
 80088d0:	dc03      	bgt.n	80088da <_dtoa_r+0xba2>
 80088d2:	9b05      	ldr	r3, [sp, #20]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	f73f aec9 	bgt.w	800866c <_dtoa_r+0x934>
 80088da:	9d00      	ldr	r5, [sp, #0]
 80088dc:	4631      	mov	r1, r6
 80088de:	4658      	mov	r0, fp
 80088e0:	f7ff f99c 	bl	8007c1c <quorem>
 80088e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088e8:	f805 3b01 	strb.w	r3, [r5], #1
 80088ec:	9a00      	ldr	r2, [sp, #0]
 80088ee:	1aaa      	subs	r2, r5, r2
 80088f0:	4591      	cmp	r9, r2
 80088f2:	ddba      	ble.n	800886a <_dtoa_r+0xb32>
 80088f4:	4659      	mov	r1, fp
 80088f6:	2300      	movs	r3, #0
 80088f8:	220a      	movs	r2, #10
 80088fa:	4620      	mov	r0, r4
 80088fc:	f000 f890 	bl	8008a20 <__multadd>
 8008900:	4683      	mov	fp, r0
 8008902:	e7eb      	b.n	80088dc <_dtoa_r+0xba4>
 8008904:	0800a033 	.word	0x0800a033
 8008908:	08009f8c 	.word	0x08009f8c
 800890c:	08009fb0 	.word	0x08009fb0

08008910 <_localeconv_r>:
 8008910:	4800      	ldr	r0, [pc, #0]	; (8008914 <_localeconv_r+0x4>)
 8008912:	4770      	bx	lr
 8008914:	20000164 	.word	0x20000164

08008918 <malloc>:
 8008918:	4b02      	ldr	r3, [pc, #8]	; (8008924 <malloc+0xc>)
 800891a:	4601      	mov	r1, r0
 800891c:	6818      	ldr	r0, [r3, #0]
 800891e:	f7fe bc89 	b.w	8007234 <_malloc_r>
 8008922:	bf00      	nop
 8008924:	20000010 	.word	0x20000010

08008928 <memcpy>:
 8008928:	440a      	add	r2, r1
 800892a:	4291      	cmp	r1, r2
 800892c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008930:	d100      	bne.n	8008934 <memcpy+0xc>
 8008932:	4770      	bx	lr
 8008934:	b510      	push	{r4, lr}
 8008936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800893e:	4291      	cmp	r1, r2
 8008940:	d1f9      	bne.n	8008936 <memcpy+0xe>
 8008942:	bd10      	pop	{r4, pc}

08008944 <__malloc_lock>:
 8008944:	4801      	ldr	r0, [pc, #4]	; (800894c <__malloc_lock+0x8>)
 8008946:	f000 bd64 	b.w	8009412 <__retarget_lock_acquire_recursive>
 800894a:	bf00      	nop
 800894c:	200007e8 	.word	0x200007e8

08008950 <__malloc_unlock>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__malloc_unlock+0x8>)
 8008952:	f000 bd5f 	b.w	8009414 <__retarget_lock_release_recursive>
 8008956:	bf00      	nop
 8008958:	200007e8 	.word	0x200007e8

0800895c <_Balloc>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008960:	4604      	mov	r4, r0
 8008962:	460d      	mov	r5, r1
 8008964:	b976      	cbnz	r6, 8008984 <_Balloc+0x28>
 8008966:	2010      	movs	r0, #16
 8008968:	f7ff ffd6 	bl	8008918 <malloc>
 800896c:	4602      	mov	r2, r0
 800896e:	6260      	str	r0, [r4, #36]	; 0x24
 8008970:	b920      	cbnz	r0, 800897c <_Balloc+0x20>
 8008972:	4b18      	ldr	r3, [pc, #96]	; (80089d4 <_Balloc+0x78>)
 8008974:	4818      	ldr	r0, [pc, #96]	; (80089d8 <_Balloc+0x7c>)
 8008976:	2166      	movs	r1, #102	; 0x66
 8008978:	f000 fd1a 	bl	80093b0 <__assert_func>
 800897c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008980:	6006      	str	r6, [r0, #0]
 8008982:	60c6      	str	r6, [r0, #12]
 8008984:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008986:	68f3      	ldr	r3, [r6, #12]
 8008988:	b183      	cbz	r3, 80089ac <_Balloc+0x50>
 800898a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008992:	b9b8      	cbnz	r0, 80089c4 <_Balloc+0x68>
 8008994:	2101      	movs	r1, #1
 8008996:	fa01 f605 	lsl.w	r6, r1, r5
 800899a:	1d72      	adds	r2, r6, #5
 800899c:	0092      	lsls	r2, r2, #2
 800899e:	4620      	mov	r0, r4
 80089a0:	f7fe fc38 	bl	8007214 <_calloc_r>
 80089a4:	b160      	cbz	r0, 80089c0 <_Balloc+0x64>
 80089a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089aa:	e00e      	b.n	80089ca <_Balloc+0x6e>
 80089ac:	2221      	movs	r2, #33	; 0x21
 80089ae:	2104      	movs	r1, #4
 80089b0:	4620      	mov	r0, r4
 80089b2:	f7fe fc2f 	bl	8007214 <_calloc_r>
 80089b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089b8:	60f0      	str	r0, [r6, #12]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1e4      	bne.n	800898a <_Balloc+0x2e>
 80089c0:	2000      	movs	r0, #0
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	6802      	ldr	r2, [r0, #0]
 80089c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089ca:	2300      	movs	r3, #0
 80089cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089d0:	e7f7      	b.n	80089c2 <_Balloc+0x66>
 80089d2:	bf00      	nop
 80089d4:	08009fbd 	.word	0x08009fbd
 80089d8:	0800a044 	.word	0x0800a044

080089dc <_Bfree>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089e0:	4605      	mov	r5, r0
 80089e2:	460c      	mov	r4, r1
 80089e4:	b976      	cbnz	r6, 8008a04 <_Bfree+0x28>
 80089e6:	2010      	movs	r0, #16
 80089e8:	f7ff ff96 	bl	8008918 <malloc>
 80089ec:	4602      	mov	r2, r0
 80089ee:	6268      	str	r0, [r5, #36]	; 0x24
 80089f0:	b920      	cbnz	r0, 80089fc <_Bfree+0x20>
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <_Bfree+0x3c>)
 80089f4:	4809      	ldr	r0, [pc, #36]	; (8008a1c <_Bfree+0x40>)
 80089f6:	218a      	movs	r1, #138	; 0x8a
 80089f8:	f000 fcda 	bl	80093b0 <__assert_func>
 80089fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a00:	6006      	str	r6, [r0, #0]
 8008a02:	60c6      	str	r6, [r0, #12]
 8008a04:	b13c      	cbz	r4, 8008a16 <_Bfree+0x3a>
 8008a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a08:	6862      	ldr	r2, [r4, #4]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a10:	6021      	str	r1, [r4, #0]
 8008a12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	08009fbd 	.word	0x08009fbd
 8008a1c:	0800a044 	.word	0x0800a044

08008a20 <__multadd>:
 8008a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a24:	690e      	ldr	r6, [r1, #16]
 8008a26:	4607      	mov	r7, r0
 8008a28:	4698      	mov	r8, r3
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	f101 0014 	add.w	r0, r1, #20
 8008a30:	2300      	movs	r3, #0
 8008a32:	6805      	ldr	r5, [r0, #0]
 8008a34:	b2a9      	uxth	r1, r5
 8008a36:	fb02 8101 	mla	r1, r2, r1, r8
 8008a3a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008a3e:	0c2d      	lsrs	r5, r5, #16
 8008a40:	fb02 c505 	mla	r5, r2, r5, ip
 8008a44:	b289      	uxth	r1, r1
 8008a46:	3301      	adds	r3, #1
 8008a48:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008a4c:	429e      	cmp	r6, r3
 8008a4e:	f840 1b04 	str.w	r1, [r0], #4
 8008a52:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008a56:	dcec      	bgt.n	8008a32 <__multadd+0x12>
 8008a58:	f1b8 0f00 	cmp.w	r8, #0
 8008a5c:	d022      	beq.n	8008aa4 <__multadd+0x84>
 8008a5e:	68a3      	ldr	r3, [r4, #8]
 8008a60:	42b3      	cmp	r3, r6
 8008a62:	dc19      	bgt.n	8008a98 <__multadd+0x78>
 8008a64:	6861      	ldr	r1, [r4, #4]
 8008a66:	4638      	mov	r0, r7
 8008a68:	3101      	adds	r1, #1
 8008a6a:	f7ff ff77 	bl	800895c <_Balloc>
 8008a6e:	4605      	mov	r5, r0
 8008a70:	b928      	cbnz	r0, 8008a7e <__multadd+0x5e>
 8008a72:	4602      	mov	r2, r0
 8008a74:	4b0d      	ldr	r3, [pc, #52]	; (8008aac <__multadd+0x8c>)
 8008a76:	480e      	ldr	r0, [pc, #56]	; (8008ab0 <__multadd+0x90>)
 8008a78:	21b5      	movs	r1, #181	; 0xb5
 8008a7a:	f000 fc99 	bl	80093b0 <__assert_func>
 8008a7e:	6922      	ldr	r2, [r4, #16]
 8008a80:	3202      	adds	r2, #2
 8008a82:	f104 010c 	add.w	r1, r4, #12
 8008a86:	0092      	lsls	r2, r2, #2
 8008a88:	300c      	adds	r0, #12
 8008a8a:	f7ff ff4d 	bl	8008928 <memcpy>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4638      	mov	r0, r7
 8008a92:	f7ff ffa3 	bl	80089dc <_Bfree>
 8008a96:	462c      	mov	r4, r5
 8008a98:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008a9c:	3601      	adds	r6, #1
 8008a9e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008aa2:	6126      	str	r6, [r4, #16]
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aaa:	bf00      	nop
 8008aac:	0800a033 	.word	0x0800a033
 8008ab0:	0800a044 	.word	0x0800a044

08008ab4 <__hi0bits>:
 8008ab4:	0c03      	lsrs	r3, r0, #16
 8008ab6:	041b      	lsls	r3, r3, #16
 8008ab8:	b9d3      	cbnz	r3, 8008af0 <__hi0bits+0x3c>
 8008aba:	0400      	lsls	r0, r0, #16
 8008abc:	2310      	movs	r3, #16
 8008abe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ac2:	bf04      	itt	eq
 8008ac4:	0200      	lsleq	r0, r0, #8
 8008ac6:	3308      	addeq	r3, #8
 8008ac8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008acc:	bf04      	itt	eq
 8008ace:	0100      	lsleq	r0, r0, #4
 8008ad0:	3304      	addeq	r3, #4
 8008ad2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ad6:	bf04      	itt	eq
 8008ad8:	0080      	lsleq	r0, r0, #2
 8008ada:	3302      	addeq	r3, #2
 8008adc:	2800      	cmp	r0, #0
 8008ade:	db05      	blt.n	8008aec <__hi0bits+0x38>
 8008ae0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ae4:	f103 0301 	add.w	r3, r3, #1
 8008ae8:	bf08      	it	eq
 8008aea:	2320      	moveq	r3, #32
 8008aec:	4618      	mov	r0, r3
 8008aee:	4770      	bx	lr
 8008af0:	2300      	movs	r3, #0
 8008af2:	e7e4      	b.n	8008abe <__hi0bits+0xa>

08008af4 <__lo0bits>:
 8008af4:	6803      	ldr	r3, [r0, #0]
 8008af6:	f013 0207 	ands.w	r2, r3, #7
 8008afa:	4601      	mov	r1, r0
 8008afc:	d00b      	beq.n	8008b16 <__lo0bits+0x22>
 8008afe:	07da      	lsls	r2, r3, #31
 8008b00:	d424      	bmi.n	8008b4c <__lo0bits+0x58>
 8008b02:	0798      	lsls	r0, r3, #30
 8008b04:	bf49      	itett	mi
 8008b06:	085b      	lsrmi	r3, r3, #1
 8008b08:	089b      	lsrpl	r3, r3, #2
 8008b0a:	2001      	movmi	r0, #1
 8008b0c:	600b      	strmi	r3, [r1, #0]
 8008b0e:	bf5c      	itt	pl
 8008b10:	600b      	strpl	r3, [r1, #0]
 8008b12:	2002      	movpl	r0, #2
 8008b14:	4770      	bx	lr
 8008b16:	b298      	uxth	r0, r3
 8008b18:	b9b0      	cbnz	r0, 8008b48 <__lo0bits+0x54>
 8008b1a:	0c1b      	lsrs	r3, r3, #16
 8008b1c:	2010      	movs	r0, #16
 8008b1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b22:	bf04      	itt	eq
 8008b24:	0a1b      	lsreq	r3, r3, #8
 8008b26:	3008      	addeq	r0, #8
 8008b28:	071a      	lsls	r2, r3, #28
 8008b2a:	bf04      	itt	eq
 8008b2c:	091b      	lsreq	r3, r3, #4
 8008b2e:	3004      	addeq	r0, #4
 8008b30:	079a      	lsls	r2, r3, #30
 8008b32:	bf04      	itt	eq
 8008b34:	089b      	lsreq	r3, r3, #2
 8008b36:	3002      	addeq	r0, #2
 8008b38:	07da      	lsls	r2, r3, #31
 8008b3a:	d403      	bmi.n	8008b44 <__lo0bits+0x50>
 8008b3c:	085b      	lsrs	r3, r3, #1
 8008b3e:	f100 0001 	add.w	r0, r0, #1
 8008b42:	d005      	beq.n	8008b50 <__lo0bits+0x5c>
 8008b44:	600b      	str	r3, [r1, #0]
 8008b46:	4770      	bx	lr
 8008b48:	4610      	mov	r0, r2
 8008b4a:	e7e8      	b.n	8008b1e <__lo0bits+0x2a>
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	4770      	bx	lr
 8008b50:	2020      	movs	r0, #32
 8008b52:	4770      	bx	lr

08008b54 <__i2b>:
 8008b54:	b510      	push	{r4, lr}
 8008b56:	460c      	mov	r4, r1
 8008b58:	2101      	movs	r1, #1
 8008b5a:	f7ff feff 	bl	800895c <_Balloc>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	b928      	cbnz	r0, 8008b6e <__i2b+0x1a>
 8008b62:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <__i2b+0x24>)
 8008b64:	4805      	ldr	r0, [pc, #20]	; (8008b7c <__i2b+0x28>)
 8008b66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b6a:	f000 fc21 	bl	80093b0 <__assert_func>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	6144      	str	r4, [r0, #20]
 8008b72:	6103      	str	r3, [r0, #16]
 8008b74:	bd10      	pop	{r4, pc}
 8008b76:	bf00      	nop
 8008b78:	0800a033 	.word	0x0800a033
 8008b7c:	0800a044 	.word	0x0800a044

08008b80 <__multiply>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	4614      	mov	r4, r2
 8008b86:	690a      	ldr	r2, [r1, #16]
 8008b88:	6923      	ldr	r3, [r4, #16]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	bfb8      	it	lt
 8008b8e:	460b      	movlt	r3, r1
 8008b90:	460d      	mov	r5, r1
 8008b92:	bfbc      	itt	lt
 8008b94:	4625      	movlt	r5, r4
 8008b96:	461c      	movlt	r4, r3
 8008b98:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008b9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ba0:	68ab      	ldr	r3, [r5, #8]
 8008ba2:	6869      	ldr	r1, [r5, #4]
 8008ba4:	eb0a 0709 	add.w	r7, sl, r9
 8008ba8:	42bb      	cmp	r3, r7
 8008baa:	b085      	sub	sp, #20
 8008bac:	bfb8      	it	lt
 8008bae:	3101      	addlt	r1, #1
 8008bb0:	f7ff fed4 	bl	800895c <_Balloc>
 8008bb4:	b930      	cbnz	r0, 8008bc4 <__multiply+0x44>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	4b42      	ldr	r3, [pc, #264]	; (8008cc4 <__multiply+0x144>)
 8008bba:	4843      	ldr	r0, [pc, #268]	; (8008cc8 <__multiply+0x148>)
 8008bbc:	f240 115d 	movw	r1, #349	; 0x15d
 8008bc0:	f000 fbf6 	bl	80093b0 <__assert_func>
 8008bc4:	f100 0614 	add.w	r6, r0, #20
 8008bc8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008bcc:	4633      	mov	r3, r6
 8008bce:	2200      	movs	r2, #0
 8008bd0:	4543      	cmp	r3, r8
 8008bd2:	d31e      	bcc.n	8008c12 <__multiply+0x92>
 8008bd4:	f105 0c14 	add.w	ip, r5, #20
 8008bd8:	f104 0314 	add.w	r3, r4, #20
 8008bdc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008be0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008be4:	9202      	str	r2, [sp, #8]
 8008be6:	ebac 0205 	sub.w	r2, ip, r5
 8008bea:	3a15      	subs	r2, #21
 8008bec:	f022 0203 	bic.w	r2, r2, #3
 8008bf0:	3204      	adds	r2, #4
 8008bf2:	f105 0115 	add.w	r1, r5, #21
 8008bf6:	458c      	cmp	ip, r1
 8008bf8:	bf38      	it	cc
 8008bfa:	2204      	movcc	r2, #4
 8008bfc:	9201      	str	r2, [sp, #4]
 8008bfe:	9a02      	ldr	r2, [sp, #8]
 8008c00:	9303      	str	r3, [sp, #12]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d808      	bhi.n	8008c18 <__multiply+0x98>
 8008c06:	2f00      	cmp	r7, #0
 8008c08:	dc55      	bgt.n	8008cb6 <__multiply+0x136>
 8008c0a:	6107      	str	r7, [r0, #16]
 8008c0c:	b005      	add	sp, #20
 8008c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c12:	f843 2b04 	str.w	r2, [r3], #4
 8008c16:	e7db      	b.n	8008bd0 <__multiply+0x50>
 8008c18:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c1c:	f1ba 0f00 	cmp.w	sl, #0
 8008c20:	d020      	beq.n	8008c64 <__multiply+0xe4>
 8008c22:	f105 0e14 	add.w	lr, r5, #20
 8008c26:	46b1      	mov	r9, r6
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008c2e:	f8d9 b000 	ldr.w	fp, [r9]
 8008c32:	b2a1      	uxth	r1, r4
 8008c34:	fa1f fb8b 	uxth.w	fp, fp
 8008c38:	fb0a b101 	mla	r1, sl, r1, fp
 8008c3c:	4411      	add	r1, r2
 8008c3e:	f8d9 2000 	ldr.w	r2, [r9]
 8008c42:	0c24      	lsrs	r4, r4, #16
 8008c44:	0c12      	lsrs	r2, r2, #16
 8008c46:	fb0a 2404 	mla	r4, sl, r4, r2
 8008c4a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008c4e:	b289      	uxth	r1, r1
 8008c50:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008c54:	45f4      	cmp	ip, lr
 8008c56:	f849 1b04 	str.w	r1, [r9], #4
 8008c5a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008c5e:	d8e4      	bhi.n	8008c2a <__multiply+0xaa>
 8008c60:	9901      	ldr	r1, [sp, #4]
 8008c62:	5072      	str	r2, [r6, r1]
 8008c64:	9a03      	ldr	r2, [sp, #12]
 8008c66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	f1b9 0f00 	cmp.w	r9, #0
 8008c70:	d01f      	beq.n	8008cb2 <__multiply+0x132>
 8008c72:	6834      	ldr	r4, [r6, #0]
 8008c74:	f105 0114 	add.w	r1, r5, #20
 8008c78:	46b6      	mov	lr, r6
 8008c7a:	f04f 0a00 	mov.w	sl, #0
 8008c7e:	880a      	ldrh	r2, [r1, #0]
 8008c80:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008c84:	fb09 b202 	mla	r2, r9, r2, fp
 8008c88:	4492      	add	sl, r2
 8008c8a:	b2a4      	uxth	r4, r4
 8008c8c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008c90:	f84e 4b04 	str.w	r4, [lr], #4
 8008c94:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c98:	f8be 2000 	ldrh.w	r2, [lr]
 8008c9c:	0c24      	lsrs	r4, r4, #16
 8008c9e:	fb09 2404 	mla	r4, r9, r4, r2
 8008ca2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008ca6:	458c      	cmp	ip, r1
 8008ca8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008cac:	d8e7      	bhi.n	8008c7e <__multiply+0xfe>
 8008cae:	9a01      	ldr	r2, [sp, #4]
 8008cb0:	50b4      	str	r4, [r6, r2]
 8008cb2:	3604      	adds	r6, #4
 8008cb4:	e7a3      	b.n	8008bfe <__multiply+0x7e>
 8008cb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1a5      	bne.n	8008c0a <__multiply+0x8a>
 8008cbe:	3f01      	subs	r7, #1
 8008cc0:	e7a1      	b.n	8008c06 <__multiply+0x86>
 8008cc2:	bf00      	nop
 8008cc4:	0800a033 	.word	0x0800a033
 8008cc8:	0800a044 	.word	0x0800a044

08008ccc <__pow5mult>:
 8008ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd0:	4615      	mov	r5, r2
 8008cd2:	f012 0203 	ands.w	r2, r2, #3
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	460f      	mov	r7, r1
 8008cda:	d007      	beq.n	8008cec <__pow5mult+0x20>
 8008cdc:	4c25      	ldr	r4, [pc, #148]	; (8008d74 <__pow5mult+0xa8>)
 8008cde:	3a01      	subs	r2, #1
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ce6:	f7ff fe9b 	bl	8008a20 <__multadd>
 8008cea:	4607      	mov	r7, r0
 8008cec:	10ad      	asrs	r5, r5, #2
 8008cee:	d03d      	beq.n	8008d6c <__pow5mult+0xa0>
 8008cf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cf2:	b97c      	cbnz	r4, 8008d14 <__pow5mult+0x48>
 8008cf4:	2010      	movs	r0, #16
 8008cf6:	f7ff fe0f 	bl	8008918 <malloc>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	6270      	str	r0, [r6, #36]	; 0x24
 8008cfe:	b928      	cbnz	r0, 8008d0c <__pow5mult+0x40>
 8008d00:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <__pow5mult+0xac>)
 8008d02:	481e      	ldr	r0, [pc, #120]	; (8008d7c <__pow5mult+0xb0>)
 8008d04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d08:	f000 fb52 	bl	80093b0 <__assert_func>
 8008d0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d10:	6004      	str	r4, [r0, #0]
 8008d12:	60c4      	str	r4, [r0, #12]
 8008d14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d1c:	b94c      	cbnz	r4, 8008d32 <__pow5mult+0x66>
 8008d1e:	f240 2171 	movw	r1, #625	; 0x271
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff ff16 	bl	8008b54 <__i2b>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d2e:	4604      	mov	r4, r0
 8008d30:	6003      	str	r3, [r0, #0]
 8008d32:	f04f 0900 	mov.w	r9, #0
 8008d36:	07eb      	lsls	r3, r5, #31
 8008d38:	d50a      	bpl.n	8008d50 <__pow5mult+0x84>
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	4622      	mov	r2, r4
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7ff ff1e 	bl	8008b80 <__multiply>
 8008d44:	4639      	mov	r1, r7
 8008d46:	4680      	mov	r8, r0
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7ff fe47 	bl	80089dc <_Bfree>
 8008d4e:	4647      	mov	r7, r8
 8008d50:	106d      	asrs	r5, r5, #1
 8008d52:	d00b      	beq.n	8008d6c <__pow5mult+0xa0>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	b938      	cbnz	r0, 8008d68 <__pow5mult+0x9c>
 8008d58:	4622      	mov	r2, r4
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7ff ff0f 	bl	8008b80 <__multiply>
 8008d62:	6020      	str	r0, [r4, #0]
 8008d64:	f8c0 9000 	str.w	r9, [r0]
 8008d68:	4604      	mov	r4, r0
 8008d6a:	e7e4      	b.n	8008d36 <__pow5mult+0x6a>
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d72:	bf00      	nop
 8008d74:	0800a198 	.word	0x0800a198
 8008d78:	08009fbd 	.word	0x08009fbd
 8008d7c:	0800a044 	.word	0x0800a044

08008d80 <__lshift>:
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	460c      	mov	r4, r1
 8008d86:	6849      	ldr	r1, [r1, #4]
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	4607      	mov	r7, r0
 8008d92:	4691      	mov	r9, r2
 8008d94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d98:	f108 0601 	add.w	r6, r8, #1
 8008d9c:	42b3      	cmp	r3, r6
 8008d9e:	db0b      	blt.n	8008db8 <__lshift+0x38>
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff fddb 	bl	800895c <_Balloc>
 8008da6:	4605      	mov	r5, r0
 8008da8:	b948      	cbnz	r0, 8008dbe <__lshift+0x3e>
 8008daa:	4602      	mov	r2, r0
 8008dac:	4b28      	ldr	r3, [pc, #160]	; (8008e50 <__lshift+0xd0>)
 8008dae:	4829      	ldr	r0, [pc, #164]	; (8008e54 <__lshift+0xd4>)
 8008db0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008db4:	f000 fafc 	bl	80093b0 <__assert_func>
 8008db8:	3101      	adds	r1, #1
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	e7ee      	b.n	8008d9c <__lshift+0x1c>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f100 0114 	add.w	r1, r0, #20
 8008dc4:	f100 0210 	add.w	r2, r0, #16
 8008dc8:	4618      	mov	r0, r3
 8008dca:	4553      	cmp	r3, sl
 8008dcc:	db33      	blt.n	8008e36 <__lshift+0xb6>
 8008dce:	6920      	ldr	r0, [r4, #16]
 8008dd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dd4:	f104 0314 	add.w	r3, r4, #20
 8008dd8:	f019 091f 	ands.w	r9, r9, #31
 8008ddc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008de0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008de4:	d02b      	beq.n	8008e3e <__lshift+0xbe>
 8008de6:	f1c9 0e20 	rsb	lr, r9, #32
 8008dea:	468a      	mov	sl, r1
 8008dec:	2200      	movs	r2, #0
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	fa00 f009 	lsl.w	r0, r0, r9
 8008df4:	4302      	orrs	r2, r0
 8008df6:	f84a 2b04 	str.w	r2, [sl], #4
 8008dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfe:	459c      	cmp	ip, r3
 8008e00:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e04:	d8f3      	bhi.n	8008dee <__lshift+0x6e>
 8008e06:	ebac 0304 	sub.w	r3, ip, r4
 8008e0a:	3b15      	subs	r3, #21
 8008e0c:	f023 0303 	bic.w	r3, r3, #3
 8008e10:	3304      	adds	r3, #4
 8008e12:	f104 0015 	add.w	r0, r4, #21
 8008e16:	4584      	cmp	ip, r0
 8008e18:	bf38      	it	cc
 8008e1a:	2304      	movcc	r3, #4
 8008e1c:	50ca      	str	r2, [r1, r3]
 8008e1e:	b10a      	cbz	r2, 8008e24 <__lshift+0xa4>
 8008e20:	f108 0602 	add.w	r6, r8, #2
 8008e24:	3e01      	subs	r6, #1
 8008e26:	4638      	mov	r0, r7
 8008e28:	612e      	str	r6, [r5, #16]
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	f7ff fdd6 	bl	80089dc <_Bfree>
 8008e30:	4628      	mov	r0, r5
 8008e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e36:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	e7c5      	b.n	8008dca <__lshift+0x4a>
 8008e3e:	3904      	subs	r1, #4
 8008e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e44:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e48:	459c      	cmp	ip, r3
 8008e4a:	d8f9      	bhi.n	8008e40 <__lshift+0xc0>
 8008e4c:	e7ea      	b.n	8008e24 <__lshift+0xa4>
 8008e4e:	bf00      	nop
 8008e50:	0800a033 	.word	0x0800a033
 8008e54:	0800a044 	.word	0x0800a044

08008e58 <__mcmp>:
 8008e58:	b530      	push	{r4, r5, lr}
 8008e5a:	6902      	ldr	r2, [r0, #16]
 8008e5c:	690c      	ldr	r4, [r1, #16]
 8008e5e:	1b12      	subs	r2, r2, r4
 8008e60:	d10e      	bne.n	8008e80 <__mcmp+0x28>
 8008e62:	f100 0314 	add.w	r3, r0, #20
 8008e66:	3114      	adds	r1, #20
 8008e68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e78:	42a5      	cmp	r5, r4
 8008e7a:	d003      	beq.n	8008e84 <__mcmp+0x2c>
 8008e7c:	d305      	bcc.n	8008e8a <__mcmp+0x32>
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4610      	mov	r0, r2
 8008e82:	bd30      	pop	{r4, r5, pc}
 8008e84:	4283      	cmp	r3, r0
 8008e86:	d3f3      	bcc.n	8008e70 <__mcmp+0x18>
 8008e88:	e7fa      	b.n	8008e80 <__mcmp+0x28>
 8008e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e8e:	e7f7      	b.n	8008e80 <__mcmp+0x28>

08008e90 <__mdiff>:
 8008e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	460c      	mov	r4, r1
 8008e96:	4606      	mov	r6, r0
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	4617      	mov	r7, r2
 8008e9e:	f7ff ffdb 	bl	8008e58 <__mcmp>
 8008ea2:	1e05      	subs	r5, r0, #0
 8008ea4:	d110      	bne.n	8008ec8 <__mdiff+0x38>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7ff fd57 	bl	800895c <_Balloc>
 8008eae:	b930      	cbnz	r0, 8008ebe <__mdiff+0x2e>
 8008eb0:	4b39      	ldr	r3, [pc, #228]	; (8008f98 <__mdiff+0x108>)
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	f240 2132 	movw	r1, #562	; 0x232
 8008eb8:	4838      	ldr	r0, [pc, #224]	; (8008f9c <__mdiff+0x10c>)
 8008eba:	f000 fa79 	bl	80093b0 <__assert_func>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec8:	bfa4      	itt	ge
 8008eca:	463b      	movge	r3, r7
 8008ecc:	4627      	movge	r7, r4
 8008ece:	4630      	mov	r0, r6
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	bfa6      	itte	ge
 8008ed4:	461c      	movge	r4, r3
 8008ed6:	2500      	movge	r5, #0
 8008ed8:	2501      	movlt	r5, #1
 8008eda:	f7ff fd3f 	bl	800895c <_Balloc>
 8008ede:	b920      	cbnz	r0, 8008eea <__mdiff+0x5a>
 8008ee0:	4b2d      	ldr	r3, [pc, #180]	; (8008f98 <__mdiff+0x108>)
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ee8:	e7e6      	b.n	8008eb8 <__mdiff+0x28>
 8008eea:	693e      	ldr	r6, [r7, #16]
 8008eec:	60c5      	str	r5, [r0, #12]
 8008eee:	6925      	ldr	r5, [r4, #16]
 8008ef0:	f107 0114 	add.w	r1, r7, #20
 8008ef4:	f104 0914 	add.w	r9, r4, #20
 8008ef8:	f100 0e14 	add.w	lr, r0, #20
 8008efc:	f107 0210 	add.w	r2, r7, #16
 8008f00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008f04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008f08:	46f2      	mov	sl, lr
 8008f0a:	2700      	movs	r7, #0
 8008f0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f14:	fa1f f883 	uxth.w	r8, r3
 8008f18:	fa17 f78b 	uxtah	r7, r7, fp
 8008f1c:	0c1b      	lsrs	r3, r3, #16
 8008f1e:	eba7 0808 	sub.w	r8, r7, r8
 8008f22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f2a:	fa1f f888 	uxth.w	r8, r8
 8008f2e:	141f      	asrs	r7, r3, #16
 8008f30:	454d      	cmp	r5, r9
 8008f32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f36:	f84a 3b04 	str.w	r3, [sl], #4
 8008f3a:	d8e7      	bhi.n	8008f0c <__mdiff+0x7c>
 8008f3c:	1b2b      	subs	r3, r5, r4
 8008f3e:	3b15      	subs	r3, #21
 8008f40:	f023 0303 	bic.w	r3, r3, #3
 8008f44:	3304      	adds	r3, #4
 8008f46:	3415      	adds	r4, #21
 8008f48:	42a5      	cmp	r5, r4
 8008f4a:	bf38      	it	cc
 8008f4c:	2304      	movcc	r3, #4
 8008f4e:	4419      	add	r1, r3
 8008f50:	4473      	add	r3, lr
 8008f52:	469e      	mov	lr, r3
 8008f54:	460d      	mov	r5, r1
 8008f56:	4565      	cmp	r5, ip
 8008f58:	d30e      	bcc.n	8008f78 <__mdiff+0xe8>
 8008f5a:	f10c 0203 	add.w	r2, ip, #3
 8008f5e:	1a52      	subs	r2, r2, r1
 8008f60:	f022 0203 	bic.w	r2, r2, #3
 8008f64:	3903      	subs	r1, #3
 8008f66:	458c      	cmp	ip, r1
 8008f68:	bf38      	it	cc
 8008f6a:	2200      	movcc	r2, #0
 8008f6c:	441a      	add	r2, r3
 8008f6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f72:	b17b      	cbz	r3, 8008f94 <__mdiff+0x104>
 8008f74:	6106      	str	r6, [r0, #16]
 8008f76:	e7a5      	b.n	8008ec4 <__mdiff+0x34>
 8008f78:	f855 8b04 	ldr.w	r8, [r5], #4
 8008f7c:	fa17 f488 	uxtah	r4, r7, r8
 8008f80:	1422      	asrs	r2, r4, #16
 8008f82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008f86:	b2a4      	uxth	r4, r4
 8008f88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f8c:	f84e 4b04 	str.w	r4, [lr], #4
 8008f90:	1417      	asrs	r7, r2, #16
 8008f92:	e7e0      	b.n	8008f56 <__mdiff+0xc6>
 8008f94:	3e01      	subs	r6, #1
 8008f96:	e7ea      	b.n	8008f6e <__mdiff+0xde>
 8008f98:	0800a033 	.word	0x0800a033
 8008f9c:	0800a044 	.word	0x0800a044

08008fa0 <__d2b>:
 8008fa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fa4:	4689      	mov	r9, r1
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	ec57 6b10 	vmov	r6, r7, d0
 8008fac:	4690      	mov	r8, r2
 8008fae:	f7ff fcd5 	bl	800895c <_Balloc>
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	b930      	cbnz	r0, 8008fc4 <__d2b+0x24>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	4b25      	ldr	r3, [pc, #148]	; (8009050 <__d2b+0xb0>)
 8008fba:	4826      	ldr	r0, [pc, #152]	; (8009054 <__d2b+0xb4>)
 8008fbc:	f240 310a 	movw	r1, #778	; 0x30a
 8008fc0:	f000 f9f6 	bl	80093b0 <__assert_func>
 8008fc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fcc:	bb35      	cbnz	r5, 800901c <__d2b+0x7c>
 8008fce:	2e00      	cmp	r6, #0
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	d028      	beq.n	8009026 <__d2b+0x86>
 8008fd4:	4668      	mov	r0, sp
 8008fd6:	9600      	str	r6, [sp, #0]
 8008fd8:	f7ff fd8c 	bl	8008af4 <__lo0bits>
 8008fdc:	9900      	ldr	r1, [sp, #0]
 8008fde:	b300      	cbz	r0, 8009022 <__d2b+0x82>
 8008fe0:	9a01      	ldr	r2, [sp, #4]
 8008fe2:	f1c0 0320 	rsb	r3, r0, #32
 8008fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fea:	430b      	orrs	r3, r1
 8008fec:	40c2      	lsrs	r2, r0
 8008fee:	6163      	str	r3, [r4, #20]
 8008ff0:	9201      	str	r2, [sp, #4]
 8008ff2:	9b01      	ldr	r3, [sp, #4]
 8008ff4:	61a3      	str	r3, [r4, #24]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bf14      	ite	ne
 8008ffa:	2202      	movne	r2, #2
 8008ffc:	2201      	moveq	r2, #1
 8008ffe:	6122      	str	r2, [r4, #16]
 8009000:	b1d5      	cbz	r5, 8009038 <__d2b+0x98>
 8009002:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009006:	4405      	add	r5, r0
 8009008:	f8c9 5000 	str.w	r5, [r9]
 800900c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009010:	f8c8 0000 	str.w	r0, [r8]
 8009014:	4620      	mov	r0, r4
 8009016:	b003      	add	sp, #12
 8009018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800901c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009020:	e7d5      	b.n	8008fce <__d2b+0x2e>
 8009022:	6161      	str	r1, [r4, #20]
 8009024:	e7e5      	b.n	8008ff2 <__d2b+0x52>
 8009026:	a801      	add	r0, sp, #4
 8009028:	f7ff fd64 	bl	8008af4 <__lo0bits>
 800902c:	9b01      	ldr	r3, [sp, #4]
 800902e:	6163      	str	r3, [r4, #20]
 8009030:	2201      	movs	r2, #1
 8009032:	6122      	str	r2, [r4, #16]
 8009034:	3020      	adds	r0, #32
 8009036:	e7e3      	b.n	8009000 <__d2b+0x60>
 8009038:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800903c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009040:	f8c9 0000 	str.w	r0, [r9]
 8009044:	6918      	ldr	r0, [r3, #16]
 8009046:	f7ff fd35 	bl	8008ab4 <__hi0bits>
 800904a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800904e:	e7df      	b.n	8009010 <__d2b+0x70>
 8009050:	0800a033 	.word	0x0800a033
 8009054:	0800a044 	.word	0x0800a044

08009058 <_free_r>:
 8009058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800905a:	2900      	cmp	r1, #0
 800905c:	d048      	beq.n	80090f0 <_free_r+0x98>
 800905e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009062:	9001      	str	r0, [sp, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	f1a1 0404 	sub.w	r4, r1, #4
 800906a:	bfb8      	it	lt
 800906c:	18e4      	addlt	r4, r4, r3
 800906e:	f7ff fc69 	bl	8008944 <__malloc_lock>
 8009072:	4a20      	ldr	r2, [pc, #128]	; (80090f4 <_free_r+0x9c>)
 8009074:	9801      	ldr	r0, [sp, #4]
 8009076:	6813      	ldr	r3, [r2, #0]
 8009078:	4615      	mov	r5, r2
 800907a:	b933      	cbnz	r3, 800908a <_free_r+0x32>
 800907c:	6063      	str	r3, [r4, #4]
 800907e:	6014      	str	r4, [r2, #0]
 8009080:	b003      	add	sp, #12
 8009082:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009086:	f7ff bc63 	b.w	8008950 <__malloc_unlock>
 800908a:	42a3      	cmp	r3, r4
 800908c:	d90b      	bls.n	80090a6 <_free_r+0x4e>
 800908e:	6821      	ldr	r1, [r4, #0]
 8009090:	1862      	adds	r2, r4, r1
 8009092:	4293      	cmp	r3, r2
 8009094:	bf04      	itt	eq
 8009096:	681a      	ldreq	r2, [r3, #0]
 8009098:	685b      	ldreq	r3, [r3, #4]
 800909a:	6063      	str	r3, [r4, #4]
 800909c:	bf04      	itt	eq
 800909e:	1852      	addeq	r2, r2, r1
 80090a0:	6022      	streq	r2, [r4, #0]
 80090a2:	602c      	str	r4, [r5, #0]
 80090a4:	e7ec      	b.n	8009080 <_free_r+0x28>
 80090a6:	461a      	mov	r2, r3
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	b10b      	cbz	r3, 80090b0 <_free_r+0x58>
 80090ac:	42a3      	cmp	r3, r4
 80090ae:	d9fa      	bls.n	80090a6 <_free_r+0x4e>
 80090b0:	6811      	ldr	r1, [r2, #0]
 80090b2:	1855      	adds	r5, r2, r1
 80090b4:	42a5      	cmp	r5, r4
 80090b6:	d10b      	bne.n	80090d0 <_free_r+0x78>
 80090b8:	6824      	ldr	r4, [r4, #0]
 80090ba:	4421      	add	r1, r4
 80090bc:	1854      	adds	r4, r2, r1
 80090be:	42a3      	cmp	r3, r4
 80090c0:	6011      	str	r1, [r2, #0]
 80090c2:	d1dd      	bne.n	8009080 <_free_r+0x28>
 80090c4:	681c      	ldr	r4, [r3, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	6053      	str	r3, [r2, #4]
 80090ca:	4421      	add	r1, r4
 80090cc:	6011      	str	r1, [r2, #0]
 80090ce:	e7d7      	b.n	8009080 <_free_r+0x28>
 80090d0:	d902      	bls.n	80090d8 <_free_r+0x80>
 80090d2:	230c      	movs	r3, #12
 80090d4:	6003      	str	r3, [r0, #0]
 80090d6:	e7d3      	b.n	8009080 <_free_r+0x28>
 80090d8:	6825      	ldr	r5, [r4, #0]
 80090da:	1961      	adds	r1, r4, r5
 80090dc:	428b      	cmp	r3, r1
 80090de:	bf04      	itt	eq
 80090e0:	6819      	ldreq	r1, [r3, #0]
 80090e2:	685b      	ldreq	r3, [r3, #4]
 80090e4:	6063      	str	r3, [r4, #4]
 80090e6:	bf04      	itt	eq
 80090e8:	1949      	addeq	r1, r1, r5
 80090ea:	6021      	streq	r1, [r4, #0]
 80090ec:	6054      	str	r4, [r2, #4]
 80090ee:	e7c7      	b.n	8009080 <_free_r+0x28>
 80090f0:	b003      	add	sp, #12
 80090f2:	bd30      	pop	{r4, r5, pc}
 80090f4:	20000204 	.word	0x20000204

080090f8 <__ssputs_r>:
 80090f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090fc:	688e      	ldr	r6, [r1, #8]
 80090fe:	429e      	cmp	r6, r3
 8009100:	4682      	mov	sl, r0
 8009102:	460c      	mov	r4, r1
 8009104:	4690      	mov	r8, r2
 8009106:	461f      	mov	r7, r3
 8009108:	d838      	bhi.n	800917c <__ssputs_r+0x84>
 800910a:	898a      	ldrh	r2, [r1, #12]
 800910c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009110:	d032      	beq.n	8009178 <__ssputs_r+0x80>
 8009112:	6825      	ldr	r5, [r4, #0]
 8009114:	6909      	ldr	r1, [r1, #16]
 8009116:	eba5 0901 	sub.w	r9, r5, r1
 800911a:	6965      	ldr	r5, [r4, #20]
 800911c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009120:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009124:	3301      	adds	r3, #1
 8009126:	444b      	add	r3, r9
 8009128:	106d      	asrs	r5, r5, #1
 800912a:	429d      	cmp	r5, r3
 800912c:	bf38      	it	cc
 800912e:	461d      	movcc	r5, r3
 8009130:	0553      	lsls	r3, r2, #21
 8009132:	d531      	bpl.n	8009198 <__ssputs_r+0xa0>
 8009134:	4629      	mov	r1, r5
 8009136:	f7fe f87d 	bl	8007234 <_malloc_r>
 800913a:	4606      	mov	r6, r0
 800913c:	b950      	cbnz	r0, 8009154 <__ssputs_r+0x5c>
 800913e:	230c      	movs	r3, #12
 8009140:	f8ca 3000 	str.w	r3, [sl]
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914a:	81a3      	strh	r3, [r4, #12]
 800914c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009154:	6921      	ldr	r1, [r4, #16]
 8009156:	464a      	mov	r2, r9
 8009158:	f7ff fbe6 	bl	8008928 <memcpy>
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	6126      	str	r6, [r4, #16]
 800916a:	6165      	str	r5, [r4, #20]
 800916c:	444e      	add	r6, r9
 800916e:	eba5 0509 	sub.w	r5, r5, r9
 8009172:	6026      	str	r6, [r4, #0]
 8009174:	60a5      	str	r5, [r4, #8]
 8009176:	463e      	mov	r6, r7
 8009178:	42be      	cmp	r6, r7
 800917a:	d900      	bls.n	800917e <__ssputs_r+0x86>
 800917c:	463e      	mov	r6, r7
 800917e:	4632      	mov	r2, r6
 8009180:	6820      	ldr	r0, [r4, #0]
 8009182:	4641      	mov	r1, r8
 8009184:	f000 f959 	bl	800943a <memmove>
 8009188:	68a3      	ldr	r3, [r4, #8]
 800918a:	6822      	ldr	r2, [r4, #0]
 800918c:	1b9b      	subs	r3, r3, r6
 800918e:	4432      	add	r2, r6
 8009190:	60a3      	str	r3, [r4, #8]
 8009192:	6022      	str	r2, [r4, #0]
 8009194:	2000      	movs	r0, #0
 8009196:	e7db      	b.n	8009150 <__ssputs_r+0x58>
 8009198:	462a      	mov	r2, r5
 800919a:	f000 f968 	bl	800946e <_realloc_r>
 800919e:	4606      	mov	r6, r0
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d1e1      	bne.n	8009168 <__ssputs_r+0x70>
 80091a4:	6921      	ldr	r1, [r4, #16]
 80091a6:	4650      	mov	r0, sl
 80091a8:	f7ff ff56 	bl	8009058 <_free_r>
 80091ac:	e7c7      	b.n	800913e <__ssputs_r+0x46>
	...

080091b0 <_svfiprintf_r>:
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	4698      	mov	r8, r3
 80091b6:	898b      	ldrh	r3, [r1, #12]
 80091b8:	061b      	lsls	r3, r3, #24
 80091ba:	b09d      	sub	sp, #116	; 0x74
 80091bc:	4607      	mov	r7, r0
 80091be:	460d      	mov	r5, r1
 80091c0:	4614      	mov	r4, r2
 80091c2:	d50e      	bpl.n	80091e2 <_svfiprintf_r+0x32>
 80091c4:	690b      	ldr	r3, [r1, #16]
 80091c6:	b963      	cbnz	r3, 80091e2 <_svfiprintf_r+0x32>
 80091c8:	2140      	movs	r1, #64	; 0x40
 80091ca:	f7fe f833 	bl	8007234 <_malloc_r>
 80091ce:	6028      	str	r0, [r5, #0]
 80091d0:	6128      	str	r0, [r5, #16]
 80091d2:	b920      	cbnz	r0, 80091de <_svfiprintf_r+0x2e>
 80091d4:	230c      	movs	r3, #12
 80091d6:	603b      	str	r3, [r7, #0]
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091dc:	e0d1      	b.n	8009382 <_svfiprintf_r+0x1d2>
 80091de:	2340      	movs	r3, #64	; 0x40
 80091e0:	616b      	str	r3, [r5, #20]
 80091e2:	2300      	movs	r3, #0
 80091e4:	9309      	str	r3, [sp, #36]	; 0x24
 80091e6:	2320      	movs	r3, #32
 80091e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80091f0:	2330      	movs	r3, #48	; 0x30
 80091f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800939c <_svfiprintf_r+0x1ec>
 80091f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091fa:	f04f 0901 	mov.w	r9, #1
 80091fe:	4623      	mov	r3, r4
 8009200:	469a      	mov	sl, r3
 8009202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009206:	b10a      	cbz	r2, 800920c <_svfiprintf_r+0x5c>
 8009208:	2a25      	cmp	r2, #37	; 0x25
 800920a:	d1f9      	bne.n	8009200 <_svfiprintf_r+0x50>
 800920c:	ebba 0b04 	subs.w	fp, sl, r4
 8009210:	d00b      	beq.n	800922a <_svfiprintf_r+0x7a>
 8009212:	465b      	mov	r3, fp
 8009214:	4622      	mov	r2, r4
 8009216:	4629      	mov	r1, r5
 8009218:	4638      	mov	r0, r7
 800921a:	f7ff ff6d 	bl	80090f8 <__ssputs_r>
 800921e:	3001      	adds	r0, #1
 8009220:	f000 80aa 	beq.w	8009378 <_svfiprintf_r+0x1c8>
 8009224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009226:	445a      	add	r2, fp
 8009228:	9209      	str	r2, [sp, #36]	; 0x24
 800922a:	f89a 3000 	ldrb.w	r3, [sl]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 80a2 	beq.w	8009378 <_svfiprintf_r+0x1c8>
 8009234:	2300      	movs	r3, #0
 8009236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800923a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800923e:	f10a 0a01 	add.w	sl, sl, #1
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	9307      	str	r3, [sp, #28]
 8009246:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800924a:	931a      	str	r3, [sp, #104]	; 0x68
 800924c:	4654      	mov	r4, sl
 800924e:	2205      	movs	r2, #5
 8009250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009254:	4851      	ldr	r0, [pc, #324]	; (800939c <_svfiprintf_r+0x1ec>)
 8009256:	f7f6 ffe3 	bl	8000220 <memchr>
 800925a:	9a04      	ldr	r2, [sp, #16]
 800925c:	b9d8      	cbnz	r0, 8009296 <_svfiprintf_r+0xe6>
 800925e:	06d0      	lsls	r0, r2, #27
 8009260:	bf44      	itt	mi
 8009262:	2320      	movmi	r3, #32
 8009264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009268:	0711      	lsls	r1, r2, #28
 800926a:	bf44      	itt	mi
 800926c:	232b      	movmi	r3, #43	; 0x2b
 800926e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009272:	f89a 3000 	ldrb.w	r3, [sl]
 8009276:	2b2a      	cmp	r3, #42	; 0x2a
 8009278:	d015      	beq.n	80092a6 <_svfiprintf_r+0xf6>
 800927a:	9a07      	ldr	r2, [sp, #28]
 800927c:	4654      	mov	r4, sl
 800927e:	2000      	movs	r0, #0
 8009280:	f04f 0c0a 	mov.w	ip, #10
 8009284:	4621      	mov	r1, r4
 8009286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800928a:	3b30      	subs	r3, #48	; 0x30
 800928c:	2b09      	cmp	r3, #9
 800928e:	d94e      	bls.n	800932e <_svfiprintf_r+0x17e>
 8009290:	b1b0      	cbz	r0, 80092c0 <_svfiprintf_r+0x110>
 8009292:	9207      	str	r2, [sp, #28]
 8009294:	e014      	b.n	80092c0 <_svfiprintf_r+0x110>
 8009296:	eba0 0308 	sub.w	r3, r0, r8
 800929a:	fa09 f303 	lsl.w	r3, r9, r3
 800929e:	4313      	orrs	r3, r2
 80092a0:	9304      	str	r3, [sp, #16]
 80092a2:	46a2      	mov	sl, r4
 80092a4:	e7d2      	b.n	800924c <_svfiprintf_r+0x9c>
 80092a6:	9b03      	ldr	r3, [sp, #12]
 80092a8:	1d19      	adds	r1, r3, #4
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	9103      	str	r1, [sp, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	bfbb      	ittet	lt
 80092b2:	425b      	neglt	r3, r3
 80092b4:	f042 0202 	orrlt.w	r2, r2, #2
 80092b8:	9307      	strge	r3, [sp, #28]
 80092ba:	9307      	strlt	r3, [sp, #28]
 80092bc:	bfb8      	it	lt
 80092be:	9204      	strlt	r2, [sp, #16]
 80092c0:	7823      	ldrb	r3, [r4, #0]
 80092c2:	2b2e      	cmp	r3, #46	; 0x2e
 80092c4:	d10c      	bne.n	80092e0 <_svfiprintf_r+0x130>
 80092c6:	7863      	ldrb	r3, [r4, #1]
 80092c8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ca:	d135      	bne.n	8009338 <_svfiprintf_r+0x188>
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	1d1a      	adds	r2, r3, #4
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	9203      	str	r2, [sp, #12]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	bfb8      	it	lt
 80092d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80092dc:	3402      	adds	r4, #2
 80092de:	9305      	str	r3, [sp, #20]
 80092e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093ac <_svfiprintf_r+0x1fc>
 80092e4:	7821      	ldrb	r1, [r4, #0]
 80092e6:	2203      	movs	r2, #3
 80092e8:	4650      	mov	r0, sl
 80092ea:	f7f6 ff99 	bl	8000220 <memchr>
 80092ee:	b140      	cbz	r0, 8009302 <_svfiprintf_r+0x152>
 80092f0:	2340      	movs	r3, #64	; 0x40
 80092f2:	eba0 000a 	sub.w	r0, r0, sl
 80092f6:	fa03 f000 	lsl.w	r0, r3, r0
 80092fa:	9b04      	ldr	r3, [sp, #16]
 80092fc:	4303      	orrs	r3, r0
 80092fe:	3401      	adds	r4, #1
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009306:	4826      	ldr	r0, [pc, #152]	; (80093a0 <_svfiprintf_r+0x1f0>)
 8009308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800930c:	2206      	movs	r2, #6
 800930e:	f7f6 ff87 	bl	8000220 <memchr>
 8009312:	2800      	cmp	r0, #0
 8009314:	d038      	beq.n	8009388 <_svfiprintf_r+0x1d8>
 8009316:	4b23      	ldr	r3, [pc, #140]	; (80093a4 <_svfiprintf_r+0x1f4>)
 8009318:	bb1b      	cbnz	r3, 8009362 <_svfiprintf_r+0x1b2>
 800931a:	9b03      	ldr	r3, [sp, #12]
 800931c:	3307      	adds	r3, #7
 800931e:	f023 0307 	bic.w	r3, r3, #7
 8009322:	3308      	adds	r3, #8
 8009324:	9303      	str	r3, [sp, #12]
 8009326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009328:	4433      	add	r3, r6
 800932a:	9309      	str	r3, [sp, #36]	; 0x24
 800932c:	e767      	b.n	80091fe <_svfiprintf_r+0x4e>
 800932e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009332:	460c      	mov	r4, r1
 8009334:	2001      	movs	r0, #1
 8009336:	e7a5      	b.n	8009284 <_svfiprintf_r+0xd4>
 8009338:	2300      	movs	r3, #0
 800933a:	3401      	adds	r4, #1
 800933c:	9305      	str	r3, [sp, #20]
 800933e:	4619      	mov	r1, r3
 8009340:	f04f 0c0a 	mov.w	ip, #10
 8009344:	4620      	mov	r0, r4
 8009346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800934a:	3a30      	subs	r2, #48	; 0x30
 800934c:	2a09      	cmp	r2, #9
 800934e:	d903      	bls.n	8009358 <_svfiprintf_r+0x1a8>
 8009350:	2b00      	cmp	r3, #0
 8009352:	d0c5      	beq.n	80092e0 <_svfiprintf_r+0x130>
 8009354:	9105      	str	r1, [sp, #20]
 8009356:	e7c3      	b.n	80092e0 <_svfiprintf_r+0x130>
 8009358:	fb0c 2101 	mla	r1, ip, r1, r2
 800935c:	4604      	mov	r4, r0
 800935e:	2301      	movs	r3, #1
 8009360:	e7f0      	b.n	8009344 <_svfiprintf_r+0x194>
 8009362:	ab03      	add	r3, sp, #12
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	462a      	mov	r2, r5
 8009368:	4b0f      	ldr	r3, [pc, #60]	; (80093a8 <_svfiprintf_r+0x1f8>)
 800936a:	a904      	add	r1, sp, #16
 800936c:	4638      	mov	r0, r7
 800936e:	f7fe f85b 	bl	8007428 <_printf_float>
 8009372:	1c42      	adds	r2, r0, #1
 8009374:	4606      	mov	r6, r0
 8009376:	d1d6      	bne.n	8009326 <_svfiprintf_r+0x176>
 8009378:	89ab      	ldrh	r3, [r5, #12]
 800937a:	065b      	lsls	r3, r3, #25
 800937c:	f53f af2c 	bmi.w	80091d8 <_svfiprintf_r+0x28>
 8009380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009382:	b01d      	add	sp, #116	; 0x74
 8009384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009388:	ab03      	add	r3, sp, #12
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	462a      	mov	r2, r5
 800938e:	4b06      	ldr	r3, [pc, #24]	; (80093a8 <_svfiprintf_r+0x1f8>)
 8009390:	a904      	add	r1, sp, #16
 8009392:	4638      	mov	r0, r7
 8009394:	f7fe faec 	bl	8007970 <_printf_i>
 8009398:	e7eb      	b.n	8009372 <_svfiprintf_r+0x1c2>
 800939a:	bf00      	nop
 800939c:	0800a1a4 	.word	0x0800a1a4
 80093a0:	0800a1ae 	.word	0x0800a1ae
 80093a4:	08007429 	.word	0x08007429
 80093a8:	080090f9 	.word	0x080090f9
 80093ac:	0800a1aa 	.word	0x0800a1aa

080093b0 <__assert_func>:
 80093b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093b2:	4614      	mov	r4, r2
 80093b4:	461a      	mov	r2, r3
 80093b6:	4b09      	ldr	r3, [pc, #36]	; (80093dc <__assert_func+0x2c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4605      	mov	r5, r0
 80093bc:	68d8      	ldr	r0, [r3, #12]
 80093be:	b14c      	cbz	r4, 80093d4 <__assert_func+0x24>
 80093c0:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <__assert_func+0x30>)
 80093c2:	9100      	str	r1, [sp, #0]
 80093c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093c8:	4906      	ldr	r1, [pc, #24]	; (80093e4 <__assert_func+0x34>)
 80093ca:	462b      	mov	r3, r5
 80093cc:	f000 f80e 	bl	80093ec <fiprintf>
 80093d0:	f000 fa9a 	bl	8009908 <abort>
 80093d4:	4b04      	ldr	r3, [pc, #16]	; (80093e8 <__assert_func+0x38>)
 80093d6:	461c      	mov	r4, r3
 80093d8:	e7f3      	b.n	80093c2 <__assert_func+0x12>
 80093da:	bf00      	nop
 80093dc:	20000010 	.word	0x20000010
 80093e0:	0800a1b5 	.word	0x0800a1b5
 80093e4:	0800a1c2 	.word	0x0800a1c2
 80093e8:	0800a1f0 	.word	0x0800a1f0

080093ec <fiprintf>:
 80093ec:	b40e      	push	{r1, r2, r3}
 80093ee:	b503      	push	{r0, r1, lr}
 80093f0:	4601      	mov	r1, r0
 80093f2:	ab03      	add	r3, sp, #12
 80093f4:	4805      	ldr	r0, [pc, #20]	; (800940c <fiprintf+0x20>)
 80093f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093fa:	6800      	ldr	r0, [r0, #0]
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	f000 f885 	bl	800950c <_vfiprintf_r>
 8009402:	b002      	add	sp, #8
 8009404:	f85d eb04 	ldr.w	lr, [sp], #4
 8009408:	b003      	add	sp, #12
 800940a:	4770      	bx	lr
 800940c:	20000010 	.word	0x20000010

08009410 <__retarget_lock_init_recursive>:
 8009410:	4770      	bx	lr

08009412 <__retarget_lock_acquire_recursive>:
 8009412:	4770      	bx	lr

08009414 <__retarget_lock_release_recursive>:
 8009414:	4770      	bx	lr

08009416 <__ascii_mbtowc>:
 8009416:	b082      	sub	sp, #8
 8009418:	b901      	cbnz	r1, 800941c <__ascii_mbtowc+0x6>
 800941a:	a901      	add	r1, sp, #4
 800941c:	b142      	cbz	r2, 8009430 <__ascii_mbtowc+0x1a>
 800941e:	b14b      	cbz	r3, 8009434 <__ascii_mbtowc+0x1e>
 8009420:	7813      	ldrb	r3, [r2, #0]
 8009422:	600b      	str	r3, [r1, #0]
 8009424:	7812      	ldrb	r2, [r2, #0]
 8009426:	1e10      	subs	r0, r2, #0
 8009428:	bf18      	it	ne
 800942a:	2001      	movne	r0, #1
 800942c:	b002      	add	sp, #8
 800942e:	4770      	bx	lr
 8009430:	4610      	mov	r0, r2
 8009432:	e7fb      	b.n	800942c <__ascii_mbtowc+0x16>
 8009434:	f06f 0001 	mvn.w	r0, #1
 8009438:	e7f8      	b.n	800942c <__ascii_mbtowc+0x16>

0800943a <memmove>:
 800943a:	4288      	cmp	r0, r1
 800943c:	b510      	push	{r4, lr}
 800943e:	eb01 0402 	add.w	r4, r1, r2
 8009442:	d902      	bls.n	800944a <memmove+0x10>
 8009444:	4284      	cmp	r4, r0
 8009446:	4623      	mov	r3, r4
 8009448:	d807      	bhi.n	800945a <memmove+0x20>
 800944a:	1e43      	subs	r3, r0, #1
 800944c:	42a1      	cmp	r1, r4
 800944e:	d008      	beq.n	8009462 <memmove+0x28>
 8009450:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009454:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009458:	e7f8      	b.n	800944c <memmove+0x12>
 800945a:	4402      	add	r2, r0
 800945c:	4601      	mov	r1, r0
 800945e:	428a      	cmp	r2, r1
 8009460:	d100      	bne.n	8009464 <memmove+0x2a>
 8009462:	bd10      	pop	{r4, pc}
 8009464:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009468:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800946c:	e7f7      	b.n	800945e <memmove+0x24>

0800946e <_realloc_r>:
 800946e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009470:	4607      	mov	r7, r0
 8009472:	4614      	mov	r4, r2
 8009474:	460e      	mov	r6, r1
 8009476:	b921      	cbnz	r1, 8009482 <_realloc_r+0x14>
 8009478:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800947c:	4611      	mov	r1, r2
 800947e:	f7fd bed9 	b.w	8007234 <_malloc_r>
 8009482:	b922      	cbnz	r2, 800948e <_realloc_r+0x20>
 8009484:	f7ff fde8 	bl	8009058 <_free_r>
 8009488:	4625      	mov	r5, r4
 800948a:	4628      	mov	r0, r5
 800948c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800948e:	f000 fc5f 	bl	8009d50 <_malloc_usable_size_r>
 8009492:	42a0      	cmp	r0, r4
 8009494:	d20f      	bcs.n	80094b6 <_realloc_r+0x48>
 8009496:	4621      	mov	r1, r4
 8009498:	4638      	mov	r0, r7
 800949a:	f7fd fecb 	bl	8007234 <_malloc_r>
 800949e:	4605      	mov	r5, r0
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d0f2      	beq.n	800948a <_realloc_r+0x1c>
 80094a4:	4631      	mov	r1, r6
 80094a6:	4622      	mov	r2, r4
 80094a8:	f7ff fa3e 	bl	8008928 <memcpy>
 80094ac:	4631      	mov	r1, r6
 80094ae:	4638      	mov	r0, r7
 80094b0:	f7ff fdd2 	bl	8009058 <_free_r>
 80094b4:	e7e9      	b.n	800948a <_realloc_r+0x1c>
 80094b6:	4635      	mov	r5, r6
 80094b8:	e7e7      	b.n	800948a <_realloc_r+0x1c>

080094ba <__sfputc_r>:
 80094ba:	6893      	ldr	r3, [r2, #8]
 80094bc:	3b01      	subs	r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	b410      	push	{r4}
 80094c2:	6093      	str	r3, [r2, #8]
 80094c4:	da08      	bge.n	80094d8 <__sfputc_r+0x1e>
 80094c6:	6994      	ldr	r4, [r2, #24]
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	db01      	blt.n	80094d0 <__sfputc_r+0x16>
 80094cc:	290a      	cmp	r1, #10
 80094ce:	d103      	bne.n	80094d8 <__sfputc_r+0x1e>
 80094d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094d4:	f000 b94a 	b.w	800976c <__swbuf_r>
 80094d8:	6813      	ldr	r3, [r2, #0]
 80094da:	1c58      	adds	r0, r3, #1
 80094dc:	6010      	str	r0, [r2, #0]
 80094de:	7019      	strb	r1, [r3, #0]
 80094e0:	4608      	mov	r0, r1
 80094e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <__sfputs_r>:
 80094e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ea:	4606      	mov	r6, r0
 80094ec:	460f      	mov	r7, r1
 80094ee:	4614      	mov	r4, r2
 80094f0:	18d5      	adds	r5, r2, r3
 80094f2:	42ac      	cmp	r4, r5
 80094f4:	d101      	bne.n	80094fa <__sfputs_r+0x12>
 80094f6:	2000      	movs	r0, #0
 80094f8:	e007      	b.n	800950a <__sfputs_r+0x22>
 80094fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fe:	463a      	mov	r2, r7
 8009500:	4630      	mov	r0, r6
 8009502:	f7ff ffda 	bl	80094ba <__sfputc_r>
 8009506:	1c43      	adds	r3, r0, #1
 8009508:	d1f3      	bne.n	80094f2 <__sfputs_r+0xa>
 800950a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800950c <_vfiprintf_r>:
 800950c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	460d      	mov	r5, r1
 8009512:	b09d      	sub	sp, #116	; 0x74
 8009514:	4614      	mov	r4, r2
 8009516:	4698      	mov	r8, r3
 8009518:	4606      	mov	r6, r0
 800951a:	b118      	cbz	r0, 8009524 <_vfiprintf_r+0x18>
 800951c:	6983      	ldr	r3, [r0, #24]
 800951e:	b90b      	cbnz	r3, 8009524 <_vfiprintf_r+0x18>
 8009520:	f000 fb14 	bl	8009b4c <__sinit>
 8009524:	4b89      	ldr	r3, [pc, #548]	; (800974c <_vfiprintf_r+0x240>)
 8009526:	429d      	cmp	r5, r3
 8009528:	d11b      	bne.n	8009562 <_vfiprintf_r+0x56>
 800952a:	6875      	ldr	r5, [r6, #4]
 800952c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800952e:	07d9      	lsls	r1, r3, #31
 8009530:	d405      	bmi.n	800953e <_vfiprintf_r+0x32>
 8009532:	89ab      	ldrh	r3, [r5, #12]
 8009534:	059a      	lsls	r2, r3, #22
 8009536:	d402      	bmi.n	800953e <_vfiprintf_r+0x32>
 8009538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800953a:	f7ff ff6a 	bl	8009412 <__retarget_lock_acquire_recursive>
 800953e:	89ab      	ldrh	r3, [r5, #12]
 8009540:	071b      	lsls	r3, r3, #28
 8009542:	d501      	bpl.n	8009548 <_vfiprintf_r+0x3c>
 8009544:	692b      	ldr	r3, [r5, #16]
 8009546:	b9eb      	cbnz	r3, 8009584 <_vfiprintf_r+0x78>
 8009548:	4629      	mov	r1, r5
 800954a:	4630      	mov	r0, r6
 800954c:	f000 f96e 	bl	800982c <__swsetup_r>
 8009550:	b1c0      	cbz	r0, 8009584 <_vfiprintf_r+0x78>
 8009552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009554:	07dc      	lsls	r4, r3, #31
 8009556:	d50e      	bpl.n	8009576 <_vfiprintf_r+0x6a>
 8009558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800955c:	b01d      	add	sp, #116	; 0x74
 800955e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009562:	4b7b      	ldr	r3, [pc, #492]	; (8009750 <_vfiprintf_r+0x244>)
 8009564:	429d      	cmp	r5, r3
 8009566:	d101      	bne.n	800956c <_vfiprintf_r+0x60>
 8009568:	68b5      	ldr	r5, [r6, #8]
 800956a:	e7df      	b.n	800952c <_vfiprintf_r+0x20>
 800956c:	4b79      	ldr	r3, [pc, #484]	; (8009754 <_vfiprintf_r+0x248>)
 800956e:	429d      	cmp	r5, r3
 8009570:	bf08      	it	eq
 8009572:	68f5      	ldreq	r5, [r6, #12]
 8009574:	e7da      	b.n	800952c <_vfiprintf_r+0x20>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	0598      	lsls	r0, r3, #22
 800957a:	d4ed      	bmi.n	8009558 <_vfiprintf_r+0x4c>
 800957c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800957e:	f7ff ff49 	bl	8009414 <__retarget_lock_release_recursive>
 8009582:	e7e9      	b.n	8009558 <_vfiprintf_r+0x4c>
 8009584:	2300      	movs	r3, #0
 8009586:	9309      	str	r3, [sp, #36]	; 0x24
 8009588:	2320      	movs	r3, #32
 800958a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800958e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009592:	2330      	movs	r3, #48	; 0x30
 8009594:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009758 <_vfiprintf_r+0x24c>
 8009598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800959c:	f04f 0901 	mov.w	r9, #1
 80095a0:	4623      	mov	r3, r4
 80095a2:	469a      	mov	sl, r3
 80095a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095a8:	b10a      	cbz	r2, 80095ae <_vfiprintf_r+0xa2>
 80095aa:	2a25      	cmp	r2, #37	; 0x25
 80095ac:	d1f9      	bne.n	80095a2 <_vfiprintf_r+0x96>
 80095ae:	ebba 0b04 	subs.w	fp, sl, r4
 80095b2:	d00b      	beq.n	80095cc <_vfiprintf_r+0xc0>
 80095b4:	465b      	mov	r3, fp
 80095b6:	4622      	mov	r2, r4
 80095b8:	4629      	mov	r1, r5
 80095ba:	4630      	mov	r0, r6
 80095bc:	f7ff ff94 	bl	80094e8 <__sfputs_r>
 80095c0:	3001      	adds	r0, #1
 80095c2:	f000 80aa 	beq.w	800971a <_vfiprintf_r+0x20e>
 80095c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095c8:	445a      	add	r2, fp
 80095ca:	9209      	str	r2, [sp, #36]	; 0x24
 80095cc:	f89a 3000 	ldrb.w	r3, [sl]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 80a2 	beq.w	800971a <_vfiprintf_r+0x20e>
 80095d6:	2300      	movs	r3, #0
 80095d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095e0:	f10a 0a01 	add.w	sl, sl, #1
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	9307      	str	r3, [sp, #28]
 80095e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095ec:	931a      	str	r3, [sp, #104]	; 0x68
 80095ee:	4654      	mov	r4, sl
 80095f0:	2205      	movs	r2, #5
 80095f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f6:	4858      	ldr	r0, [pc, #352]	; (8009758 <_vfiprintf_r+0x24c>)
 80095f8:	f7f6 fe12 	bl	8000220 <memchr>
 80095fc:	9a04      	ldr	r2, [sp, #16]
 80095fe:	b9d8      	cbnz	r0, 8009638 <_vfiprintf_r+0x12c>
 8009600:	06d1      	lsls	r1, r2, #27
 8009602:	bf44      	itt	mi
 8009604:	2320      	movmi	r3, #32
 8009606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800960a:	0713      	lsls	r3, r2, #28
 800960c:	bf44      	itt	mi
 800960e:	232b      	movmi	r3, #43	; 0x2b
 8009610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009614:	f89a 3000 	ldrb.w	r3, [sl]
 8009618:	2b2a      	cmp	r3, #42	; 0x2a
 800961a:	d015      	beq.n	8009648 <_vfiprintf_r+0x13c>
 800961c:	9a07      	ldr	r2, [sp, #28]
 800961e:	4654      	mov	r4, sl
 8009620:	2000      	movs	r0, #0
 8009622:	f04f 0c0a 	mov.w	ip, #10
 8009626:	4621      	mov	r1, r4
 8009628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800962c:	3b30      	subs	r3, #48	; 0x30
 800962e:	2b09      	cmp	r3, #9
 8009630:	d94e      	bls.n	80096d0 <_vfiprintf_r+0x1c4>
 8009632:	b1b0      	cbz	r0, 8009662 <_vfiprintf_r+0x156>
 8009634:	9207      	str	r2, [sp, #28]
 8009636:	e014      	b.n	8009662 <_vfiprintf_r+0x156>
 8009638:	eba0 0308 	sub.w	r3, r0, r8
 800963c:	fa09 f303 	lsl.w	r3, r9, r3
 8009640:	4313      	orrs	r3, r2
 8009642:	9304      	str	r3, [sp, #16]
 8009644:	46a2      	mov	sl, r4
 8009646:	e7d2      	b.n	80095ee <_vfiprintf_r+0xe2>
 8009648:	9b03      	ldr	r3, [sp, #12]
 800964a:	1d19      	adds	r1, r3, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	9103      	str	r1, [sp, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	bfbb      	ittet	lt
 8009654:	425b      	neglt	r3, r3
 8009656:	f042 0202 	orrlt.w	r2, r2, #2
 800965a:	9307      	strge	r3, [sp, #28]
 800965c:	9307      	strlt	r3, [sp, #28]
 800965e:	bfb8      	it	lt
 8009660:	9204      	strlt	r2, [sp, #16]
 8009662:	7823      	ldrb	r3, [r4, #0]
 8009664:	2b2e      	cmp	r3, #46	; 0x2e
 8009666:	d10c      	bne.n	8009682 <_vfiprintf_r+0x176>
 8009668:	7863      	ldrb	r3, [r4, #1]
 800966a:	2b2a      	cmp	r3, #42	; 0x2a
 800966c:	d135      	bne.n	80096da <_vfiprintf_r+0x1ce>
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	1d1a      	adds	r2, r3, #4
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	9203      	str	r2, [sp, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	bfb8      	it	lt
 800967a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800967e:	3402      	adds	r4, #2
 8009680:	9305      	str	r3, [sp, #20]
 8009682:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009768 <_vfiprintf_r+0x25c>
 8009686:	7821      	ldrb	r1, [r4, #0]
 8009688:	2203      	movs	r2, #3
 800968a:	4650      	mov	r0, sl
 800968c:	f7f6 fdc8 	bl	8000220 <memchr>
 8009690:	b140      	cbz	r0, 80096a4 <_vfiprintf_r+0x198>
 8009692:	2340      	movs	r3, #64	; 0x40
 8009694:	eba0 000a 	sub.w	r0, r0, sl
 8009698:	fa03 f000 	lsl.w	r0, r3, r0
 800969c:	9b04      	ldr	r3, [sp, #16]
 800969e:	4303      	orrs	r3, r0
 80096a0:	3401      	adds	r4, #1
 80096a2:	9304      	str	r3, [sp, #16]
 80096a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a8:	482c      	ldr	r0, [pc, #176]	; (800975c <_vfiprintf_r+0x250>)
 80096aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096ae:	2206      	movs	r2, #6
 80096b0:	f7f6 fdb6 	bl	8000220 <memchr>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d03f      	beq.n	8009738 <_vfiprintf_r+0x22c>
 80096b8:	4b29      	ldr	r3, [pc, #164]	; (8009760 <_vfiprintf_r+0x254>)
 80096ba:	bb1b      	cbnz	r3, 8009704 <_vfiprintf_r+0x1f8>
 80096bc:	9b03      	ldr	r3, [sp, #12]
 80096be:	3307      	adds	r3, #7
 80096c0:	f023 0307 	bic.w	r3, r3, #7
 80096c4:	3308      	adds	r3, #8
 80096c6:	9303      	str	r3, [sp, #12]
 80096c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ca:	443b      	add	r3, r7
 80096cc:	9309      	str	r3, [sp, #36]	; 0x24
 80096ce:	e767      	b.n	80095a0 <_vfiprintf_r+0x94>
 80096d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80096d4:	460c      	mov	r4, r1
 80096d6:	2001      	movs	r0, #1
 80096d8:	e7a5      	b.n	8009626 <_vfiprintf_r+0x11a>
 80096da:	2300      	movs	r3, #0
 80096dc:	3401      	adds	r4, #1
 80096de:	9305      	str	r3, [sp, #20]
 80096e0:	4619      	mov	r1, r3
 80096e2:	f04f 0c0a 	mov.w	ip, #10
 80096e6:	4620      	mov	r0, r4
 80096e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096ec:	3a30      	subs	r2, #48	; 0x30
 80096ee:	2a09      	cmp	r2, #9
 80096f0:	d903      	bls.n	80096fa <_vfiprintf_r+0x1ee>
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d0c5      	beq.n	8009682 <_vfiprintf_r+0x176>
 80096f6:	9105      	str	r1, [sp, #20]
 80096f8:	e7c3      	b.n	8009682 <_vfiprintf_r+0x176>
 80096fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80096fe:	4604      	mov	r4, r0
 8009700:	2301      	movs	r3, #1
 8009702:	e7f0      	b.n	80096e6 <_vfiprintf_r+0x1da>
 8009704:	ab03      	add	r3, sp, #12
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	462a      	mov	r2, r5
 800970a:	4b16      	ldr	r3, [pc, #88]	; (8009764 <_vfiprintf_r+0x258>)
 800970c:	a904      	add	r1, sp, #16
 800970e:	4630      	mov	r0, r6
 8009710:	f7fd fe8a 	bl	8007428 <_printf_float>
 8009714:	4607      	mov	r7, r0
 8009716:	1c78      	adds	r0, r7, #1
 8009718:	d1d6      	bne.n	80096c8 <_vfiprintf_r+0x1bc>
 800971a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800971c:	07d9      	lsls	r1, r3, #31
 800971e:	d405      	bmi.n	800972c <_vfiprintf_r+0x220>
 8009720:	89ab      	ldrh	r3, [r5, #12]
 8009722:	059a      	lsls	r2, r3, #22
 8009724:	d402      	bmi.n	800972c <_vfiprintf_r+0x220>
 8009726:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009728:	f7ff fe74 	bl	8009414 <__retarget_lock_release_recursive>
 800972c:	89ab      	ldrh	r3, [r5, #12]
 800972e:	065b      	lsls	r3, r3, #25
 8009730:	f53f af12 	bmi.w	8009558 <_vfiprintf_r+0x4c>
 8009734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009736:	e711      	b.n	800955c <_vfiprintf_r+0x50>
 8009738:	ab03      	add	r3, sp, #12
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	462a      	mov	r2, r5
 800973e:	4b09      	ldr	r3, [pc, #36]	; (8009764 <_vfiprintf_r+0x258>)
 8009740:	a904      	add	r1, sp, #16
 8009742:	4630      	mov	r0, r6
 8009744:	f7fe f914 	bl	8007970 <_printf_i>
 8009748:	e7e4      	b.n	8009714 <_vfiprintf_r+0x208>
 800974a:	bf00      	nop
 800974c:	0800a31c 	.word	0x0800a31c
 8009750:	0800a33c 	.word	0x0800a33c
 8009754:	0800a2fc 	.word	0x0800a2fc
 8009758:	0800a1a4 	.word	0x0800a1a4
 800975c:	0800a1ae 	.word	0x0800a1ae
 8009760:	08007429 	.word	0x08007429
 8009764:	080094e9 	.word	0x080094e9
 8009768:	0800a1aa 	.word	0x0800a1aa

0800976c <__swbuf_r>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	460e      	mov	r6, r1
 8009770:	4614      	mov	r4, r2
 8009772:	4605      	mov	r5, r0
 8009774:	b118      	cbz	r0, 800977e <__swbuf_r+0x12>
 8009776:	6983      	ldr	r3, [r0, #24]
 8009778:	b90b      	cbnz	r3, 800977e <__swbuf_r+0x12>
 800977a:	f000 f9e7 	bl	8009b4c <__sinit>
 800977e:	4b21      	ldr	r3, [pc, #132]	; (8009804 <__swbuf_r+0x98>)
 8009780:	429c      	cmp	r4, r3
 8009782:	d12b      	bne.n	80097dc <__swbuf_r+0x70>
 8009784:	686c      	ldr	r4, [r5, #4]
 8009786:	69a3      	ldr	r3, [r4, #24]
 8009788:	60a3      	str	r3, [r4, #8]
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	071a      	lsls	r2, r3, #28
 800978e:	d52f      	bpl.n	80097f0 <__swbuf_r+0x84>
 8009790:	6923      	ldr	r3, [r4, #16]
 8009792:	b36b      	cbz	r3, 80097f0 <__swbuf_r+0x84>
 8009794:	6923      	ldr	r3, [r4, #16]
 8009796:	6820      	ldr	r0, [r4, #0]
 8009798:	1ac0      	subs	r0, r0, r3
 800979a:	6963      	ldr	r3, [r4, #20]
 800979c:	b2f6      	uxtb	r6, r6
 800979e:	4283      	cmp	r3, r0
 80097a0:	4637      	mov	r7, r6
 80097a2:	dc04      	bgt.n	80097ae <__swbuf_r+0x42>
 80097a4:	4621      	mov	r1, r4
 80097a6:	4628      	mov	r0, r5
 80097a8:	f000 f93c 	bl	8009a24 <_fflush_r>
 80097ac:	bb30      	cbnz	r0, 80097fc <__swbuf_r+0x90>
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	60a3      	str	r3, [r4, #8]
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	1c5a      	adds	r2, r3, #1
 80097b8:	6022      	str	r2, [r4, #0]
 80097ba:	701e      	strb	r6, [r3, #0]
 80097bc:	6963      	ldr	r3, [r4, #20]
 80097be:	3001      	adds	r0, #1
 80097c0:	4283      	cmp	r3, r0
 80097c2:	d004      	beq.n	80097ce <__swbuf_r+0x62>
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	07db      	lsls	r3, r3, #31
 80097c8:	d506      	bpl.n	80097d8 <__swbuf_r+0x6c>
 80097ca:	2e0a      	cmp	r6, #10
 80097cc:	d104      	bne.n	80097d8 <__swbuf_r+0x6c>
 80097ce:	4621      	mov	r1, r4
 80097d0:	4628      	mov	r0, r5
 80097d2:	f000 f927 	bl	8009a24 <_fflush_r>
 80097d6:	b988      	cbnz	r0, 80097fc <__swbuf_r+0x90>
 80097d8:	4638      	mov	r0, r7
 80097da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097dc:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <__swbuf_r+0x9c>)
 80097de:	429c      	cmp	r4, r3
 80097e0:	d101      	bne.n	80097e6 <__swbuf_r+0x7a>
 80097e2:	68ac      	ldr	r4, [r5, #8]
 80097e4:	e7cf      	b.n	8009786 <__swbuf_r+0x1a>
 80097e6:	4b09      	ldr	r3, [pc, #36]	; (800980c <__swbuf_r+0xa0>)
 80097e8:	429c      	cmp	r4, r3
 80097ea:	bf08      	it	eq
 80097ec:	68ec      	ldreq	r4, [r5, #12]
 80097ee:	e7ca      	b.n	8009786 <__swbuf_r+0x1a>
 80097f0:	4621      	mov	r1, r4
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 f81a 	bl	800982c <__swsetup_r>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d0cb      	beq.n	8009794 <__swbuf_r+0x28>
 80097fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009800:	e7ea      	b.n	80097d8 <__swbuf_r+0x6c>
 8009802:	bf00      	nop
 8009804:	0800a31c 	.word	0x0800a31c
 8009808:	0800a33c 	.word	0x0800a33c
 800980c:	0800a2fc 	.word	0x0800a2fc

08009810 <__ascii_wctomb>:
 8009810:	b149      	cbz	r1, 8009826 <__ascii_wctomb+0x16>
 8009812:	2aff      	cmp	r2, #255	; 0xff
 8009814:	bf85      	ittet	hi
 8009816:	238a      	movhi	r3, #138	; 0x8a
 8009818:	6003      	strhi	r3, [r0, #0]
 800981a:	700a      	strbls	r2, [r1, #0]
 800981c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009820:	bf98      	it	ls
 8009822:	2001      	movls	r0, #1
 8009824:	4770      	bx	lr
 8009826:	4608      	mov	r0, r1
 8009828:	4770      	bx	lr
	...

0800982c <__swsetup_r>:
 800982c:	4b32      	ldr	r3, [pc, #200]	; (80098f8 <__swsetup_r+0xcc>)
 800982e:	b570      	push	{r4, r5, r6, lr}
 8009830:	681d      	ldr	r5, [r3, #0]
 8009832:	4606      	mov	r6, r0
 8009834:	460c      	mov	r4, r1
 8009836:	b125      	cbz	r5, 8009842 <__swsetup_r+0x16>
 8009838:	69ab      	ldr	r3, [r5, #24]
 800983a:	b913      	cbnz	r3, 8009842 <__swsetup_r+0x16>
 800983c:	4628      	mov	r0, r5
 800983e:	f000 f985 	bl	8009b4c <__sinit>
 8009842:	4b2e      	ldr	r3, [pc, #184]	; (80098fc <__swsetup_r+0xd0>)
 8009844:	429c      	cmp	r4, r3
 8009846:	d10f      	bne.n	8009868 <__swsetup_r+0x3c>
 8009848:	686c      	ldr	r4, [r5, #4]
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009850:	0719      	lsls	r1, r3, #28
 8009852:	d42c      	bmi.n	80098ae <__swsetup_r+0x82>
 8009854:	06dd      	lsls	r5, r3, #27
 8009856:	d411      	bmi.n	800987c <__swsetup_r+0x50>
 8009858:	2309      	movs	r3, #9
 800985a:	6033      	str	r3, [r6, #0]
 800985c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009866:	e03e      	b.n	80098e6 <__swsetup_r+0xba>
 8009868:	4b25      	ldr	r3, [pc, #148]	; (8009900 <__swsetup_r+0xd4>)
 800986a:	429c      	cmp	r4, r3
 800986c:	d101      	bne.n	8009872 <__swsetup_r+0x46>
 800986e:	68ac      	ldr	r4, [r5, #8]
 8009870:	e7eb      	b.n	800984a <__swsetup_r+0x1e>
 8009872:	4b24      	ldr	r3, [pc, #144]	; (8009904 <__swsetup_r+0xd8>)
 8009874:	429c      	cmp	r4, r3
 8009876:	bf08      	it	eq
 8009878:	68ec      	ldreq	r4, [r5, #12]
 800987a:	e7e6      	b.n	800984a <__swsetup_r+0x1e>
 800987c:	0758      	lsls	r0, r3, #29
 800987e:	d512      	bpl.n	80098a6 <__swsetup_r+0x7a>
 8009880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009882:	b141      	cbz	r1, 8009896 <__swsetup_r+0x6a>
 8009884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009888:	4299      	cmp	r1, r3
 800988a:	d002      	beq.n	8009892 <__swsetup_r+0x66>
 800988c:	4630      	mov	r0, r6
 800988e:	f7ff fbe3 	bl	8009058 <_free_r>
 8009892:	2300      	movs	r3, #0
 8009894:	6363      	str	r3, [r4, #52]	; 0x34
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	2300      	movs	r3, #0
 80098a0:	6063      	str	r3, [r4, #4]
 80098a2:	6923      	ldr	r3, [r4, #16]
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	f043 0308 	orr.w	r3, r3, #8
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	b94b      	cbnz	r3, 80098c6 <__swsetup_r+0x9a>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098bc:	d003      	beq.n	80098c6 <__swsetup_r+0x9a>
 80098be:	4621      	mov	r1, r4
 80098c0:	4630      	mov	r0, r6
 80098c2:	f000 fa05 	bl	8009cd0 <__smakebuf_r>
 80098c6:	89a0      	ldrh	r0, [r4, #12]
 80098c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098cc:	f010 0301 	ands.w	r3, r0, #1
 80098d0:	d00a      	beq.n	80098e8 <__swsetup_r+0xbc>
 80098d2:	2300      	movs	r3, #0
 80098d4:	60a3      	str	r3, [r4, #8]
 80098d6:	6963      	ldr	r3, [r4, #20]
 80098d8:	425b      	negs	r3, r3
 80098da:	61a3      	str	r3, [r4, #24]
 80098dc:	6923      	ldr	r3, [r4, #16]
 80098de:	b943      	cbnz	r3, 80098f2 <__swsetup_r+0xc6>
 80098e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098e4:	d1ba      	bne.n	800985c <__swsetup_r+0x30>
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
 80098e8:	0781      	lsls	r1, r0, #30
 80098ea:	bf58      	it	pl
 80098ec:	6963      	ldrpl	r3, [r4, #20]
 80098ee:	60a3      	str	r3, [r4, #8]
 80098f0:	e7f4      	b.n	80098dc <__swsetup_r+0xb0>
 80098f2:	2000      	movs	r0, #0
 80098f4:	e7f7      	b.n	80098e6 <__swsetup_r+0xba>
 80098f6:	bf00      	nop
 80098f8:	20000010 	.word	0x20000010
 80098fc:	0800a31c 	.word	0x0800a31c
 8009900:	0800a33c 	.word	0x0800a33c
 8009904:	0800a2fc 	.word	0x0800a2fc

08009908 <abort>:
 8009908:	b508      	push	{r3, lr}
 800990a:	2006      	movs	r0, #6
 800990c:	f000 fa50 	bl	8009db0 <raise>
 8009910:	2001      	movs	r0, #1
 8009912:	f7f8 fb8f 	bl	8002034 <_exit>
	...

08009918 <__sflush_r>:
 8009918:	898a      	ldrh	r2, [r1, #12]
 800991a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991e:	4605      	mov	r5, r0
 8009920:	0710      	lsls	r0, r2, #28
 8009922:	460c      	mov	r4, r1
 8009924:	d458      	bmi.n	80099d8 <__sflush_r+0xc0>
 8009926:	684b      	ldr	r3, [r1, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	dc05      	bgt.n	8009938 <__sflush_r+0x20>
 800992c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800992e:	2b00      	cmp	r3, #0
 8009930:	dc02      	bgt.n	8009938 <__sflush_r+0x20>
 8009932:	2000      	movs	r0, #0
 8009934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800993a:	2e00      	cmp	r6, #0
 800993c:	d0f9      	beq.n	8009932 <__sflush_r+0x1a>
 800993e:	2300      	movs	r3, #0
 8009940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009944:	682f      	ldr	r7, [r5, #0]
 8009946:	602b      	str	r3, [r5, #0]
 8009948:	d032      	beq.n	80099b0 <__sflush_r+0x98>
 800994a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	075a      	lsls	r2, r3, #29
 8009950:	d505      	bpl.n	800995e <__sflush_r+0x46>
 8009952:	6863      	ldr	r3, [r4, #4]
 8009954:	1ac0      	subs	r0, r0, r3
 8009956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009958:	b10b      	cbz	r3, 800995e <__sflush_r+0x46>
 800995a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800995c:	1ac0      	subs	r0, r0, r3
 800995e:	2300      	movs	r3, #0
 8009960:	4602      	mov	r2, r0
 8009962:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009964:	6a21      	ldr	r1, [r4, #32]
 8009966:	4628      	mov	r0, r5
 8009968:	47b0      	blx	r6
 800996a:	1c43      	adds	r3, r0, #1
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	d106      	bne.n	800997e <__sflush_r+0x66>
 8009970:	6829      	ldr	r1, [r5, #0]
 8009972:	291d      	cmp	r1, #29
 8009974:	d82c      	bhi.n	80099d0 <__sflush_r+0xb8>
 8009976:	4a2a      	ldr	r2, [pc, #168]	; (8009a20 <__sflush_r+0x108>)
 8009978:	40ca      	lsrs	r2, r1
 800997a:	07d6      	lsls	r6, r2, #31
 800997c:	d528      	bpl.n	80099d0 <__sflush_r+0xb8>
 800997e:	2200      	movs	r2, #0
 8009980:	6062      	str	r2, [r4, #4]
 8009982:	04d9      	lsls	r1, r3, #19
 8009984:	6922      	ldr	r2, [r4, #16]
 8009986:	6022      	str	r2, [r4, #0]
 8009988:	d504      	bpl.n	8009994 <__sflush_r+0x7c>
 800998a:	1c42      	adds	r2, r0, #1
 800998c:	d101      	bne.n	8009992 <__sflush_r+0x7a>
 800998e:	682b      	ldr	r3, [r5, #0]
 8009990:	b903      	cbnz	r3, 8009994 <__sflush_r+0x7c>
 8009992:	6560      	str	r0, [r4, #84]	; 0x54
 8009994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009996:	602f      	str	r7, [r5, #0]
 8009998:	2900      	cmp	r1, #0
 800999a:	d0ca      	beq.n	8009932 <__sflush_r+0x1a>
 800999c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099a0:	4299      	cmp	r1, r3
 80099a2:	d002      	beq.n	80099aa <__sflush_r+0x92>
 80099a4:	4628      	mov	r0, r5
 80099a6:	f7ff fb57 	bl	8009058 <_free_r>
 80099aa:	2000      	movs	r0, #0
 80099ac:	6360      	str	r0, [r4, #52]	; 0x34
 80099ae:	e7c1      	b.n	8009934 <__sflush_r+0x1c>
 80099b0:	6a21      	ldr	r1, [r4, #32]
 80099b2:	2301      	movs	r3, #1
 80099b4:	4628      	mov	r0, r5
 80099b6:	47b0      	blx	r6
 80099b8:	1c41      	adds	r1, r0, #1
 80099ba:	d1c7      	bne.n	800994c <__sflush_r+0x34>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d0c4      	beq.n	800994c <__sflush_r+0x34>
 80099c2:	2b1d      	cmp	r3, #29
 80099c4:	d001      	beq.n	80099ca <__sflush_r+0xb2>
 80099c6:	2b16      	cmp	r3, #22
 80099c8:	d101      	bne.n	80099ce <__sflush_r+0xb6>
 80099ca:	602f      	str	r7, [r5, #0]
 80099cc:	e7b1      	b.n	8009932 <__sflush_r+0x1a>
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d4:	81a3      	strh	r3, [r4, #12]
 80099d6:	e7ad      	b.n	8009934 <__sflush_r+0x1c>
 80099d8:	690f      	ldr	r7, [r1, #16]
 80099da:	2f00      	cmp	r7, #0
 80099dc:	d0a9      	beq.n	8009932 <__sflush_r+0x1a>
 80099de:	0793      	lsls	r3, r2, #30
 80099e0:	680e      	ldr	r6, [r1, #0]
 80099e2:	bf08      	it	eq
 80099e4:	694b      	ldreq	r3, [r1, #20]
 80099e6:	600f      	str	r7, [r1, #0]
 80099e8:	bf18      	it	ne
 80099ea:	2300      	movne	r3, #0
 80099ec:	eba6 0807 	sub.w	r8, r6, r7
 80099f0:	608b      	str	r3, [r1, #8]
 80099f2:	f1b8 0f00 	cmp.w	r8, #0
 80099f6:	dd9c      	ble.n	8009932 <__sflush_r+0x1a>
 80099f8:	6a21      	ldr	r1, [r4, #32]
 80099fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099fc:	4643      	mov	r3, r8
 80099fe:	463a      	mov	r2, r7
 8009a00:	4628      	mov	r0, r5
 8009a02:	47b0      	blx	r6
 8009a04:	2800      	cmp	r0, #0
 8009a06:	dc06      	bgt.n	8009a16 <__sflush_r+0xfe>
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a0e:	81a3      	strh	r3, [r4, #12]
 8009a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a14:	e78e      	b.n	8009934 <__sflush_r+0x1c>
 8009a16:	4407      	add	r7, r0
 8009a18:	eba8 0800 	sub.w	r8, r8, r0
 8009a1c:	e7e9      	b.n	80099f2 <__sflush_r+0xda>
 8009a1e:	bf00      	nop
 8009a20:	20400001 	.word	0x20400001

08009a24 <_fflush_r>:
 8009a24:	b538      	push	{r3, r4, r5, lr}
 8009a26:	690b      	ldr	r3, [r1, #16]
 8009a28:	4605      	mov	r5, r0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	b913      	cbnz	r3, 8009a34 <_fflush_r+0x10>
 8009a2e:	2500      	movs	r5, #0
 8009a30:	4628      	mov	r0, r5
 8009a32:	bd38      	pop	{r3, r4, r5, pc}
 8009a34:	b118      	cbz	r0, 8009a3e <_fflush_r+0x1a>
 8009a36:	6983      	ldr	r3, [r0, #24]
 8009a38:	b90b      	cbnz	r3, 8009a3e <_fflush_r+0x1a>
 8009a3a:	f000 f887 	bl	8009b4c <__sinit>
 8009a3e:	4b14      	ldr	r3, [pc, #80]	; (8009a90 <_fflush_r+0x6c>)
 8009a40:	429c      	cmp	r4, r3
 8009a42:	d11b      	bne.n	8009a7c <_fflush_r+0x58>
 8009a44:	686c      	ldr	r4, [r5, #4]
 8009a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0ef      	beq.n	8009a2e <_fflush_r+0xa>
 8009a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a50:	07d0      	lsls	r0, r2, #31
 8009a52:	d404      	bmi.n	8009a5e <_fflush_r+0x3a>
 8009a54:	0599      	lsls	r1, r3, #22
 8009a56:	d402      	bmi.n	8009a5e <_fflush_r+0x3a>
 8009a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5a:	f7ff fcda 	bl	8009412 <__retarget_lock_acquire_recursive>
 8009a5e:	4628      	mov	r0, r5
 8009a60:	4621      	mov	r1, r4
 8009a62:	f7ff ff59 	bl	8009918 <__sflush_r>
 8009a66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a68:	07da      	lsls	r2, r3, #31
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	d4e0      	bmi.n	8009a30 <_fflush_r+0xc>
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	059b      	lsls	r3, r3, #22
 8009a72:	d4dd      	bmi.n	8009a30 <_fflush_r+0xc>
 8009a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a76:	f7ff fccd 	bl	8009414 <__retarget_lock_release_recursive>
 8009a7a:	e7d9      	b.n	8009a30 <_fflush_r+0xc>
 8009a7c:	4b05      	ldr	r3, [pc, #20]	; (8009a94 <_fflush_r+0x70>)
 8009a7e:	429c      	cmp	r4, r3
 8009a80:	d101      	bne.n	8009a86 <_fflush_r+0x62>
 8009a82:	68ac      	ldr	r4, [r5, #8]
 8009a84:	e7df      	b.n	8009a46 <_fflush_r+0x22>
 8009a86:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <_fflush_r+0x74>)
 8009a88:	429c      	cmp	r4, r3
 8009a8a:	bf08      	it	eq
 8009a8c:	68ec      	ldreq	r4, [r5, #12]
 8009a8e:	e7da      	b.n	8009a46 <_fflush_r+0x22>
 8009a90:	0800a31c 	.word	0x0800a31c
 8009a94:	0800a33c 	.word	0x0800a33c
 8009a98:	0800a2fc 	.word	0x0800a2fc

08009a9c <std>:
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	b510      	push	{r4, lr}
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	e9c0 3300 	strd	r3, r3, [r0]
 8009aa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aaa:	6083      	str	r3, [r0, #8]
 8009aac:	8181      	strh	r1, [r0, #12]
 8009aae:	6643      	str	r3, [r0, #100]	; 0x64
 8009ab0:	81c2      	strh	r2, [r0, #14]
 8009ab2:	6183      	str	r3, [r0, #24]
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	2208      	movs	r2, #8
 8009ab8:	305c      	adds	r0, #92	; 0x5c
 8009aba:	f7fd fba3 	bl	8007204 <memset>
 8009abe:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <std+0x38>)
 8009ac0:	6263      	str	r3, [r4, #36]	; 0x24
 8009ac2:	4b05      	ldr	r3, [pc, #20]	; (8009ad8 <std+0x3c>)
 8009ac4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ac6:	4b05      	ldr	r3, [pc, #20]	; (8009adc <std+0x40>)
 8009ac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009aca:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <std+0x44>)
 8009acc:	6224      	str	r4, [r4, #32]
 8009ace:	6323      	str	r3, [r4, #48]	; 0x30
 8009ad0:	bd10      	pop	{r4, pc}
 8009ad2:	bf00      	nop
 8009ad4:	08009de9 	.word	0x08009de9
 8009ad8:	08009e0b 	.word	0x08009e0b
 8009adc:	08009e43 	.word	0x08009e43
 8009ae0:	08009e67 	.word	0x08009e67

08009ae4 <_cleanup_r>:
 8009ae4:	4901      	ldr	r1, [pc, #4]	; (8009aec <_cleanup_r+0x8>)
 8009ae6:	f000 b8af 	b.w	8009c48 <_fwalk_reent>
 8009aea:	bf00      	nop
 8009aec:	08009a25 	.word	0x08009a25

08009af0 <__sfmoreglue>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	1e4a      	subs	r2, r1, #1
 8009af4:	2568      	movs	r5, #104	; 0x68
 8009af6:	4355      	muls	r5, r2
 8009af8:	460e      	mov	r6, r1
 8009afa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009afe:	f7fd fb99 	bl	8007234 <_malloc_r>
 8009b02:	4604      	mov	r4, r0
 8009b04:	b140      	cbz	r0, 8009b18 <__sfmoreglue+0x28>
 8009b06:	2100      	movs	r1, #0
 8009b08:	e9c0 1600 	strd	r1, r6, [r0]
 8009b0c:	300c      	adds	r0, #12
 8009b0e:	60a0      	str	r0, [r4, #8]
 8009b10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b14:	f7fd fb76 	bl	8007204 <memset>
 8009b18:	4620      	mov	r0, r4
 8009b1a:	bd70      	pop	{r4, r5, r6, pc}

08009b1c <__sfp_lock_acquire>:
 8009b1c:	4801      	ldr	r0, [pc, #4]	; (8009b24 <__sfp_lock_acquire+0x8>)
 8009b1e:	f7ff bc78 	b.w	8009412 <__retarget_lock_acquire_recursive>
 8009b22:	bf00      	nop
 8009b24:	200007ec 	.word	0x200007ec

08009b28 <__sfp_lock_release>:
 8009b28:	4801      	ldr	r0, [pc, #4]	; (8009b30 <__sfp_lock_release+0x8>)
 8009b2a:	f7ff bc73 	b.w	8009414 <__retarget_lock_release_recursive>
 8009b2e:	bf00      	nop
 8009b30:	200007ec 	.word	0x200007ec

08009b34 <__sinit_lock_acquire>:
 8009b34:	4801      	ldr	r0, [pc, #4]	; (8009b3c <__sinit_lock_acquire+0x8>)
 8009b36:	f7ff bc6c 	b.w	8009412 <__retarget_lock_acquire_recursive>
 8009b3a:	bf00      	nop
 8009b3c:	200007e7 	.word	0x200007e7

08009b40 <__sinit_lock_release>:
 8009b40:	4801      	ldr	r0, [pc, #4]	; (8009b48 <__sinit_lock_release+0x8>)
 8009b42:	f7ff bc67 	b.w	8009414 <__retarget_lock_release_recursive>
 8009b46:	bf00      	nop
 8009b48:	200007e7 	.word	0x200007e7

08009b4c <__sinit>:
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	4604      	mov	r4, r0
 8009b50:	f7ff fff0 	bl	8009b34 <__sinit_lock_acquire>
 8009b54:	69a3      	ldr	r3, [r4, #24]
 8009b56:	b11b      	cbz	r3, 8009b60 <__sinit+0x14>
 8009b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b5c:	f7ff bff0 	b.w	8009b40 <__sinit_lock_release>
 8009b60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b64:	6523      	str	r3, [r4, #80]	; 0x50
 8009b66:	4b13      	ldr	r3, [pc, #76]	; (8009bb4 <__sinit+0x68>)
 8009b68:	4a13      	ldr	r2, [pc, #76]	; (8009bb8 <__sinit+0x6c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b6e:	42a3      	cmp	r3, r4
 8009b70:	bf04      	itt	eq
 8009b72:	2301      	moveq	r3, #1
 8009b74:	61a3      	streq	r3, [r4, #24]
 8009b76:	4620      	mov	r0, r4
 8009b78:	f000 f820 	bl	8009bbc <__sfp>
 8009b7c:	6060      	str	r0, [r4, #4]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f000 f81c 	bl	8009bbc <__sfp>
 8009b84:	60a0      	str	r0, [r4, #8]
 8009b86:	4620      	mov	r0, r4
 8009b88:	f000 f818 	bl	8009bbc <__sfp>
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	60e0      	str	r0, [r4, #12]
 8009b90:	2104      	movs	r1, #4
 8009b92:	6860      	ldr	r0, [r4, #4]
 8009b94:	f7ff ff82 	bl	8009a9c <std>
 8009b98:	68a0      	ldr	r0, [r4, #8]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	2109      	movs	r1, #9
 8009b9e:	f7ff ff7d 	bl	8009a9c <std>
 8009ba2:	68e0      	ldr	r0, [r4, #12]
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	2112      	movs	r1, #18
 8009ba8:	f7ff ff78 	bl	8009a9c <std>
 8009bac:	2301      	movs	r3, #1
 8009bae:	61a3      	str	r3, [r4, #24]
 8009bb0:	e7d2      	b.n	8009b58 <__sinit+0xc>
 8009bb2:	bf00      	nop
 8009bb4:	08009f78 	.word	0x08009f78
 8009bb8:	08009ae5 	.word	0x08009ae5

08009bbc <__sfp>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	4607      	mov	r7, r0
 8009bc0:	f7ff ffac 	bl	8009b1c <__sfp_lock_acquire>
 8009bc4:	4b1e      	ldr	r3, [pc, #120]	; (8009c40 <__sfp+0x84>)
 8009bc6:	681e      	ldr	r6, [r3, #0]
 8009bc8:	69b3      	ldr	r3, [r6, #24]
 8009bca:	b913      	cbnz	r3, 8009bd2 <__sfp+0x16>
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f7ff ffbd 	bl	8009b4c <__sinit>
 8009bd2:	3648      	adds	r6, #72	; 0x48
 8009bd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	d503      	bpl.n	8009be4 <__sfp+0x28>
 8009bdc:	6833      	ldr	r3, [r6, #0]
 8009bde:	b30b      	cbz	r3, 8009c24 <__sfp+0x68>
 8009be0:	6836      	ldr	r6, [r6, #0]
 8009be2:	e7f7      	b.n	8009bd4 <__sfp+0x18>
 8009be4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009be8:	b9d5      	cbnz	r5, 8009c20 <__sfp+0x64>
 8009bea:	4b16      	ldr	r3, [pc, #88]	; (8009c44 <__sfp+0x88>)
 8009bec:	60e3      	str	r3, [r4, #12]
 8009bee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bf2:	6665      	str	r5, [r4, #100]	; 0x64
 8009bf4:	f7ff fc0c 	bl	8009410 <__retarget_lock_init_recursive>
 8009bf8:	f7ff ff96 	bl	8009b28 <__sfp_lock_release>
 8009bfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c04:	6025      	str	r5, [r4, #0]
 8009c06:	61a5      	str	r5, [r4, #24]
 8009c08:	2208      	movs	r2, #8
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c10:	f7fd faf8 	bl	8007204 <memset>
 8009c14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c20:	3468      	adds	r4, #104	; 0x68
 8009c22:	e7d9      	b.n	8009bd8 <__sfp+0x1c>
 8009c24:	2104      	movs	r1, #4
 8009c26:	4638      	mov	r0, r7
 8009c28:	f7ff ff62 	bl	8009af0 <__sfmoreglue>
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	6030      	str	r0, [r6, #0]
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d1d5      	bne.n	8009be0 <__sfp+0x24>
 8009c34:	f7ff ff78 	bl	8009b28 <__sfp_lock_release>
 8009c38:	230c      	movs	r3, #12
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	e7ee      	b.n	8009c1c <__sfp+0x60>
 8009c3e:	bf00      	nop
 8009c40:	08009f78 	.word	0x08009f78
 8009c44:	ffff0001 	.word	0xffff0001

08009c48 <_fwalk_reent>:
 8009c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	4688      	mov	r8, r1
 8009c50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c54:	2700      	movs	r7, #0
 8009c56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c5a:	f1b9 0901 	subs.w	r9, r9, #1
 8009c5e:	d505      	bpl.n	8009c6c <_fwalk_reent+0x24>
 8009c60:	6824      	ldr	r4, [r4, #0]
 8009c62:	2c00      	cmp	r4, #0
 8009c64:	d1f7      	bne.n	8009c56 <_fwalk_reent+0xe>
 8009c66:	4638      	mov	r0, r7
 8009c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c6c:	89ab      	ldrh	r3, [r5, #12]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d907      	bls.n	8009c82 <_fwalk_reent+0x3a>
 8009c72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c76:	3301      	adds	r3, #1
 8009c78:	d003      	beq.n	8009c82 <_fwalk_reent+0x3a>
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	47c0      	blx	r8
 8009c80:	4307      	orrs	r7, r0
 8009c82:	3568      	adds	r5, #104	; 0x68
 8009c84:	e7e9      	b.n	8009c5a <_fwalk_reent+0x12>

08009c86 <__swhatbuf_r>:
 8009c86:	b570      	push	{r4, r5, r6, lr}
 8009c88:	460e      	mov	r6, r1
 8009c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8e:	2900      	cmp	r1, #0
 8009c90:	b096      	sub	sp, #88	; 0x58
 8009c92:	4614      	mov	r4, r2
 8009c94:	461d      	mov	r5, r3
 8009c96:	da07      	bge.n	8009ca8 <__swhatbuf_r+0x22>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	602b      	str	r3, [r5, #0]
 8009c9c:	89b3      	ldrh	r3, [r6, #12]
 8009c9e:	061a      	lsls	r2, r3, #24
 8009ca0:	d410      	bmi.n	8009cc4 <__swhatbuf_r+0x3e>
 8009ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ca6:	e00e      	b.n	8009cc6 <__swhatbuf_r+0x40>
 8009ca8:	466a      	mov	r2, sp
 8009caa:	f000 f903 	bl	8009eb4 <_fstat_r>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	dbf2      	blt.n	8009c98 <__swhatbuf_r+0x12>
 8009cb2:	9a01      	ldr	r2, [sp, #4]
 8009cb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cbc:	425a      	negs	r2, r3
 8009cbe:	415a      	adcs	r2, r3
 8009cc0:	602a      	str	r2, [r5, #0]
 8009cc2:	e7ee      	b.n	8009ca2 <__swhatbuf_r+0x1c>
 8009cc4:	2340      	movs	r3, #64	; 0x40
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	b016      	add	sp, #88	; 0x58
 8009ccc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009cd0 <__smakebuf_r>:
 8009cd0:	898b      	ldrh	r3, [r1, #12]
 8009cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cd4:	079d      	lsls	r5, r3, #30
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	460c      	mov	r4, r1
 8009cda:	d507      	bpl.n	8009cec <__smakebuf_r+0x1c>
 8009cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	6123      	str	r3, [r4, #16]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	6163      	str	r3, [r4, #20]
 8009ce8:	b002      	add	sp, #8
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	ab01      	add	r3, sp, #4
 8009cee:	466a      	mov	r2, sp
 8009cf0:	f7ff ffc9 	bl	8009c86 <__swhatbuf_r>
 8009cf4:	9900      	ldr	r1, [sp, #0]
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7fd fa9b 	bl	8007234 <_malloc_r>
 8009cfe:	b948      	cbnz	r0, 8009d14 <__smakebuf_r+0x44>
 8009d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d04:	059a      	lsls	r2, r3, #22
 8009d06:	d4ef      	bmi.n	8009ce8 <__smakebuf_r+0x18>
 8009d08:	f023 0303 	bic.w	r3, r3, #3
 8009d0c:	f043 0302 	orr.w	r3, r3, #2
 8009d10:	81a3      	strh	r3, [r4, #12]
 8009d12:	e7e3      	b.n	8009cdc <__smakebuf_r+0xc>
 8009d14:	4b0d      	ldr	r3, [pc, #52]	; (8009d4c <__smakebuf_r+0x7c>)
 8009d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	6020      	str	r0, [r4, #0]
 8009d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	9b00      	ldr	r3, [sp, #0]
 8009d24:	6163      	str	r3, [r4, #20]
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	6120      	str	r0, [r4, #16]
 8009d2a:	b15b      	cbz	r3, 8009d44 <__smakebuf_r+0x74>
 8009d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d30:	4630      	mov	r0, r6
 8009d32:	f000 f8d1 	bl	8009ed8 <_isatty_r>
 8009d36:	b128      	cbz	r0, 8009d44 <__smakebuf_r+0x74>
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	f023 0303 	bic.w	r3, r3, #3
 8009d3e:	f043 0301 	orr.w	r3, r3, #1
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	89a0      	ldrh	r0, [r4, #12]
 8009d46:	4305      	orrs	r5, r0
 8009d48:	81a5      	strh	r5, [r4, #12]
 8009d4a:	e7cd      	b.n	8009ce8 <__smakebuf_r+0x18>
 8009d4c:	08009ae5 	.word	0x08009ae5

08009d50 <_malloc_usable_size_r>:
 8009d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d54:	1f18      	subs	r0, r3, #4
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bfbc      	itt	lt
 8009d5a:	580b      	ldrlt	r3, [r1, r0]
 8009d5c:	18c0      	addlt	r0, r0, r3
 8009d5e:	4770      	bx	lr

08009d60 <_raise_r>:
 8009d60:	291f      	cmp	r1, #31
 8009d62:	b538      	push	{r3, r4, r5, lr}
 8009d64:	4604      	mov	r4, r0
 8009d66:	460d      	mov	r5, r1
 8009d68:	d904      	bls.n	8009d74 <_raise_r+0x14>
 8009d6a:	2316      	movs	r3, #22
 8009d6c:	6003      	str	r3, [r0, #0]
 8009d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d76:	b112      	cbz	r2, 8009d7e <_raise_r+0x1e>
 8009d78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d7c:	b94b      	cbnz	r3, 8009d92 <_raise_r+0x32>
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 f830 	bl	8009de4 <_getpid_r>
 8009d84:	462a      	mov	r2, r5
 8009d86:	4601      	mov	r1, r0
 8009d88:	4620      	mov	r0, r4
 8009d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d8e:	f000 b817 	b.w	8009dc0 <_kill_r>
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d00a      	beq.n	8009dac <_raise_r+0x4c>
 8009d96:	1c59      	adds	r1, r3, #1
 8009d98:	d103      	bne.n	8009da2 <_raise_r+0x42>
 8009d9a:	2316      	movs	r3, #22
 8009d9c:	6003      	str	r3, [r0, #0]
 8009d9e:	2001      	movs	r0, #1
 8009da0:	e7e7      	b.n	8009d72 <_raise_r+0x12>
 8009da2:	2400      	movs	r4, #0
 8009da4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009da8:	4628      	mov	r0, r5
 8009daa:	4798      	blx	r3
 8009dac:	2000      	movs	r0, #0
 8009dae:	e7e0      	b.n	8009d72 <_raise_r+0x12>

08009db0 <raise>:
 8009db0:	4b02      	ldr	r3, [pc, #8]	; (8009dbc <raise+0xc>)
 8009db2:	4601      	mov	r1, r0
 8009db4:	6818      	ldr	r0, [r3, #0]
 8009db6:	f7ff bfd3 	b.w	8009d60 <_raise_r>
 8009dba:	bf00      	nop
 8009dbc:	20000010 	.word	0x20000010

08009dc0 <_kill_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4d07      	ldr	r5, [pc, #28]	; (8009de0 <_kill_r+0x20>)
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	4608      	mov	r0, r1
 8009dca:	4611      	mov	r1, r2
 8009dcc:	602b      	str	r3, [r5, #0]
 8009dce:	f7f8 f921 	bl	8002014 <_kill>
 8009dd2:	1c43      	adds	r3, r0, #1
 8009dd4:	d102      	bne.n	8009ddc <_kill_r+0x1c>
 8009dd6:	682b      	ldr	r3, [r5, #0]
 8009dd8:	b103      	cbz	r3, 8009ddc <_kill_r+0x1c>
 8009dda:	6023      	str	r3, [r4, #0]
 8009ddc:	bd38      	pop	{r3, r4, r5, pc}
 8009dde:	bf00      	nop
 8009de0:	200007e0 	.word	0x200007e0

08009de4 <_getpid_r>:
 8009de4:	f7f8 b90e 	b.w	8002004 <_getpid>

08009de8 <__sread>:
 8009de8:	b510      	push	{r4, lr}
 8009dea:	460c      	mov	r4, r1
 8009dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df0:	f000 f894 	bl	8009f1c <_read_r>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	bfab      	itete	ge
 8009df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8009dfc:	181b      	addge	r3, r3, r0
 8009dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e02:	bfac      	ite	ge
 8009e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e06:	81a3      	strhlt	r3, [r4, #12]
 8009e08:	bd10      	pop	{r4, pc}

08009e0a <__swrite>:
 8009e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0e:	461f      	mov	r7, r3
 8009e10:	898b      	ldrh	r3, [r1, #12]
 8009e12:	05db      	lsls	r3, r3, #23
 8009e14:	4605      	mov	r5, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	4616      	mov	r6, r2
 8009e1a:	d505      	bpl.n	8009e28 <__swrite+0x1e>
 8009e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e20:	2302      	movs	r3, #2
 8009e22:	2200      	movs	r2, #0
 8009e24:	f000 f868 	bl	8009ef8 <_lseek_r>
 8009e28:	89a3      	ldrh	r3, [r4, #12]
 8009e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	4632      	mov	r2, r6
 8009e36:	463b      	mov	r3, r7
 8009e38:	4628      	mov	r0, r5
 8009e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3e:	f000 b817 	b.w	8009e70 <_write_r>

08009e42 <__sseek>:
 8009e42:	b510      	push	{r4, lr}
 8009e44:	460c      	mov	r4, r1
 8009e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4a:	f000 f855 	bl	8009ef8 <_lseek_r>
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	bf15      	itete	ne
 8009e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e5e:	81a3      	strheq	r3, [r4, #12]
 8009e60:	bf18      	it	ne
 8009e62:	81a3      	strhne	r3, [r4, #12]
 8009e64:	bd10      	pop	{r4, pc}

08009e66 <__sclose>:
 8009e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6a:	f000 b813 	b.w	8009e94 <_close_r>
	...

08009e70 <_write_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	; (8009e90 <_write_r+0x20>)
 8009e74:	4604      	mov	r4, r0
 8009e76:	4608      	mov	r0, r1
 8009e78:	4611      	mov	r1, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	602a      	str	r2, [r5, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f7f8 f8ff 	bl	8002082 <_write>
 8009e84:	1c43      	adds	r3, r0, #1
 8009e86:	d102      	bne.n	8009e8e <_write_r+0x1e>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	b103      	cbz	r3, 8009e8e <_write_r+0x1e>
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
 8009e90:	200007e0 	.word	0x200007e0

08009e94 <_close_r>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4d06      	ldr	r5, [pc, #24]	; (8009eb0 <_close_r+0x1c>)
 8009e98:	2300      	movs	r3, #0
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	4608      	mov	r0, r1
 8009e9e:	602b      	str	r3, [r5, #0]
 8009ea0:	f7f8 f90b 	bl	80020ba <_close>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	d102      	bne.n	8009eae <_close_r+0x1a>
 8009ea8:	682b      	ldr	r3, [r5, #0]
 8009eaa:	b103      	cbz	r3, 8009eae <_close_r+0x1a>
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	bd38      	pop	{r3, r4, r5, pc}
 8009eb0:	200007e0 	.word	0x200007e0

08009eb4 <_fstat_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	4d07      	ldr	r5, [pc, #28]	; (8009ed4 <_fstat_r+0x20>)
 8009eb8:	2300      	movs	r3, #0
 8009eba:	4604      	mov	r4, r0
 8009ebc:	4608      	mov	r0, r1
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	602b      	str	r3, [r5, #0]
 8009ec2:	f7f8 f906 	bl	80020d2 <_fstat>
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	d102      	bne.n	8009ed0 <_fstat_r+0x1c>
 8009eca:	682b      	ldr	r3, [r5, #0]
 8009ecc:	b103      	cbz	r3, 8009ed0 <_fstat_r+0x1c>
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	bd38      	pop	{r3, r4, r5, pc}
 8009ed2:	bf00      	nop
 8009ed4:	200007e0 	.word	0x200007e0

08009ed8 <_isatty_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d06      	ldr	r5, [pc, #24]	; (8009ef4 <_isatty_r+0x1c>)
 8009edc:	2300      	movs	r3, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	602b      	str	r3, [r5, #0]
 8009ee4:	f7f8 f905 	bl	80020f2 <_isatty>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d102      	bne.n	8009ef2 <_isatty_r+0x1a>
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	b103      	cbz	r3, 8009ef2 <_isatty_r+0x1a>
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	200007e0 	.word	0x200007e0

08009ef8 <_lseek_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4d07      	ldr	r5, [pc, #28]	; (8009f18 <_lseek_r+0x20>)
 8009efc:	4604      	mov	r4, r0
 8009efe:	4608      	mov	r0, r1
 8009f00:	4611      	mov	r1, r2
 8009f02:	2200      	movs	r2, #0
 8009f04:	602a      	str	r2, [r5, #0]
 8009f06:	461a      	mov	r2, r3
 8009f08:	f7f8 f8fe 	bl	8002108 <_lseek>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_lseek_r+0x1e>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_lseek_r+0x1e>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	200007e0 	.word	0x200007e0

08009f1c <_read_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d07      	ldr	r5, [pc, #28]	; (8009f3c <_read_r+0x20>)
 8009f20:	4604      	mov	r4, r0
 8009f22:	4608      	mov	r0, r1
 8009f24:	4611      	mov	r1, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	602a      	str	r2, [r5, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f7f8 f88c 	bl	8002048 <_read>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_read_r+0x1e>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_read_r+0x1e>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	200007e0 	.word	0x200007e0

08009f40 <_init>:
 8009f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f42:	bf00      	nop
 8009f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f46:	bc08      	pop	{r3}
 8009f48:	469e      	mov	lr, r3
 8009f4a:	4770      	bx	lr

08009f4c <_fini>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	bf00      	nop
 8009f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f52:	bc08      	pop	{r3}
 8009f54:	469e      	mov	lr, r3
 8009f56:	4770      	bx	lr
