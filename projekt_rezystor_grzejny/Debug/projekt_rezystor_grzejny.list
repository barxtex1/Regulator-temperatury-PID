
projekt_rezystor_grzejny.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08009e08  08009e08  00019e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a20c  0800a20c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a20c  0800a20c  0001a20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a214  0800a214  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a214  0800a214  0001a214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a218  0800a218  0001a218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a21c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  200001e0  0800a3fc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800a3fc  000207ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb50  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003763  00000000  00000000  0003cd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  000404c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  00041988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002965a  00000000  00000000  00042cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c55e  00000000  00000000  0006c31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f858d  00000000  00000000  00088878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00180e05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006908  00000000  00000000  00180e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009df0 	.word	0x08009df0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009df0 	.word	0x08009df0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9b9 	b.w	800101c <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b96e 	b.w	800101c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468c      	mov	ip, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8083 	bne.w	8000e6e <__udivmoddi4+0x116>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d947      	bls.n	8000dfe <__udivmoddi4+0xa6>
 8000d6e:	fab2 f282 	clz	r2, r2
 8000d72:	b142      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	f1c2 0020 	rsb	r0, r2, #32
 8000d78:	fa24 f000 	lsr.w	r0, r4, r0
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4097      	lsls	r7, r2
 8000d80:	ea40 0c01 	orr.w	ip, r0, r1
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d90:	fa1f fe87 	uxth.w	lr, r7
 8000d94:	fb08 c116 	mls	r1, r8, r6, ip
 8000d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000daa:	f080 8119 	bcs.w	8000fe0 <__udivmoddi4+0x288>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8116 	bls.w	8000fe0 <__udivmoddi4+0x288>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd6:	f080 8105 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f240 8102 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000de0:	3802      	subs	r0, #2
 8000de2:	443c      	add	r4, r7
 8000de4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	b902      	cbnz	r2, 8000e02 <__udivmoddi4+0xaa>
 8000e00:	deff      	udf	#255	; 0xff
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d150      	bne.n	8000eac <__udivmoddi4+0x154>
 8000e0a:	1bcb      	subs	r3, r1, r7
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	fa1f f887 	uxth.w	r8, r7
 8000e14:	2601      	movs	r6, #1
 8000e16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e1a:	0c21      	lsrs	r1, r4, #16
 8000e1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb08 f30c 	mul.w	r3, r8, ip
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0xe2>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	f200 80e9 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x10c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x10a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80d9 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e7bf      	b.n	8000dee <__udivmoddi4+0x96>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0x12e>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80b1 	beq.w	8000fda <__udivmoddi4+0x282>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x1cc>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0x140>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80b8 	bhi.w	8001008 <__udivmoddi4+0x2b0>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0a8      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000ea6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eaa:	e7a5      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb4:	4097      	lsls	r7, r2
 8000eb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebe:	40d9      	lsrs	r1, r3
 8000ec0:	4330      	orrs	r0, r6
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec8:	fa1f f887 	uxth.w	r8, r7
 8000ecc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed4:	fb06 f108 	mul.w	r1, r6, r8
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	fa04 f402 	lsl.w	r4, r4, r2
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x19c>
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ee6:	f080 808d 	bcs.w	8001004 <__udivmoddi4+0x2ac>
 8000eea:	4299      	cmp	r1, r3
 8000eec:	f240 808a 	bls.w	8001004 <__udivmoddi4+0x2ac>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	443b      	add	r3, r7
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b281      	uxth	r1, r0
 8000ef8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb00 f308 	mul.w	r3, r0, r8
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivmoddi4+0x1c4>
 8000f0c:	1879      	adds	r1, r7, r1
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f12:	d273      	bcs.n	8000ffc <__udivmoddi4+0x2a4>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d971      	bls.n	8000ffc <__udivmoddi4+0x2a4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4439      	add	r1, r7
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f22:	e778      	b.n	8000e16 <__udivmoddi4+0xbe>
 8000f24:	f1c6 0c20 	rsb	ip, r6, #32
 8000f28:	fa03 f406 	lsl.w	r4, r3, r6
 8000f2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f30:	431c      	orrs	r4, r3
 8000f32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f42:	431f      	orrs	r7, r3
 8000f44:	0c3b      	lsrs	r3, r7, #16
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fa1f f884 	uxth.w	r8, r4
 8000f4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f56:	fb09 fa08 	mul.w	sl, r9, r8
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f60:	fa00 f306 	lsl.w	r3, r0, r6
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x220>
 8000f66:	1861      	adds	r1, r4, r1
 8000f68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f6c:	d248      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000f6e:	458a      	cmp	sl, r1
 8000f70:	d946      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000f72:	f1a9 0902 	sub.w	r9, r9, #2
 8000f76:	4421      	add	r1, r4
 8000f78:	eba1 010a 	sub.w	r1, r1, sl
 8000f7c:	b2bf      	uxth	r7, r7
 8000f7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f8a:	fb00 f808 	mul.w	r8, r0, r8
 8000f8e:	45b8      	cmp	r8, r7
 8000f90:	d907      	bls.n	8000fa2 <__udivmoddi4+0x24a>
 8000f92:	19e7      	adds	r7, r4, r7
 8000f94:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f98:	d22e      	bcs.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d92c      	bls.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4427      	add	r7, r4
 8000fa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa6:	eba7 0708 	sub.w	r7, r7, r8
 8000faa:	fba0 8902 	umull	r8, r9, r0, r2
 8000fae:	454f      	cmp	r7, r9
 8000fb0:	46c6      	mov	lr, r8
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	d31a      	bcc.n	8000fec <__udivmoddi4+0x294>
 8000fb6:	d017      	beq.n	8000fe8 <__udivmoddi4+0x290>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x27a>
 8000fba:	ebb3 020e 	subs.w	r2, r3, lr
 8000fbe:	eb67 0701 	sbc.w	r7, r7, r1
 8000fc2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc6:	40f2      	lsrs	r2, r6
 8000fc8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fcc:	40f7      	lsrs	r7, r6
 8000fce:	e9c5 2700 	strd	r2, r7, [r5]
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	462e      	mov	r6, r5
 8000fdc:	4628      	mov	r0, r5
 8000fde:	e70b      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	e6fd      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fe8:	4543      	cmp	r3, r8
 8000fea:	d2e5      	bcs.n	8000fb8 <__udivmoddi4+0x260>
 8000fec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ff0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	e7df      	b.n	8000fb8 <__udivmoddi4+0x260>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e7d2      	b.n	8000fa2 <__udivmoddi4+0x24a>
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	e78d      	b.n	8000f1c <__udivmoddi4+0x1c4>
 8001000:	4681      	mov	r9, r0
 8001002:	e7b9      	b.n	8000f78 <__udivmoddi4+0x220>
 8001004:	4666      	mov	r6, ip
 8001006:	e775      	b.n	8000ef4 <__udivmoddi4+0x19c>
 8001008:	4630      	mov	r0, r6
 800100a:	e74a      	b.n	8000ea2 <__udivmoddi4+0x14a>
 800100c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001010:	4439      	add	r1, r7
 8001012:	e713      	b.n	8000e3c <__udivmoddi4+0xe4>
 8001014:	3802      	subs	r0, #2
 8001016:	443c      	add	r4, r7
 8001018:	e724      	b.n	8000e64 <__udivmoddi4+0x10c>
 800101a:	bf00      	nop

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <BMP280_Read8+0x38>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	b29a      	uxth	r2, r3
 8001036:	230a      	movs	r3, #10
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2301      	movs	r3, #1
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	f107 030f 	add.w	r3, r7, #15
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	21ec      	movs	r1, #236	; 0xec
 8001048:	f002 f834 	bl	80030b4 <HAL_I2C_Mem_Read>
  return tmp;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000228 	.word	0x20000228

0800105c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af04      	add	r7, sp, #16
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <BMP280_Read16+0x40>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	b29a      	uxth	r2, r3
 800106e:	230a      	movs	r3, #10
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2302      	movs	r3, #2
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	21ec      	movs	r1, #236	; 0xec
 8001080:	f002 f818 	bl	80030b4 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001084:	7b3b      	ldrb	r3, [r7, #12]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000228 	.word	0x20000228

080010a0 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffd5 	bl	800105c <BMP280_Read16>
 80010b2:	4603      	mov	r3, r0
 80010b4:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b21a      	sxth	r2, r3
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	b29b      	uxth	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af04      	add	r7, sp, #16
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <BMP280_Write8+0x34>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	230a      	movs	r3, #10
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	1dbb      	adds	r3, r7, #6
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	21ec      	movs	r1, #236	; 0xec
 80010fc:	f001 fec6 	bl	8002e8c <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000228 	.word	0x20000228

0800110c <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <BMP280_Read24+0x40>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	b29a      	uxth	r2, r3
 800111e:	230a      	movs	r3, #10
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2303      	movs	r3, #3
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	21ec      	movs	r1, #236	; 0xec
 8001130:	f001 ffc0 	bl	80030b4 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	041a      	lsls	r2, r3, #16
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	4313      	orrs	r3, r2
 800113e:	7bba      	ldrb	r2, [r7, #14]
 8001140:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000228 	.word	0x20000228

08001150 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4603      	mov	r3, r0
 8001160:	70fb      	strb	r3, [r7, #3]
 8001162:	460b      	mov	r3, r1
 8001164:	70bb      	strb	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800116a:	4a48      	ldr	r2, [pc, #288]	; (800128c <BMP280_Init+0x13c>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d901      	bls.n	800117a <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8001176:	2303      	movs	r3, #3
 8001178:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800117a:	4a45      	ldr	r2, [pc, #276]	; (8001290 <BMP280_Init+0x140>)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8001186:	2300      	movs	r3, #0
 8001188:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	2b05      	cmp	r3, #5
 800118e:	d901      	bls.n	8001194 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001190:	2305      	movs	r3, #5
 8001192:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001194:	4a3f      	ldr	r2, [pc, #252]	; (8001294 <BMP280_Init+0x144>)
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800119a:	78bb      	ldrb	r3, [r7, #2]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d901      	bls.n	80011a4 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80011a0:	2305      	movs	r3, #5
 80011a2:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80011a4:	4a3c      	ldr	r2, [pc, #240]	; (8001298 <BMP280_Init+0x148>)
 80011a6:	78bb      	ldrb	r3, [r7, #2]
 80011a8:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80011aa:	bf00      	nop
 80011ac:	20d0      	movs	r0, #208	; 0xd0
 80011ae:	f7ff ff37 	bl	8001020 <BMP280_Read8>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b58      	cmp	r3, #88	; 0x58
 80011b6:	d1f9      	bne.n	80011ac <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011b8:	2088      	movs	r0, #136	; 0x88
 80011ba:	f7ff ff71 	bl	80010a0 <BMP280_Read16LE>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <BMP280_Init+0x14c>)
 80011c4:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011c6:	208a      	movs	r0, #138	; 0x8a
 80011c8:	f7ff ff6a 	bl	80010a0 <BMP280_Read16LE>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <BMP280_Init+0x150>)
 80011d2:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011d4:	208c      	movs	r0, #140	; 0x8c
 80011d6:	f7ff ff63 	bl	80010a0 <BMP280_Read16LE>
 80011da:	4603      	mov	r3, r0
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <BMP280_Init+0x154>)
 80011e0:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011e2:	208e      	movs	r0, #142	; 0x8e
 80011e4:	f7ff ff5c 	bl	80010a0 <BMP280_Read16LE>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <BMP280_Init+0x158>)
 80011ee:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011f0:	2090      	movs	r0, #144	; 0x90
 80011f2:	f7ff ff55 	bl	80010a0 <BMP280_Read16LE>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <BMP280_Init+0x15c>)
 80011fc:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80011fe:	2092      	movs	r0, #146	; 0x92
 8001200:	f7ff ff4e 	bl	80010a0 <BMP280_Read16LE>
 8001204:	4603      	mov	r3, r0
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <BMP280_Init+0x160>)
 800120a:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800120c:	2094      	movs	r0, #148	; 0x94
 800120e:	f7ff ff47 	bl	80010a0 <BMP280_Read16LE>
 8001212:	4603      	mov	r3, r0
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <BMP280_Init+0x164>)
 8001218:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800121a:	2096      	movs	r0, #150	; 0x96
 800121c:	f7ff ff40 	bl	80010a0 <BMP280_Read16LE>
 8001220:	4603      	mov	r3, r0
 8001222:	b21a      	sxth	r2, r3
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <BMP280_Init+0x168>)
 8001226:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001228:	2098      	movs	r0, #152	; 0x98
 800122a:	f7ff ff39 	bl	80010a0 <BMP280_Read16LE>
 800122e:	4603      	mov	r3, r0
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <BMP280_Init+0x16c>)
 8001234:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001236:	209a      	movs	r0, #154	; 0x9a
 8001238:	f7ff ff32 	bl	80010a0 <BMP280_Read16LE>
 800123c:	4603      	mov	r3, r0
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <BMP280_Init+0x170>)
 8001242:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001244:	209c      	movs	r0, #156	; 0x9c
 8001246:	f7ff ff2b 	bl	80010a0 <BMP280_Read16LE>
 800124a:	4603      	mov	r3, r0
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <BMP280_Init+0x174>)
 8001250:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001252:	209e      	movs	r0, #158	; 0x9e
 8001254:	f7ff ff24 	bl	80010a0 <BMP280_Read16LE>
 8001258:	4603      	mov	r3, r0
 800125a:	b21a      	sxth	r2, r3
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <BMP280_Init+0x178>)
 800125e:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	015b      	lsls	r3, r3, #5
 8001264:	b25a      	sxtb	r2, r3
 8001266:	78bb      	ldrb	r3, [r7, #2]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	b25b      	sxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b25a      	sxtb	r2, r3
 8001270:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001274:	4313      	orrs	r3, r2
 8001276:	b25b      	sxtb	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4619      	mov	r1, r3
 800127c:	20f4      	movs	r0, #244	; 0xf4
 800127e:	f7ff ff29 	bl	80010d4 <BMP280_Write8>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000228 	.word	0x20000228
 8001290:	2000022c 	.word	0x2000022c
 8001294:	20000224 	.word	0x20000224
 8001298:	20000216 	.word	0x20000216
 800129c:	20000222 	.word	0x20000222
 80012a0:	20000218 	.word	0x20000218
 80012a4:	20000210 	.word	0x20000210
 80012a8:	2000021c 	.word	0x2000021c
 80012ac:	20000212 	.word	0x20000212
 80012b0:	2000022e 	.word	0x2000022e
 80012b4:	20000232 	.word	0x20000232
 80012b8:	2000021a 	.word	0x2000021a
 80012bc:	20000220 	.word	0x20000220
 80012c0:	20000214 	.word	0x20000214
 80012c4:	2000021e 	.word	0x2000021e
 80012c8:	20000230 	.word	0x20000230

080012cc <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <BMP280_ReadTemperature+0xfc>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d16d      	bne.n	80013b6 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012da:	20f4      	movs	r0, #244	; 0xf4
 80012dc:	f7ff fea0 	bl	8001020 <BMP280_Read8>
 80012e0:	4603      	mov	r3, r0
 80012e2:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	f023 0303 	bic.w	r3, r3, #3
 80012ea:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	4619      	mov	r1, r3
 80012f8:	20f4      	movs	r0, #244	; 0xf4
 80012fa:	f7ff feeb 	bl	80010d4 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80012fe:	20f4      	movs	r0, #244	; 0xf4
 8001300:	f7ff fe8e 	bl	8001020 <BMP280_Read8>
 8001304:	4603      	mov	r3, r0
 8001306:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001308:	7dbb      	ldrb	r3, [r7, #22]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001310:	7dbb      	ldrb	r3, [r7, #22]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d14f      	bne.n	80013b6 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001316:	20f4      	movs	r0, #244	; 0xf4
 8001318:	f7ff fe82 	bl	8001020 <BMP280_Read8>
 800131c:	4603      	mov	r3, r0
 800131e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001320:	7dbb      	ldrb	r3, [r7, #22]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001328:	7dbb      	ldrb	r3, [r7, #22]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d000      	beq.n	8001330 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800132e:	e7f2      	b.n	8001316 <BMP280_ReadTemperature+0x4a>
				  break;
 8001330:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001332:	20fa      	movs	r0, #250	; 0xfa
 8001334:	f7ff feea 	bl	800110c <BMP280_Read24>
 8001338:	4603      	mov	r3, r0
 800133a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	111b      	asrs	r3, r3, #4
 8001340:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	10da      	asrs	r2, r3, #3
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <BMP280_ReadTemperature+0x100>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <BMP280_ReadTemperature+0x104>)
 8001350:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	12db      	asrs	r3, r3, #11
 800135a:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	111b      	asrs	r3, r3, #4
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <BMP280_ReadTemperature+0x100>)
 8001362:	8812      	ldrh	r2, [r2, #0]
 8001364:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	1112      	asrs	r2, r2, #4
 800136a:	4918      	ldr	r1, [pc, #96]	; (80013cc <BMP280_ReadTemperature+0x100>)
 800136c:	8809      	ldrh	r1, [r1, #0]
 800136e:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001370:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001374:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <BMP280_ReadTemperature+0x108>)
 8001378:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800137c:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001380:	139b      	asrs	r3, r3, #14
 8001382:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <BMP280_ReadTemperature+0x10c>)
 800138c:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <BMP280_ReadTemperature+0x10c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3380      	adds	r3, #128	; 0x80
 800139a:	121b      	asrs	r3, r3, #8
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80013a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ac:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013dc <BMP280_ReadTemperature+0x110>
 80013b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013b4:	e001      	b.n	80013ba <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013e0 <BMP280_ReadTemperature+0x114>
 80013ba:	eef0 7a47 	vmov.f32	s15, s14
}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000022c 	.word	0x2000022c
 80013cc:	20000222 	.word	0x20000222
 80013d0:	20000218 	.word	0x20000218
 80013d4:	20000210 	.word	0x20000210
 80013d8:	20000234 	.word	0x20000234
 80013dc:	42c80000 	.word	0x42c80000
 80013e0:	c2c60000 	.word	0xc2c60000

080013e4 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013e8:	b09c      	sub	sp, #112	; 0x70
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	64f8      	str	r0, [r7, #76]	; 0x4c
 80013ee:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80013f0:	f7ff ff6c 	bl	80012cc <BMP280_ReadTemperature>
 80013f4:	eef0 7a40 	vmov.f32	s15, s0
 80013f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013fa:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80013fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80015d4 <BMP280_ReadTemperatureAndPressure+0x1f0>
 8001408:	eef4 7a47 	vcmp.f32	s15, s14
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	d101      	bne.n	8001416 <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8001412:	23ff      	movs	r3, #255	; 0xff
 8001414:	e1d8      	b.n	80017c8 <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001416:	20f7      	movs	r0, #247	; 0xf7
 8001418:	f7ff fe78 	bl	800110c <BMP280_Read24>
 800141c:	4603      	mov	r3, r0
 800141e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8001420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001422:	111b      	asrs	r3, r3, #4
 8001424:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 8001426:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <BMP280_ReadTemperatureAndPressure+0x1f4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001430:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001434:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8001438:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 800143c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800143e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001440:	fb03 f102 	mul.w	r1, r3, r2
 8001444:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001448:	fb03 f302 	mul.w	r3, r3, r2
 800144c:	18ca      	adds	r2, r1, r3
 800144e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001450:	fba3 4503 	umull	r4, r5, r3, r3
 8001454:	1953      	adds	r3, r2, r5
 8001456:	461d      	mov	r5, r3
 8001458:	4b60      	ldr	r3, [pc, #384]	; (80015dc <BMP280_ReadTemperatureAndPressure+0x1f8>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	b21a      	sxth	r2, r3
 8001460:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001464:	fb02 f005 	mul.w	r0, r2, r5
 8001468:	fb04 f103 	mul.w	r1, r4, r3
 800146c:	4401      	add	r1, r0
 800146e:	fba4 2302 	umull	r2, r3, r4, r2
 8001472:	4419      	add	r1, r3
 8001474:	460b      	mov	r3, r1
 8001476:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800147a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800147e:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	b21a      	sxth	r2, r3
 8001486:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800148a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800148c:	fb03 f001 	mul.w	r0, r3, r1
 8001490:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001492:	fb02 f101 	mul.w	r1, r2, r1
 8001496:	4408      	add	r0, r1
 8001498:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800149a:	fba1 2302 	umull	r2, r3, r1, r2
 800149e:	18c1      	adds	r1, r0, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	0459      	lsls	r1, r3, #17
 80014ac:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80014b0:	0450      	lsls	r0, r2, #17
 80014b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014b6:	eb12 0800 	adds.w	r8, r2, r0
 80014ba:	eb43 0901 	adc.w	r9, r3, r1
 80014be:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 80014c2:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <BMP280_ReadTemperatureAndPressure+0x200>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014ce:	f04f 0000 	mov.w	r0, #0
 80014d2:	f04f 0100 	mov.w	r1, #0
 80014d6:	00d1      	lsls	r1, r2, #3
 80014d8:	2000      	movs	r0, #0
 80014da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014de:	1814      	adds	r4, r2, r0
 80014e0:	61bc      	str	r4, [r7, #24]
 80014e2:	414b      	adcs	r3, r1
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014ea:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80014ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f2:	fb03 f102 	mul.w	r1, r3, r2
 80014f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014fa:	fb03 f302 	mul.w	r3, r3, r2
 80014fe:	18ca      	adds	r2, r1, r3
 8001500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001502:	fba3 4503 	umull	r4, r5, r3, r3
 8001506:	1953      	adds	r3, r2, r5
 8001508:	461d      	mov	r5, r3
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <BMP280_ReadTemperatureAndPressure+0x204>)
 800150c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001510:	b21a      	sxth	r2, r3
 8001512:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001516:	fb02 f005 	mul.w	r0, r2, r5
 800151a:	fb04 f103 	mul.w	r1, r4, r3
 800151e:	4401      	add	r1, r0
 8001520:	fba4 2302 	umull	r2, r3, r4, r2
 8001524:	4419      	add	r1, r3
 8001526:	460b      	mov	r3, r1
 8001528:	f04f 0800 	mov.w	r8, #0
 800152c:	f04f 0900 	mov.w	r9, #0
 8001530:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001534:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001538:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <BMP280_ReadTemperatureAndPressure+0x208>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	b21a      	sxth	r2, r3
 8001544:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001548:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800154a:	fb03 f001 	mul.w	r0, r3, r1
 800154e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001550:	fb02 f101 	mul.w	r1, r2, r1
 8001554:	1844      	adds	r4, r0, r1
 8001556:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001558:	fba1 0102 	umull	r0, r1, r1, r2
 800155c:	1863      	adds	r3, r4, r1
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	030b      	lsls	r3, r1, #12
 800156a:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800156e:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001570:	eb18 0102 	adds.w	r1, r8, r2
 8001574:	6139      	str	r1, [r7, #16]
 8001576:	eb49 0303 	adc.w	r3, r9, r3
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001580:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001584:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001588:	1c11      	adds	r1, r2, #0
 800158a:	6439      	str	r1, [r7, #64]	; 0x40
 800158c:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001590:	647b      	str	r3, [r7, #68]	; 0x44
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <BMP280_ReadTemperatureAndPressure+0x20c>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b29a      	uxth	r2, r3
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80015a0:	4629      	mov	r1, r5
 80015a2:	fb02 f001 	mul.w	r0, r2, r1
 80015a6:	4621      	mov	r1, r4
 80015a8:	fb01 f103 	mul.w	r1, r1, r3
 80015ac:	4401      	add	r1, r0
 80015ae:	4620      	mov	r0, r4
 80015b0:	fba0 2302 	umull	r2, r3, r0, r2
 80015b4:	4419      	add	r1, r3
 80015b6:	460b      	mov	r3, r1
 80015b8:	f04f 0000 	mov.w	r0, #0
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	1058      	asrs	r0, r3, #1
 80015c2:	17d9      	asrs	r1, r3, #31
 80015c4:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 80015c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015cc:	4313      	orrs	r3, r2
 80015ce:	d111      	bne.n	80015f4 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 80015d0:	2300      	movs	r3, #0
 80015d2:	e0f9      	b.n	80017c8 <BMP280_ReadTemperatureAndPressure+0x3e4>
 80015d4:	c2c60000 	.word	0xc2c60000
 80015d8:	20000234 	.word	0x20000234
 80015dc:	20000220 	.word	0x20000220
 80015e0:	2000021a 	.word	0x2000021a
 80015e4:	20000232 	.word	0x20000232
 80015e8:	2000022e 	.word	0x2000022e
 80015ec:	20000212 	.word	0x20000212
 80015f0:	2000021c 	.word	0x2000021c
	  }
	  p = 1048576 - adc_P;
 80015f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015f6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80015fa:	461a      	mov	r2, r3
 80015fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001600:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 8001604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001606:	105b      	asrs	r3, r3, #1
 8001608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800160a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800160c:	07db      	lsls	r3, r3, #31
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001610:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001614:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001618:	4621      	mov	r1, r4
 800161a:	ebb1 0a02 	subs.w	sl, r1, r2
 800161e:	4629      	mov	r1, r5
 8001620:	eb61 0b03 	sbc.w	fp, r1, r3
 8001624:	4652      	mov	r2, sl
 8001626:	465b      	mov	r3, fp
 8001628:	1891      	adds	r1, r2, r2
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	415b      	adcs	r3, r3
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001634:	eb12 020a 	adds.w	r2, r2, sl
 8001638:	eb43 030b 	adc.w	r3, r3, fp
 800163c:	f04f 0000 	mov.w	r0, #0
 8001640:	f04f 0100 	mov.w	r1, #0
 8001644:	0199      	lsls	r1, r3, #6
 8001646:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800164a:	0190      	lsls	r0, r2, #6
 800164c:	1812      	adds	r2, r2, r0
 800164e:	eb41 0303 	adc.w	r3, r1, r3
 8001652:	f04f 0000 	mov.w	r0, #0
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	0099      	lsls	r1, r3, #2
 800165c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001660:	0090      	lsls	r0, r2, #2
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	eb12 020a 	adds.w	r2, r2, sl
 800166a:	eb43 030b 	adc.w	r3, r3, fp
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800167c:	0090      	lsls	r0, r2, #2
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	eb12 010a 	adds.w	r1, r2, sl
 8001686:	6339      	str	r1, [r7, #48]	; 0x30
 8001688:	eb43 030b 	adc.w	r3, r3, fp
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
 800168e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001692:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001696:	f7ff faf7 	bl	8000c88 <__aeabi_ldivmod>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	b218      	sxth	r0, r3
 80016aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80016ae:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	0b62      	lsrs	r2, r4, #13
 80016bc:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016c0:	136b      	asrs	r3, r5, #13
 80016c2:	fb02 f501 	mul.w	r5, r2, r1
 80016c6:	fb00 f403 	mul.w	r4, r0, r3
 80016ca:	442c      	add	r4, r5
 80016cc:	fba0 0102 	umull	r0, r1, r0, r2
 80016d0:	1863      	adds	r3, r4, r1
 80016d2:	4619      	mov	r1, r3
 80016d4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	0b62      	lsrs	r2, r4, #13
 80016e2:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016e6:	136b      	asrs	r3, r5, #13
 80016e8:	fb02 f501 	mul.w	r5, r2, r1
 80016ec:	fb00 f403 	mul.w	r4, r0, r3
 80016f0:	442c      	add	r4, r5
 80016f2:	fba0 0102 	umull	r0, r1, r0, r2
 80016f6:	1863      	adds	r3, r4, r1
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	0e42      	lsrs	r2, r0, #25
 8001704:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001708:	164b      	asrs	r3, r1, #25
 800170a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	b21a      	sxth	r2, r3
 8001716:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800171a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800171c:	fb03 f001 	mul.w	r0, r3, r1
 8001720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001722:	fb02 f101 	mul.w	r1, r2, r1
 8001726:	1844      	adds	r4, r0, r1
 8001728:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800172a:	fba1 0102 	umull	r0, r1, r1, r2
 800172e:	1863      	adds	r3, r4, r1
 8001730:	4619      	mov	r1, r3
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	0cc2      	lsrs	r2, r0, #19
 800173c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001740:	14cb      	asrs	r3, r1, #19
 8001742:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001746:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800174a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800174e:	1884      	adds	r4, r0, r2
 8001750:	62bc      	str	r4, [r7, #40]	; 0x28
 8001752:	eb41 0303 	adc.w	r3, r1, r3
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001758:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800175c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001760:	4621      	mov	r1, r4
 8001762:	1889      	adds	r1, r1, r2
 8001764:	6239      	str	r1, [r7, #32]
 8001766:	4629      	mov	r1, r5
 8001768:	eb43 0101 	adc.w	r1, r3, r1
 800176c:	6279      	str	r1, [r7, #36]	; 0x24
 800176e:	f04f 0000 	mov.w	r0, #0
 8001772:	f04f 0100 	mov.w	r1, #0
 8001776:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800177a:	4623      	mov	r3, r4
 800177c:	0a18      	lsrs	r0, r3, #8
 800177e:	462b      	mov	r3, r5
 8001780:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001784:	462b      	mov	r3, r5
 8001786:	1219      	asrs	r1, r3, #8
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <BMP280_ReadTemperatureAndPressure+0x3f8>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b21c      	sxth	r4, r3
 8001790:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	012b      	lsls	r3, r5, #4
 800179e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017a2:	0122      	lsls	r2, r4, #4
 80017a4:	1884      	adds	r4, r0, r2
 80017a6:	603c      	str	r4, [r7, #0]
 80017a8:	eb41 0303 	adc.w	r3, r1, r3
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017b2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 80017b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da00      	bge.n	80017be <BMP280_ReadTemperatureAndPressure+0x3da>
 80017bc:	33ff      	adds	r3, #255	; 0xff
 80017be:	121b      	asrs	r3, r3, #8
 80017c0:	461a      	mov	r2, r3
 80017c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c4:	601a      	str	r2, [r3, #0]

	  return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3770      	adds	r7, #112	; 0x70
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d2:	bf00      	nop
 80017d4:	20000230 	.word	0x20000230
 80017d8:	2000021e 	.word	0x2000021e
 80017dc:	20000214 	.word	0x20000214

080017e0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	4b68      	ldr	r3, [pc, #416]	; (8001998 <MX_GPIO_Init+0x1b8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a67      	ldr	r2, [pc, #412]	; (8001998 <MX_GPIO_Init+0x1b8>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b65      	ldr	r3, [pc, #404]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180e:	4b62      	ldr	r3, [pc, #392]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a61      	ldr	r2, [pc, #388]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <MX_GPIO_Init+0x1b8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b5c      	ldr	r3, [pc, #368]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a5b      	ldr	r2, [pc, #364]	; (8001998 <MX_GPIO_Init+0x1b8>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b59      	ldr	r3, [pc, #356]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	4b56      	ldr	r3, [pc, #344]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a55      	ldr	r2, [pc, #340]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b53      	ldr	r3, [pc, #332]	; (8001998 <MX_GPIO_Init+0x1b8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001856:	4b50      	ldr	r3, [pc, #320]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a4f      	ldr	r2, [pc, #316]	; (8001998 <MX_GPIO_Init+0x1b8>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800186e:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a49      	ldr	r2, [pc, #292]	; (8001998 <MX_GPIO_Init+0x1b8>)
 8001874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <MX_GPIO_Init+0x1b8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f244 0181 	movw	r1, #16513	; 0x4081
 800188c:	4843      	ldr	r0, [pc, #268]	; (800199c <MX_GPIO_Init+0x1bc>)
 800188e:	f001 fa39 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2140      	movs	r1, #64	; 0x40
 8001896:	4842      	ldr	r0, [pc, #264]	; (80019a0 <MX_GPIO_Init+0x1c0>)
 8001898:	f001 fa34 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800189c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	483c      	ldr	r0, [pc, #240]	; (80019a4 <MX_GPIO_Init+0x1c4>)
 80018b4:	f001 f87a 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018b8:	2332      	movs	r3, #50	; 0x32
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018c8:	230b      	movs	r3, #11
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4834      	ldr	r0, [pc, #208]	; (80019a4 <MX_GPIO_Init+0x1c4>)
 80018d4:	f001 f86a 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018d8:	2386      	movs	r3, #134	; 0x86
 80018da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018e8:	230b      	movs	r3, #11
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	482d      	ldr	r0, [pc, #180]	; (80019a8 <MX_GPIO_Init+0x1c8>)
 80018f4:	f001 f85a 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018f8:	f244 0381 	movw	r3, #16513	; 0x4081
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4822      	ldr	r0, [pc, #136]	; (800199c <MX_GPIO_Init+0x1bc>)
 8001912:	f001 f84b 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001928:	230b      	movs	r3, #11
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4619      	mov	r1, r3
 8001932:	481a      	ldr	r0, [pc, #104]	; (800199c <MX_GPIO_Init+0x1bc>)
 8001934:	f001 f83a 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001938:	2340      	movs	r3, #64	; 0x40
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	4814      	ldr	r0, [pc, #80]	; (80019a0 <MX_GPIO_Init+0x1c0>)
 8001950:	f001 f82c 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	480e      	ldr	r0, [pc, #56]	; (80019a0 <MX_GPIO_Init+0x1c0>)
 8001968:	f001 f820 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800196c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800197e:	230b      	movs	r3, #11
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_GPIO_Init+0x1c0>)
 800198a:	f001 f80f 	bl	80029ac <HAL_GPIO_Init>

}
 800198e:	bf00      	nop
 8001990:	3730      	adds	r7, #48	; 0x30
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40020400 	.word	0x40020400
 80019a0:	40021800 	.word	0x40021800
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020000 	.word	0x40020000

080019ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019b2:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <MX_I2C1_Init+0x78>)
 80019b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019b8:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <MX_I2C1_Init+0x7c>)
 80019ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e6:	480e      	ldr	r0, [pc, #56]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019e8:	f001 f9c0 	bl	8002d6c <HAL_I2C_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019f2:	f000 f91d 	bl	8001c30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019f6:	2100      	movs	r1, #0
 80019f8:	4809      	ldr	r0, [pc, #36]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019fa:	f001 ff1b 	bl	8003834 <HAL_I2CEx_ConfigAnalogFilter>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a04:	f000 f914 	bl	8001c30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_I2C1_Init+0x74>)
 8001a0c:	f001 ff5d 	bl	80038ca <HAL_I2CEx_ConfigDigitalFilter>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a16:	f000 f90b 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000238 	.word	0x20000238
 8001a24:	40005400 	.word	0x40005400
 8001a28:	00808cd2 	.word	0x00808cd2

08001a2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0aa      	sub	sp, #168	; 0xa8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	2284      	movs	r2, #132	; 0x84
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f005 fb31 	bl	80070b4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <HAL_I2C_MspInit+0xb4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d13c      	bne.n	8001ad6 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fd78 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a76:	f000 f8db 	bl	8001c30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9a:	2312      	movs	r3, #18
 8001a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aac:	2304      	movs	r3, #4
 8001aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <HAL_I2C_MspInit+0xbc>)
 8001aba:	f000 ff77 	bl	80029ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	37a8      	adds	r7, #168	; 0xa8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020400 	.word	0x40020400

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af0:	f000 fdc9 	bl	8002686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af4:	f000 f834 	bl	8001b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af8:	f7ff fe72 	bl	80017e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001afc:	f000 fc62 	bl	80023c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b00:	f000 fcf0 	bl	80024e4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001b04:	f000 fac4 	bl	8002090 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001b08:	f000 fb3a 	bl	8002180 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001b0c:	f7ff ff4e 	bl	80019ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //PID_Regulator_Init(&pid);
  PID_Regulator_Init(&pid);
 8001b10:	480e      	ldr	r0, [pc, #56]	; (8001b4c <main+0x60>)
 8001b12:	f000 f893 	bl	8001c3c <PID_Regulator_Init>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <main+0x64>)
 8001b1e:	f001 f8f1 	bl	8002d04 <HAL_GPIO_WritePin>
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001b22:	2301      	movs	r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	2101      	movs	r1, #1
 8001b28:	480a      	ldr	r0, [pc, #40]	; (8001b54 <main+0x68>)
 8001b2a:	f7ff fb11 	bl	8001150 <BMP280_Init>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); // wylacz diode jesli zainicjuje czujnik
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b34:	4806      	ldr	r0, [pc, #24]	; (8001b50 <main+0x64>)
 8001b36:	f001 f8e5 	bl	8002d04 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim7);
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <main+0x6c>)
 8001b3c:	f003 f958 	bl	8004df0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b40:	2100      	movs	r1, #0
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <main+0x70>)
 8001b44:	f003 fa2e 	bl	8004fa4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <main+0x5c>
 8001b4a:	bf00      	nop
 8001b4c:	20000284 	.word	0x20000284
 8001b50:	40020400 	.word	0x40020400
 8001b54:	20000238 	.word	0x20000238
 8001b58:	20000304 	.word	0x20000304
 8001b5c:	200002b4 	.word	0x200002b4

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b094      	sub	sp, #80	; 0x50
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	f107 0320 	add.w	r3, r7, #32
 8001b6a:	2230      	movs	r2, #48	; 0x30
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 faa0 	bl	80070b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b84:	f002 f836 	bl	8003bf4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <SystemClock_Config+0xc8>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <SystemClock_Config+0xc8>)
 8001b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <SystemClock_Config+0xc8>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <SystemClock_Config+0xcc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ba8:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <SystemClock_Config+0xcc>)
 8001baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <SystemClock_Config+0xcc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bc0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001bd4:	2348      	movs	r3, #72	; 0x48
 8001bd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 f815 	bl	8003c14 <HAL_RCC_OscConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bf0:	f000 f81e 	bl	8001c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf4:	230f      	movs	r3, #15
 8001bf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	2102      	movs	r1, #2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 faa3 	bl	800415c <HAL_RCC_ClockConfig>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c1c:	f000 f808 	bl	8001c30 <Error_Handler>
  }
}
 8001c20:	bf00      	nop
 8001c22:	3750      	adds	r7, #80	; 0x50
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000

08001c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <Error_Handler+0x8>
	...

08001c3c <PID_Regulator_Init>:
//	//sum of all parts
//	u = P  + I + D; //without saturation
//
//	return u;
//}
void PID_Regulator_Init(PID_regulator *pid){
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    pid->param.Kp = 0.11071524461;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <PID_Regulator_Init+0x50>)
 8001c48:	601a      	str	r2, [r3, #0]
    pid->param.Ki = 0.000387312937110031;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a10      	ldr	r2, [pc, #64]	; (8001c90 <PID_Regulator_Init+0x54>)
 8001c4e:	605a      	str	r2, [r3, #4]
    pid->param.Kd = 1.5023432595749;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <PID_Regulator_Init+0x58>)
 8001c54:	609a      	str	r2, [r3, #8]
    pid->param.dt = 0.1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <PID_Regulator_Init+0x5c>)
 8001c5a:	60da      	str	r2, [r3, #12]
    pid->param.limMax = 900;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <PID_Regulator_Init+0x60>)
 8001c60:	611a      	str	r2, [r3, #16]
    pid->param.limMin = 0;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	615a      	str	r2, [r3, #20]
    pid->tim_counter = 1000;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <PID_Regulator_Init+0x64>)
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prev_error =0;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
    pid->Differentiator =0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	3de2bead 	.word	0x3de2bead
 8001c90:	39cb1043 	.word	0x39cb1043
 8001c94:	3fc04cc9 	.word	0x3fc04cc9
 8001c98:	3dcccccd 	.word	0x3dcccccd
 8001c9c:	44610000 	.word	0x44610000
 8001ca0:	447a0000 	.word	0x447a0000

08001ca4 <Limit_PID_Signal>:
float Limit_PID_Signal(PID_regulator *PID){
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	PID->signal_output = PID->signal_output * PID->tim_counter; // pulse = pulse / ( counter + 1 )
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    if (PID->signal_output > PID->param.limMax){
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	dd03      	ble.n	8001ce0 <Limit_PID_Signal+0x3c>
        PID->signal_output = PID->param.limMax;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    if (PID->signal_output < PID->param.limMin) {
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	d503      	bpl.n	8001cfe <Limit_PID_Signal+0x5a>
        PID->signal_output = PID->param.limMin;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    return PID->signal_output;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	ee07 3a90 	vmov	s15, r3
}
 8001d06:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <PID_Output_Signal>:
float PID_Output_Signal(PID_regulator *PID, float setpoint, float measured){
 8001d14:	b5b0      	push	{r4, r5, r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d20:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measured;
 8001d24:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d30:	edc7 7a07 	vstr	s15, [r7, #28]
    float P = PID->param.Kp * error;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d42:	edc7 7a06 	vstr	s15, [r7, #24]
    PID->Integrator = PID->prev_Integrator + ( error + PID->prev_error );
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001d52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	edc3 7a08 	vstr	s15, [r3, #32]
    PID->prev_Integrator = PID->Integrator;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a1a      	ldr	r2, [r3, #32]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24
    float I = PID->param.Ki * PID->Integrator * ( PID->param.dt / 2.0 );
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7c:	ee17 0a90 	vmov	r0, s15
 8001d80:	f7fe fc02 	bl	8000588 <__aeabi_f2d>
 8001d84:	4604      	mov	r4, r0
 8001d86:	460d      	mov	r5, r1
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fbfb 	bl	8000588 <__aeabi_f2d>
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d9a:	f7fe fd77 	bl	800088c <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fc47 	bl	8000638 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7fe ff19 	bl	8000be8 <__aeabi_d2f>
 8001db6:	4603      	mov	r3, r0
 8001db8:	617b      	str	r3, [r7, #20]
    PID->Differentiator = (error - PID->prev_error)/PID->param.dt;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dc0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dc4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	edc3 7a07 	vstr	s15, [r3, #28]
    PID->signal_output = P + I + PID->Differentiator;
 8001dd8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ddc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001de0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    PID->signal_output = Limit_PID_Signal(PID);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff ff55 	bl	8001ca4 <Limit_PID_Signal>
 8001dfa:	eef0 7a40 	vmov.f32	s15, s0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    PID->prev_error = error;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	619a      	str	r2, [r3, #24]
    return PID->signal_output;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	ee07 3a90 	vmov	s15, r3
}
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bdb0      	pop	{r4, r5, r7, pc}

08001e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_MspInit+0x44>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_MspInit+0x44>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_MspInit+0x44>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_MspInit+0x44>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_MspInit+0x44>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_MspInit+0x44>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <NMI_Handler+0x4>

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler+0x4>

08001e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb0:	f000 fc26 	bl	8002700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <TIM3_IRQHandler+0x10>)
 8001ebe:	f003 f96b 	bl	8005198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200002b4 	.word	0x200002b4

08001ecc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <TIM7_IRQHandler+0x10>)
 8001ed2:	f003 f961 	bl	8005198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000304 	.word	0x20000304

08001ee0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
	return 1;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_kill>:

int _kill(int pid, int sig)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001efa:	f005 f8b1 	bl	8007060 <__errno>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2216      	movs	r2, #22
 8001f02:	601a      	str	r2, [r3, #0]
	return -1;
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_exit>:

void _exit (int status)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ffe7 	bl	8001ef0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f22:	e7fe      	b.n	8001f22 <_exit+0x12>

08001f24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	e00a      	b.n	8001f4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f36:	f3af 8000 	nop.w
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60ba      	str	r2, [r7, #8]
 8001f42:	b2ca      	uxtb	r2, r1
 8001f44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	dbf0      	blt.n	8001f36 <_read+0x12>
	}

return len;
 8001f54:	687b      	ldr	r3, [r7, #4]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e009      	b.n	8001f84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	60ba      	str	r2, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbf1      	blt.n	8001f70 <_write+0x12>
	}
	return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_close>:

int _close(int file)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <_isatty>:

int _isatty(int file)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
	return 0;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <_sbrk+0x5c>)
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <_sbrk+0x60>)
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <_sbrk+0x64>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <_sbrk+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d207      	bcs.n	8002040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002030:	f005 f816 	bl	8007060 <__errno>
 8002034:	4603      	mov	r3, r0
 8002036:	220c      	movs	r2, #12
 8002038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800203e:	e009      	b.n	8002054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <_sbrk+0x64>)
 8002050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20050000 	.word	0x20050000
 8002060:	00000400 	.word	0x00000400
 8002064:	200001fc 	.word	0x200001fc
 8002068:	200007f0 	.word	0x200007f0

0800206c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <SystemInit+0x20>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <SystemInit+0x20>)
 8002078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800207c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	; 0x38
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020b0:	463b      	mov	r3, r7
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]
 80020be:	615a      	str	r2, [r3, #20]
 80020c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <MX_TIM3_Init+0xe8>)
 80020c4:	4a2d      	ldr	r2, [pc, #180]	; (800217c <MX_TIM3_Init+0xec>)
 80020c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <MX_TIM3_Init+0xe8>)
 80020ca:	2247      	movs	r2, #71	; 0x47
 80020cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <MX_TIM3_Init+0xe8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <MX_TIM3_Init+0xe8>)
 80020d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <MX_TIM3_Init+0xe8>)
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020e2:	4b25      	ldr	r3, [pc, #148]	; (8002178 <MX_TIM3_Init+0xe8>)
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020e8:	4823      	ldr	r0, [pc, #140]	; (8002178 <MX_TIM3_Init+0xe8>)
 80020ea:	f002 fe29 	bl	8004d40 <HAL_TIM_Base_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80020f4:	f7ff fd9c 	bl	8001c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002102:	4619      	mov	r1, r3
 8002104:	481c      	ldr	r0, [pc, #112]	; (8002178 <MX_TIM3_Init+0xe8>)
 8002106:	f003 fa7b 	bl	8005600 <HAL_TIM_ConfigClockSource>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002110:	f7ff fd8e 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002114:	4818      	ldr	r0, [pc, #96]	; (8002178 <MX_TIM3_Init+0xe8>)
 8002116:	f002 fee3 	bl	8004ee0 <HAL_TIM_PWM_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002120:	f7ff fd86 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	4811      	ldr	r0, [pc, #68]	; (8002178 <MX_TIM3_Init+0xe8>)
 8002134:	f003 ff14 	bl	8005f60 <HAL_TIMEx_MasterConfigSynchronization>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800213e:	f7ff fd77 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002142:	2360      	movs	r3, #96	; 0x60
 8002144:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800214a:	2302      	movs	r3, #2
 800214c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002152:	463b      	mov	r3, r7
 8002154:	2200      	movs	r2, #0
 8002156:	4619      	mov	r1, r3
 8002158:	4807      	ldr	r0, [pc, #28]	; (8002178 <MX_TIM3_Init+0xe8>)
 800215a:	f003 f93d 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002164:	f7ff fd64 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002168:	4803      	ldr	r0, [pc, #12]	; (8002178 <MX_TIM3_Init+0xe8>)
 800216a:	f000 f883 	bl	8002274 <HAL_TIM_MspPostInit>

}
 800216e:	bf00      	nop
 8002170:	3738      	adds	r7, #56	; 0x38
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200002b4 	.word	0x200002b4
 800217c:	40000400 	.word	0x40000400

08002180 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <MX_TIM7_Init+0x68>)
 8002192:	4a16      	ldr	r2, [pc, #88]	; (80021ec <MX_TIM7_Init+0x6c>)
 8002194:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_TIM7_Init+0x68>)
 8002198:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800219c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <MX_TIM7_Init+0x68>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <MX_TIM7_Init+0x68>)
 80021a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_TIM7_Init+0x68>)
 80021ae:	2280      	movs	r2, #128	; 0x80
 80021b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80021b2:	480d      	ldr	r0, [pc, #52]	; (80021e8 <MX_TIM7_Init+0x68>)
 80021b4:	f002 fdc4 	bl	8004d40 <HAL_TIM_Base_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80021be:	f7ff fd37 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <MX_TIM7_Init+0x68>)
 80021d0:	f003 fec6 	bl	8005f60 <HAL_TIMEx_MasterConfigSynchronization>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80021da:	f7ff fd29 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000304 	.word	0x20000304
 80021ec:	40001400 	.word	0x40001400

080021f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1a      	ldr	r2, [pc, #104]	; (8002268 <HAL_TIM_Base_MspInit+0x78>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d114      	bne.n	800222c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_TIM_Base_MspInit+0x7c>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a19      	ldr	r2, [pc, #100]	; (800226c <HAL_TIM_Base_MspInit+0x7c>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_TIM_Base_MspInit+0x7c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	201d      	movs	r0, #29
 8002220:	f000 fb8d 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002224:	201d      	movs	r0, #29
 8002226:	f000 fba6 	bl	8002976 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800222a:	e018      	b.n	800225e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_TIM_Base_MspInit+0x80>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d113      	bne.n	800225e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_TIM_Base_MspInit+0x7c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <HAL_TIM_Base_MspInit+0x7c>)
 800223c:	f043 0320 	orr.w	r3, r3, #32
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_TIM_Base_MspInit+0x7c>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	2037      	movs	r0, #55	; 0x37
 8002254:	f000 fb73 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002258:	2037      	movs	r0, #55	; 0x37
 800225a:	f000 fb8c 	bl	8002976 <HAL_NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40000400 	.word	0x40000400
 800226c:	40023800 	.word	0x40023800
 8002270:	40001400 	.word	0x40001400

08002274 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_TIM_MspPostInit+0x64>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d11b      	bne.n	80022ce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_TIM_MspPostInit+0x68>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <HAL_TIM_MspPostInit+0x68>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_TIM_MspPostInit+0x68>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022ae:	2340      	movs	r3, #64	; 0x40
 80022b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022be:	2302      	movs	r3, #2
 80022c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <HAL_TIM_MspPostInit+0x6c>)
 80022ca:	f000 fb6f 	bl	80029ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022ce:	bf00      	nop
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020000 	.word	0x40020000

080022e4 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM7_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM7 )
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d129      	bne.n	800234a <HAL_TIM_PeriodElapsedCallback+0x66>
	{ // 100 ms sampling time -  timer
		iter += 1;
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80022f8:	f993 3000 	ldrsb.w	r3, [r3]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	b25a      	sxtb	r2, r3
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002306:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	4825      	ldr	r0, [pc, #148]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800230c:	f000 fd13 	bl	8002d36 <HAL_GPIO_TogglePin>
		BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8002310:	4924      	ldr	r1, [pc, #144]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002312:	4825      	ldr	r0, [pc, #148]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002314:	f7ff f866 	bl	80013e4 <BMP280_ReadTemperatureAndPressure>
		pulse = PID_Output_Signal(&pid, 32, temperature);
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	eef0 0a67 	vmov.f32	s1, s15
 8002322:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80023ac <HAL_TIM_PeriodElapsedCallback+0xc8>
 8002326:	4822      	ldr	r0, [pc, #136]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002328:	f7ff fcf4 	bl	8001d14 <PID_Output_Signal>
 800232c:	eef0 7a40 	vmov.f32	s15, s0
 8002330:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002332:	edc3 7a00 	vstr	s15, [r3]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t)(pulse));
 8002336:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002344:	ee17 2a90 	vmov	r2, s15
 8002348:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (iter == 10){
 800234a:	4b14      	ldr	r3, [pc, #80]	; (800239c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800234c:	f993 3000 	ldrsb.w	r3, [r3]
 8002350:	2b0a      	cmp	r3, #10
 8002352:	d11d      	bne.n	8002390 <HAL_TIM_PeriodElapsedCallback+0xac>
		char *text = calloc(1,6);
 8002354:	2106      	movs	r1, #6
 8002356:	2001      	movs	r0, #1
 8002358:	f004 fe7a 	bl	8007050 <calloc>
 800235c:	4603      	mov	r3, r0
 800235e:	60fb      	str	r3, [r7, #12]
		sprintf((char*)text, "%.2f, ", temperature);
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f90f 	bl	8000588 <__aeabi_f2d>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4913      	ldr	r1, [pc, #76]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f005 fb8b 	bl	8007a8c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 50);
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7fd ff4a 	bl	8000210 <strlen>
 800237c:	4603      	mov	r3, r0
 800237e:	b29a      	uxth	r2, r3
 8002380:	2332      	movs	r3, #50	; 0x32
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	480e      	ldr	r0, [pc, #56]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002386:	f003 fee5 	bl	8006154 <HAL_UART_Transmit>
		iter = 0;
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
	}
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40001400 	.word	0x40001400
 800239c:	20000204 	.word	0x20000204
 80023a0:	40020400 	.word	0x40020400
 80023a4:	20000300 	.word	0x20000300
 80023a8:	20000004 	.word	0x20000004
 80023ac:	42000000 	.word	0x42000000
 80023b0:	20000284 	.word	0x20000284
 80023b4:	20000200 	.word	0x20000200
 80023b8:	200002b4 	.word	0x200002b4
 80023bc:	08009e08 	.word	0x08009e08
 80023c0:	20000350 	.word	0x20000350

080023c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <MX_USART3_UART_Init+0x58>)
 80023ca:	4a15      	ldr	r2, [pc, #84]	; (8002420 <MX_USART3_UART_Init+0x5c>)
 80023cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <MX_USART3_UART_Init+0x58>)
 80023d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_USART3_UART_Init+0x58>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_USART3_UART_Init+0x58>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_USART3_UART_Init+0x58>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_USART3_UART_Init+0x58>)
 80023ea:	220c      	movs	r2, #12
 80023ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <MX_USART3_UART_Init+0x58>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_USART3_UART_Init+0x58>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <MX_USART3_UART_Init+0x58>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_USART3_UART_Init+0x58>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_USART3_UART_Init+0x58>)
 8002408:	f003 fe56 	bl	80060b8 <HAL_UART_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002412:	f7ff fc0d 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000350 	.word	0x20000350
 8002420:	40004800 	.word	0x40004800

08002424 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0aa      	sub	sp, #168	; 0xa8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	2284      	movs	r2, #132	; 0x84
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f004 fe35 	bl	80070b4 <memset>
  if(uartHandle->Instance==USART3)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <HAL_UART_MspInit+0xb4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d13c      	bne.n	80024ce <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002458:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800245a:	2300      	movs	r3, #0
 800245c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	4618      	mov	r0, r3
 8002464:	f002 f87c 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800246e:	f7ff fbdf 	bl	8001c30 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_UART_MspInit+0xb8>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a19      	ldr	r2, [pc, #100]	; (80024dc <HAL_UART_MspInit+0xb8>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b17      	ldr	r3, [pc, #92]	; (80024dc <HAL_UART_MspInit+0xb8>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_UART_MspInit+0xb8>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a13      	ldr	r2, [pc, #76]	; (80024dc <HAL_UART_MspInit+0xb8>)
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_UART_MspInit+0xb8>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80024a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024bc:	2307      	movs	r3, #7
 80024be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024c6:	4619      	mov	r1, r3
 80024c8:	4805      	ldr	r0, [pc, #20]	; (80024e0 <HAL_UART_MspInit+0xbc>)
 80024ca:	f000 fa6f 	bl	80029ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024ce:	bf00      	nop
 80024d0:	37a8      	adds	r7, #168	; 0xa8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40004800 	.word	0x40004800
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020c00 	.word	0x40020c00

080024e4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80024ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024f2:	2206      	movs	r2, #6
 80024f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024f8:	2202      	movs	r2, #2
 80024fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002504:	2202      	movs	r2, #2
 8002506:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800250a:	2201      	movs	r2, #1
 800250c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251c:	2201      	movs	r2, #1
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002522:	2200      	movs	r2, #0
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002528:	f001 fa1b 	bl	8003962 <HAL_PCD_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002532:	f7ff fb7d 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200003d4 	.word	0x200003d4

08002540 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0ac      	sub	sp, #176	; 0xb0
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002558:	f107 0318 	add.w	r3, r7, #24
 800255c:	2284      	movs	r2, #132	; 0x84
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f004 fda7 	bl	80070b4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800256e:	d159      	bne.n	8002624 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002570:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002574:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002576:	2300      	movs	r3, #0
 8002578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800257c:	f107 0318 	add.w	r3, r7, #24
 8002580:	4618      	mov	r0, r3
 8002582:	f001 ffed 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800258c:	f7ff fb50 	bl	8001c30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002590:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_PCD_MspInit+0xec>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	4a25      	ldr	r2, [pc, #148]	; (800262c <HAL_PCD_MspInit+0xec>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6313      	str	r3, [r2, #48]	; 0x30
 800259c:	4b23      	ldr	r3, [pc, #140]	; (800262c <HAL_PCD_MspInit+0xec>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80025a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80025ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025c2:	230a      	movs	r3, #10
 80025c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025cc:	4619      	mov	r1, r3
 80025ce:	4818      	ldr	r0, [pc, #96]	; (8002630 <HAL_PCD_MspInit+0xf0>)
 80025d0:	f000 f9ec 	bl	80029ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80025d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025ec:	4619      	mov	r1, r3
 80025ee:	4810      	ldr	r0, [pc, #64]	; (8002630 <HAL_PCD_MspInit+0xf0>)
 80025f0:	f000 f9dc 	bl	80029ac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_PCD_MspInit+0xec>)
 80025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f8:	4a0c      	ldr	r2, [pc, #48]	; (800262c <HAL_PCD_MspInit+0xec>)
 80025fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fe:	6353      	str	r3, [r2, #52]	; 0x34
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_PCD_MspInit+0xec>)
 8002602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <HAL_PCD_MspInit+0xec>)
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <HAL_PCD_MspInit+0xec>)
 8002612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002616:	6453      	str	r3, [r2, #68]	; 0x44
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <HAL_PCD_MspInit+0xec>)
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002624:	bf00      	nop
 8002626:	37b0      	adds	r7, #176	; 0xb0
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40023800 	.word	0x40023800
 8002630:	40020000 	.word	0x40020000

08002634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800266c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002638:	480d      	ldr	r0, [pc, #52]	; (8002670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800263a:	490e      	ldr	r1, [pc, #56]	; (8002674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800263c:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002650:	4c0b      	ldr	r4, [pc, #44]	; (8002680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800265e:	f7ff fd05 	bl	800206c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002662:	f004 fd03 	bl	800706c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002666:	f7ff fa41 	bl	8001aec <main>
  bx  lr    
 800266a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800266c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002674:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002678:	0800a21c 	.word	0x0800a21c
  ldr r2, =_sbss
 800267c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002680:	200007ec 	.word	0x200007ec

08002684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC_IRQHandler>

08002686 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268a:	2003      	movs	r0, #3
 800268c:	f000 f94c 	bl	8002928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002690:	2000      	movs	r0, #0
 8002692:	f000 f805 	bl	80026a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002696:	f7ff fbc1 	bl	8001e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_InitTick+0x54>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_InitTick+0x58>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f967 	bl	8002992 <HAL_SYSTICK_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e00e      	b.n	80026ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b0f      	cmp	r3, #15
 80026d2:	d80a      	bhi.n	80026ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d4:	2200      	movs	r2, #0
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026dc:	f000 f92f 	bl	800293e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e0:	4a06      	ldr	r2, [pc, #24]	; (80026fc <HAL_InitTick+0x5c>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e000      	b.n	80026ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000000 	.word	0x20000000
 80026f8:	2000000c 	.word	0x2000000c
 80026fc:	20000008 	.word	0x20000008

08002700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_IncTick+0x20>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_IncTick+0x24>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4413      	add	r3, r2
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <HAL_IncTick+0x24>)
 8002712:	6013      	str	r3, [r2, #0]
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	2000000c 	.word	0x2000000c
 8002724:	200007d8 	.word	0x200007d8

08002728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return uwTick;
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_GetTick+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	200007d8 	.word	0x200007d8

08002740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff ffee 	bl	8002728 <HAL_GetTick>
 800274c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002758:	d005      	beq.n	8002766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_Delay+0x44>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002766:	bf00      	nop
 8002768:	f7ff ffde 	bl	8002728 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	429a      	cmp	r2, r3
 8002776:	d8f7      	bhi.n	8002768 <HAL_Delay+0x28>
  {
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2000000c 	.word	0x2000000c

08002788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <__NVIC_SetPriorityGrouping+0x40>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a4:	4013      	ands	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <__NVIC_SetPriorityGrouping+0x40>)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00
 80027cc:	05fa0000 	.word	0x05fa0000

080027d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <__NVIC_GetPriorityGrouping+0x18>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 0307 	and.w	r3, r3, #7
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	db0b      	blt.n	8002816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4907      	ldr	r1, [pc, #28]	; (8002824 <__NVIC_EnableIRQ+0x38>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2001      	movs	r0, #1
 800280e:	fa00 f202 	lsl.w	r2, r0, r2
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000e100 	.word	0xe000e100

08002828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	db0a      	blt.n	8002852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	490c      	ldr	r1, [pc, #48]	; (8002874 <__NVIC_SetPriority+0x4c>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002850:	e00a      	b.n	8002868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4908      	ldr	r1, [pc, #32]	; (8002878 <__NVIC_SetPriority+0x50>)
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3b04      	subs	r3, #4
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	440b      	add	r3, r1
 8002866:	761a      	strb	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f1c3 0307 	rsb	r3, r3, #7
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf28      	it	cs
 800289a:	2304      	movcs	r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d902      	bls.n	80028ac <NVIC_EncodePriority+0x30>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3b03      	subs	r3, #3
 80028aa:	e000      	b.n	80028ae <NVIC_EncodePriority+0x32>
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	4313      	orrs	r3, r2
         );
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f4:	d301      	bcc.n	80028fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00f      	b.n	800291a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <SysTick_Config+0x40>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002902:	210f      	movs	r1, #15
 8002904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002908:	f7ff ff8e 	bl	8002828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <SysTick_Config+0x40>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <SysTick_Config+0x40>)
 8002914:	2207      	movs	r2, #7
 8002916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	e000e010 	.word	0xe000e010

08002928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ff29 	bl	8002788 <__NVIC_SetPriorityGrouping>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002950:	f7ff ff3e 	bl	80027d0 <__NVIC_GetPriorityGrouping>
 8002954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	6978      	ldr	r0, [r7, #20]
 800295c:	f7ff ff8e 	bl	800287c <NVIC_EncodePriority>
 8002960:	4602      	mov	r2, r0
 8002962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff5d 	bl	8002828 <__NVIC_SetPriority>
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff31 	bl	80027ec <__NVIC_EnableIRQ>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ffa2 	bl	80028e4 <SysTick_Config>
 80029a0:	4603      	mov	r3, r0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e175      	b.n	8002cb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 8164 	bne.w	8002cb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_Init+0x56>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80be 	beq.w	8002cb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <HAL_GPIO_Init+0x324>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	4a65      	ldr	r2, [pc, #404]	; (8002cd0 <HAL_GPIO_Init+0x324>)
 8002b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b40:	6453      	str	r3, [r2, #68]	; 0x44
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_GPIO_Init+0x324>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b4e:	4a61      	ldr	r2, [pc, #388]	; (8002cd4 <HAL_GPIO_Init+0x328>)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	3302      	adds	r3, #2
 8002b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	220f      	movs	r2, #15
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_GPIO_Init+0x32c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d037      	beq.n	8002bea <HAL_GPIO_Init+0x23e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a57      	ldr	r2, [pc, #348]	; (8002cdc <HAL_GPIO_Init+0x330>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d031      	beq.n	8002be6 <HAL_GPIO_Init+0x23a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a56      	ldr	r2, [pc, #344]	; (8002ce0 <HAL_GPIO_Init+0x334>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d02b      	beq.n	8002be2 <HAL_GPIO_Init+0x236>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a55      	ldr	r2, [pc, #340]	; (8002ce4 <HAL_GPIO_Init+0x338>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d025      	beq.n	8002bde <HAL_GPIO_Init+0x232>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a54      	ldr	r2, [pc, #336]	; (8002ce8 <HAL_GPIO_Init+0x33c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01f      	beq.n	8002bda <HAL_GPIO_Init+0x22e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a53      	ldr	r2, [pc, #332]	; (8002cec <HAL_GPIO_Init+0x340>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d019      	beq.n	8002bd6 <HAL_GPIO_Init+0x22a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a52      	ldr	r2, [pc, #328]	; (8002cf0 <HAL_GPIO_Init+0x344>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_GPIO_Init+0x226>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a51      	ldr	r2, [pc, #324]	; (8002cf4 <HAL_GPIO_Init+0x348>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00d      	beq.n	8002bce <HAL_GPIO_Init+0x222>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a50      	ldr	r2, [pc, #320]	; (8002cf8 <HAL_GPIO_Init+0x34c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d007      	beq.n	8002bca <HAL_GPIO_Init+0x21e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4f      	ldr	r2, [pc, #316]	; (8002cfc <HAL_GPIO_Init+0x350>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_GPIO_Init+0x21a>
 8002bc2:	2309      	movs	r3, #9
 8002bc4:	e012      	b.n	8002bec <HAL_GPIO_Init+0x240>
 8002bc6:	230a      	movs	r3, #10
 8002bc8:	e010      	b.n	8002bec <HAL_GPIO_Init+0x240>
 8002bca:	2308      	movs	r3, #8
 8002bcc:	e00e      	b.n	8002bec <HAL_GPIO_Init+0x240>
 8002bce:	2307      	movs	r3, #7
 8002bd0:	e00c      	b.n	8002bec <HAL_GPIO_Init+0x240>
 8002bd2:	2306      	movs	r3, #6
 8002bd4:	e00a      	b.n	8002bec <HAL_GPIO_Init+0x240>
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	e008      	b.n	8002bec <HAL_GPIO_Init+0x240>
 8002bda:	2304      	movs	r3, #4
 8002bdc:	e006      	b.n	8002bec <HAL_GPIO_Init+0x240>
 8002bde:	2303      	movs	r3, #3
 8002be0:	e004      	b.n	8002bec <HAL_GPIO_Init+0x240>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e002      	b.n	8002bec <HAL_GPIO_Init+0x240>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_GPIO_Init+0x240>
 8002bea:	2300      	movs	r3, #0
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	f002 0203 	and.w	r2, r2, #3
 8002bf2:	0092      	lsls	r2, r2, #2
 8002bf4:	4093      	lsls	r3, r2
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bfc:	4935      	ldr	r1, [pc, #212]	; (8002cd4 <HAL_GPIO_Init+0x328>)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	3302      	adds	r3, #2
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <HAL_GPIO_Init+0x354>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c2e:	4a34      	ldr	r2, [pc, #208]	; (8002d00 <HAL_GPIO_Init+0x354>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c34:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_GPIO_Init+0x354>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c58:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <HAL_GPIO_Init+0x354>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <HAL_GPIO_Init+0x354>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c82:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <HAL_GPIO_Init+0x354>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_GPIO_Init+0x354>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cac:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <HAL_GPIO_Init+0x354>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	2b0f      	cmp	r3, #15
 8002cbc:	f67f ae86 	bls.w	80029cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	3724      	adds	r7, #36	; 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40013800 	.word	0x40013800
 8002cd8:	40020000 	.word	0x40020000
 8002cdc:	40020400 	.word	0x40020400
 8002ce0:	40020800 	.word	0x40020800
 8002ce4:	40020c00 	.word	0x40020c00
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40021400 	.word	0x40021400
 8002cf0:	40021800 	.word	0x40021800
 8002cf4:	40021c00 	.word	0x40021c00
 8002cf8:	40022000 	.word	0x40022000
 8002cfc:	40022400 	.word	0x40022400
 8002d00:	40013c00 	.word	0x40013c00

08002d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
 8002d10:	4613      	mov	r3, r2
 8002d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d20:	e003      	b.n	8002d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	041a      	lsls	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d48:	887a      	ldrh	r2, [r7, #2]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	041a      	lsls	r2, r3, #16
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	43d9      	mvns	r1, r3
 8002d54:	887b      	ldrh	r3, [r7, #2]
 8002d56:	400b      	ands	r3, r1
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	619a      	str	r2, [r3, #24]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e07f      	b.n	8002e7e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe fe4a 	bl	8001a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	; 0x24
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	e006      	b.n	8002df4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002df2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d104      	bne.n	8002e06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_I2C_Init+0x11c>)
 8002e12:	430b      	orrs	r3, r1
 8002e14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69d9      	ldr	r1, [r3, #28]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	02008000 	.word	0x02008000

08002e8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	817b      	strh	r3, [r7, #10]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	813b      	strh	r3, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	f040 80f9 	bne.w	80030a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_I2C_Mem_Write+0x34>
 8002eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0ed      	b.n	80030a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Mem_Write+0x4e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e0e6      	b.n	80030a8 <HAL_I2C_Mem_Write+0x21c>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ee2:	f7ff fc21 	bl	8002728 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2319      	movs	r3, #25
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 fac3 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0d1      	b.n	80030a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2221      	movs	r2, #33	; 0x21
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2240      	movs	r2, #64	; 0x40
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a3a      	ldr	r2, [r7, #32]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f2c:	88f8      	ldrh	r0, [r7, #6]
 8002f2e:	893a      	ldrh	r2, [r7, #8]
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f9d3 	bl	80032e8 <I2C_RequestMemoryWrite>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0a9      	b.n	80030a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2bff      	cmp	r3, #255	; 0xff
 8002f5c:	d90e      	bls.n	8002f7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	22ff      	movs	r2, #255	; 0xff
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	8979      	ldrh	r1, [r7, #10]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fc2b 	bl	80037d0 <I2C_TransferConfig>
 8002f7a:	e00f      	b.n	8002f9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	8979      	ldrh	r1, [r7, #10]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fc1a 	bl	80037d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 faad 	bl	8003500 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e07b      	b.n	80030a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d034      	beq.n	8003054 <HAL_I2C_Mem_Write+0x1c8>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d130      	bne.n	8003054 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fa3f 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e04d      	b.n	80030a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	2bff      	cmp	r3, #255	; 0xff
 8003014:	d90e      	bls.n	8003034 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	22ff      	movs	r2, #255	; 0xff
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	b2da      	uxtb	r2, r3
 8003022:	8979      	ldrh	r1, [r7, #10]
 8003024:	2300      	movs	r3, #0
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fbcf 	bl	80037d0 <I2C_TransferConfig>
 8003032:	e00f      	b.n	8003054 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	b2da      	uxtb	r2, r3
 8003044:	8979      	ldrh	r1, [r7, #10]
 8003046:	2300      	movs	r3, #0
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fbbe 	bl	80037d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d19e      	bne.n	8002f9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fa8c 	bl	8003580 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e01a      	b.n	80030a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2220      	movs	r2, #32
 8003078:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_I2C_Mem_Write+0x224>)
 8003086:	400b      	ands	r3, r1
 8003088:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	fe00e800 	.word	0xfe00e800

080030b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	4608      	mov	r0, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	817b      	strh	r3, [r7, #10]
 80030c6:	460b      	mov	r3, r1
 80030c8:	813b      	strh	r3, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	f040 80fd 	bne.w	80032d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_I2C_Mem_Read+0x34>
 80030e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0f1      	b.n	80032d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_I2C_Mem_Read+0x4e>
 80030fe:	2302      	movs	r3, #2
 8003100:	e0ea      	b.n	80032d8 <HAL_I2C_Mem_Read+0x224>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800310a:	f7ff fb0d 	bl	8002728 <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2319      	movs	r3, #25
 8003116:	2201      	movs	r2, #1
 8003118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f9af 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0d5      	b.n	80032d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2222      	movs	r2, #34	; 0x22
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003154:	88f8      	ldrh	r0, [r7, #6]
 8003156:	893a      	ldrh	r2, [r7, #8]
 8003158:	8979      	ldrh	r1, [r7, #10]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	4603      	mov	r3, r0
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f913 	bl	8003390 <I2C_RequestMemoryRead>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0ad      	b.n	80032d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2bff      	cmp	r3, #255	; 0xff
 8003184:	d90e      	bls.n	80031a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	22ff      	movs	r2, #255	; 0xff
 800318a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	b2da      	uxtb	r2, r3
 8003192:	8979      	ldrh	r1, [r7, #10]
 8003194:	4b52      	ldr	r3, [pc, #328]	; (80032e0 <HAL_I2C_Mem_Read+0x22c>)
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fb17 	bl	80037d0 <I2C_TransferConfig>
 80031a2:	e00f      	b.n	80031c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	8979      	ldrh	r1, [r7, #10]
 80031b6:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <HAL_I2C_Mem_Read+0x22c>)
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fb06 	bl	80037d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	2200      	movs	r2, #0
 80031cc:	2104      	movs	r1, #4
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f956 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e07c      	b.n	80032d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d034      	beq.n	8003284 <HAL_I2C_Mem_Read+0x1d0>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d130      	bne.n	8003284 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	2200      	movs	r2, #0
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f927 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e04d      	b.n	80032d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	2bff      	cmp	r3, #255	; 0xff
 8003244:	d90e      	bls.n	8003264 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	22ff      	movs	r2, #255	; 0xff
 800324a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	b2da      	uxtb	r2, r3
 8003252:	8979      	ldrh	r1, [r7, #10]
 8003254:	2300      	movs	r3, #0
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fab7 	bl	80037d0 <I2C_TransferConfig>
 8003262:	e00f      	b.n	8003284 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	b2da      	uxtb	r2, r3
 8003274:	8979      	ldrh	r1, [r7, #10]
 8003276:	2300      	movs	r3, #0
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 faa6 	bl	80037d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d19a      	bne.n	80031c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f974 	bl	8003580 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e01a      	b.n	80032d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2220      	movs	r2, #32
 80032a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_I2C_Mem_Read+0x230>)
 80032b6:	400b      	ands	r3, r1
 80032b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	80002400 	.word	0x80002400
 80032e4:	fe00e800 	.word	0xfe00e800

080032e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	817b      	strh	r3, [r7, #10]
 80032fa:	460b      	mov	r3, r1
 80032fc:	813b      	strh	r3, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	8979      	ldrh	r1, [r7, #10]
 8003308:	4b20      	ldr	r3, [pc, #128]	; (800338c <I2C_RequestMemoryWrite+0xa4>)
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fa5d 	bl	80037d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	69b9      	ldr	r1, [r7, #24]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f8f0 	bl	8003500 <I2C_WaitOnTXISFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e02c      	b.n	8003384 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d105      	bne.n	800333c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003330:	893b      	ldrh	r3, [r7, #8]
 8003332:	b2da      	uxtb	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	629a      	str	r2, [r3, #40]	; 0x28
 800333a:	e015      	b.n	8003368 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800333c:	893b      	ldrh	r3, [r7, #8]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	b29b      	uxth	r3, r3
 8003342:	b2da      	uxtb	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	69b9      	ldr	r1, [r7, #24]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f8d6 	bl	8003500 <I2C_WaitOnTXISFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e012      	b.n	8003384 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800335e:	893b      	ldrh	r3, [r7, #8]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2200      	movs	r2, #0
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f884 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	80002000 	.word	0x80002000

08003390 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	460b      	mov	r3, r1
 80033a4:	813b      	strh	r3, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	8979      	ldrh	r1, [r7, #10]
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <I2C_RequestMemoryRead+0xa4>)
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2300      	movs	r3, #0
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fa0a 	bl	80037d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	69b9      	ldr	r1, [r7, #24]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f89d 	bl	8003500 <I2C_WaitOnTXISFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e02c      	b.n	800342a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033d6:	893b      	ldrh	r3, [r7, #8]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28
 80033e0:	e015      	b.n	800340e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033e2:	893b      	ldrh	r3, [r7, #8]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	69b9      	ldr	r1, [r7, #24]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f883 	bl	8003500 <I2C_WaitOnTXISFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e012      	b.n	800342a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003404:	893b      	ldrh	r3, [r7, #8]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2200      	movs	r2, #0
 8003416:	2140      	movs	r1, #64	; 0x40
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f831 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	80002000 	.word	0x80002000

08003438 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d103      	bne.n	8003456 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2200      	movs	r2, #0
 8003454:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d007      	beq.n	8003474 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	619a      	str	r2, [r3, #24]
  }
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003490:	e022      	b.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003498:	d01e      	beq.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7ff f945 	bl	8002728 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d113      	bne.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e00f      	b.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d0cd      	beq.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800350c:	e02c      	b.n	8003568 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f870 	bl	80035f8 <I2C_IsErrorOccurred>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e02a      	b.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003528:	d01e      	beq.n	8003568 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7ff f8fd 	bl	8002728 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d113      	bne.n	8003568 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e007      	b.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d1cb      	bne.n	800350e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800358c:	e028      	b.n	80035e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f830 	bl	80035f8 <I2C_IsErrorOccurred>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e026      	b.n	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7ff f8c1 	bl	8002728 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d113      	bne.n	80035e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e007      	b.n	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d1cf      	bne.n	800358e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d075      	beq.n	8003710 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2210      	movs	r2, #16
 800362a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800362c:	e056      	b.n	80036dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003634:	d052      	beq.n	80036dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003636:	f7ff f877 	bl	8002728 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	d302      	bcc.n	800364c <I2C_IsErrorOccurred+0x54>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d147      	bne.n	80036dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003656:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800365e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800366a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366e:	d12e      	bne.n	80036ce <I2C_IsErrorOccurred+0xd6>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003676:	d02a      	beq.n	80036ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	2b20      	cmp	r3, #32
 800367c:	d027      	beq.n	80036ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800368c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800368e:	f7ff f84b 	bl	8002728 <HAL_GetTick>
 8003692:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003694:	e01b      	b.n	80036ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003696:	f7ff f847 	bl	8002728 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b19      	cmp	r3, #25
 80036a2:	d914      	bls.n	80036ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d1dc      	bne.n	8003696 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d003      	beq.n	80036f2 <I2C_IsErrorOccurred+0xfa>
 80036ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d09d      	beq.n	800362e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2220      	movs	r2, #32
 8003700:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	f043 0304 	orr.w	r3, r3, #4
 8003708:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003732:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00b      	beq.n	800375c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	f043 0308 	orr.w	r3, r3, #8
 800374a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003754:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003776:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800377e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01c      	beq.n	80037c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff fe56 	bl	8003438 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6859      	ldr	r1, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <I2C_IsErrorOccurred+0x1d4>)
 8003798:	400b      	ands	r3, r1
 800379a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3728      	adds	r7, #40	; 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	fe00e800 	.word	0xfe00e800

080037d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	460b      	mov	r3, r1
 80037dc:	817b      	strh	r3, [r7, #10]
 80037de:	4613      	mov	r3, r2
 80037e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037e2:	897b      	ldrh	r3, [r7, #10]
 80037e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037e8:	7a7b      	ldrb	r3, [r7, #9]
 80037ea:	041b      	lsls	r3, r3, #16
 80037ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037fe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	0d5b      	lsrs	r3, r3, #21
 800380a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <I2C_TransferConfig+0x60>)
 8003810:	430b      	orrs	r3, r1
 8003812:	43db      	mvns	r3, r3
 8003814:	ea02 0103 	and.w	r1, r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	03ff63ff 	.word	0x03ff63ff

08003834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b20      	cmp	r3, #32
 8003848:	d138      	bne.n	80038bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003854:	2302      	movs	r3, #2
 8003856:	e032      	b.n	80038be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2224      	movs	r2, #36	; 0x24
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003886:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
  }
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d139      	bne.n	8003954 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e033      	b.n	8003956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2224      	movs	r2, #36	; 0x24
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800391c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003964:	b08f      	sub	sp, #60	; 0x3c
 8003966:	af0a      	add	r7, sp, #40	; 0x28
 8003968:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e116      	b.n	8003ba2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fe fdd6 	bl	8002540 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2203      	movs	r2, #3
 8003998:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f003 f8b6 	bl	8006b24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	687e      	ldr	r6, [r7, #4]
 80039c0:	466d      	mov	r5, sp
 80039c2:	f106 0410 	add.w	r4, r6, #16
 80039c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80039d6:	1d33      	adds	r3, r6, #4
 80039d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039da:	6838      	ldr	r0, [r7, #0]
 80039dc:	f003 f84a 	bl	8006a74 <USB_CoreInit>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e0d7      	b.n	8003ba2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 f8a4 	bl	8006b46 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	e04a      	b.n	8003a9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	333d      	adds	r3, #61	; 0x3d
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a18:	7bfa      	ldrb	r2, [r7, #15]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	333c      	adds	r3, #60	; 0x3c
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	b298      	uxth	r0, r3
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	3342      	adds	r3, #66	; 0x42
 8003a40:	4602      	mov	r2, r0
 8003a42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	333f      	adds	r3, #63	; 0x3f
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3344      	adds	r3, #68	; 0x44
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3348      	adds	r3, #72	; 0x48
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3350      	adds	r3, #80	; 0x50
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	3301      	adds	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3af      	bcc.n	8003a04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	e044      	b.n	8003b34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ad6:	7bfa      	ldrb	r2, [r7, #15]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	3301      	adds	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d3b5      	bcc.n	8003aaa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	687e      	ldr	r6, [r7, #4]
 8003b46:	466d      	mov	r5, sp
 8003b48:	f106 0410 	add.w	r4, r6, #16
 8003b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b58:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b5c:	1d33      	adds	r3, r6, #4
 8003b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b60:	6838      	ldr	r0, [r7, #0]
 8003b62:	f003 f83d 	bl	8006be0 <USB_DevInit>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e014      	b.n	8003ba2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d102      	bne.n	8003b96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f80b 	bl	8003bac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f003 f9f7 	bl	8006f8e <USB_DevDisconnect>

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003bac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	10000003 	.word	0x10000003

08003bf4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40007000 	.word	0x40007000

08003c14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e291      	b.n	800414e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8087 	beq.w	8003d46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c38:	4b96      	ldr	r3, [pc, #600]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d00c      	beq.n	8003c5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c44:	4b93      	ldr	r3, [pc, #588]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d112      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62>
 8003c50:	4b90      	ldr	r3, [pc, #576]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5e:	4b8d      	ldr	r3, [pc, #564]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d06c      	beq.n	8003d44 <HAL_RCC_OscConfig+0x130>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d168      	bne.n	8003d44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e26b      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x7a>
 8003c80:	4b84      	ldr	r3, [pc, #528]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a83      	ldr	r2, [pc, #524]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e02e      	b.n	8003cec <HAL_RCC_OscConfig+0xd8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x9c>
 8003c96:	4b7f      	ldr	r3, [pc, #508]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a7e      	ldr	r2, [pc, #504]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b7c      	ldr	r3, [pc, #496]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7b      	ldr	r2, [pc, #492]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	e01d      	b.n	8003cec <HAL_RCC_OscConfig+0xd8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0xc0>
 8003cba:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a75      	ldr	r2, [pc, #468]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	4b73      	ldr	r3, [pc, #460]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a72      	ldr	r2, [pc, #456]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	e00b      	b.n	8003cec <HAL_RCC_OscConfig+0xd8>
 8003cd4:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6e      	ldr	r2, [pc, #440]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a6b      	ldr	r2, [pc, #428]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d013      	beq.n	8003d1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fd18 	bl	8002728 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fe fd14 	bl	8002728 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e21f      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b61      	ldr	r3, [pc, #388]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0xe8>
 8003d1a:	e014      	b.n	8003d46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fd04 	bl	8002728 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fe fd00 	bl	8002728 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e20b      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	4b57      	ldr	r3, [pc, #348]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x110>
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d069      	beq.n	8003e26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d52:	4b50      	ldr	r3, [pc, #320]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5e:	4b4d      	ldr	r3, [pc, #308]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d11c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x190>
 8003d6a:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d116      	bne.n	8003da4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	4b47      	ldr	r3, [pc, #284]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_RCC_OscConfig+0x17a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d001      	beq.n	8003d8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e1df      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8e:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	493d      	ldr	r1, [pc, #244]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da2:	e040      	b.n	8003e26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d023      	beq.n	8003df4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dac:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a38      	ldr	r2, [pc, #224]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe fcb6 	bl	8002728 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fe fcb2 	bl	8002728 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e1bd      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd2:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dde:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4929      	ldr	r1, [pc, #164]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]
 8003df2:	e018      	b.n	8003e26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df4:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a26      	ldr	r2, [pc, #152]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fe fc92 	bl	8002728 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e08:	f7fe fc8e 	bl	8002728 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e199      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d038      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d019      	beq.n	8003e6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3e:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e46:	f7fe fc6f 	bl	8002728 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4e:	f7fe fc6b 	bl	8002728 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e176      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x23a>
 8003e6c:	e01a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e72:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fe fc55 	bl	8002728 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e82:	f7fe fc51 	bl	8002728 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d903      	bls.n	8003e98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e15c      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
 8003e94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e98:	4b91      	ldr	r3, [pc, #580]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80a4 	beq.w	8003ffa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb2:	4b8b      	ldr	r3, [pc, #556]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10d      	bne.n	8003eda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	4b88      	ldr	r3, [pc, #544]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a87      	ldr	r2, [pc, #540]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eca:	4b85      	ldr	r3, [pc, #532]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eda:	4b82      	ldr	r3, [pc, #520]	; (80040e4 <HAL_RCC_OscConfig+0x4d0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d118      	bne.n	8003f18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ee6:	4b7f      	ldr	r3, [pc, #508]	; (80040e4 <HAL_RCC_OscConfig+0x4d0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7e      	ldr	r2, [pc, #504]	; (80040e4 <HAL_RCC_OscConfig+0x4d0>)
 8003eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fc19 	bl	8002728 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efa:	f7fe fc15 	bl	8002728 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b64      	cmp	r3, #100	; 0x64
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e120      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f0c:	4b75      	ldr	r3, [pc, #468]	; (80040e4 <HAL_RCC_OscConfig+0x4d0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d106      	bne.n	8003f2e <HAL_RCC_OscConfig+0x31a>
 8003f20:	4b6f      	ldr	r3, [pc, #444]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4a6e      	ldr	r2, [pc, #440]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2c:	e02d      	b.n	8003f8a <HAL_RCC_OscConfig+0x376>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x33c>
 8003f36:	4b6a      	ldr	r3, [pc, #424]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a69      	ldr	r2, [pc, #420]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
 8003f42:	4b67      	ldr	r3, [pc, #412]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4a66      	ldr	r2, [pc, #408]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f48:	f023 0304 	bic.w	r3, r3, #4
 8003f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4e:	e01c      	b.n	8003f8a <HAL_RCC_OscConfig+0x376>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b05      	cmp	r3, #5
 8003f56:	d10c      	bne.n	8003f72 <HAL_RCC_OscConfig+0x35e>
 8003f58:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a60      	ldr	r2, [pc, #384]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f5e:	f043 0304 	orr.w	r3, r3, #4
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
 8003f64:	4b5e      	ldr	r3, [pc, #376]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	4a5d      	ldr	r2, [pc, #372]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f70:	e00b      	b.n	8003f8a <HAL_RCC_OscConfig+0x376>
 8003f72:	4b5b      	ldr	r3, [pc, #364]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	4a5a      	ldr	r2, [pc, #360]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7e:	4b58      	ldr	r3, [pc, #352]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	4a57      	ldr	r2, [pc, #348]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d015      	beq.n	8003fbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f92:	f7fe fbc9 	bl	8002728 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fe fbc5 	bl	8002728 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e0ce      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb0:	4b4b      	ldr	r3, [pc, #300]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0ee      	beq.n	8003f9a <HAL_RCC_OscConfig+0x386>
 8003fbc:	e014      	b.n	8003fe8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbe:	f7fe fbb3 	bl	8002728 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc6:	f7fe fbaf 	bl	8002728 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e0b8      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fdc:	4b40      	ldr	r3, [pc, #256]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1ee      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4b3c      	ldr	r3, [pc, #240]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	4a3b      	ldr	r2, [pc, #236]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80a4 	beq.w	800414c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004004:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b08      	cmp	r3, #8
 800400e:	d06b      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d149      	bne.n	80040ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004018:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a30      	ldr	r2, [pc, #192]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 800401e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe fb80 	bl	8002728 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fe fb7c 	bl	8002728 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e087      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403e:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	019b      	lsls	r3, r3, #6
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	3b01      	subs	r3, #1
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	4313      	orrs	r3, r2
 8004070:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8004072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004076:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 800407e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fe fb50 	bl	8002728 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408c:	f7fe fb4c 	bl	8002728 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e057      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x478>
 80040aa:	e04f      	b.n	800414c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0b      	ldr	r2, [pc, #44]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 80040b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fe fb36 	bl	8002728 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fe fb32 	bl	8002728 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e03d      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4ac>
 80040de:	e035      	b.n	800414c <HAL_RCC_OscConfig+0x538>
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040e8:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <HAL_RCC_OscConfig+0x544>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d028      	beq.n	8004148 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d121      	bne.n	8004148 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d11a      	bne.n	8004148 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800411e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004120:	4293      	cmp	r3, r2
 8004122:	d111      	bne.n	8004148 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	3b01      	subs	r3, #1
 8004132:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004134:	429a      	cmp	r2, r3
 8004136:	d107      	bne.n	8004148 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d001      	beq.n	800414c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800

0800415c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0d0      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004174:	4b6a      	ldr	r3, [pc, #424]	; (8004320 <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d910      	bls.n	80041a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b67      	ldr	r3, [pc, #412]	; (8004320 <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 020f 	bic.w	r2, r3, #15
 800418a:	4965      	ldr	r1, [pc, #404]	; (8004320 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b63      	ldr	r3, [pc, #396]	; (8004320 <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0b8      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d020      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041bc:	4b59      	ldr	r3, [pc, #356]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	4a58      	ldr	r2, [pc, #352]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d4:	4b53      	ldr	r3, [pc, #332]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a52      	ldr	r2, [pc, #328]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 80041da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e0:	4b50      	ldr	r3, [pc, #320]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	494d      	ldr	r1, [pc, #308]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d040      	beq.n	8004280 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d107      	bne.n	8004216 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	4b47      	ldr	r3, [pc, #284]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d115      	bne.n	800423e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e07f      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	4b41      	ldr	r3, [pc, #260]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e073      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	4b3d      	ldr	r3, [pc, #244]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e06b      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800423e:	4b39      	ldr	r3, [pc, #228]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4936      	ldr	r1, [pc, #216]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004250:	f7fe fa6a 	bl	8002728 <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	e00a      	b.n	800426e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fe fa66 	bl	8002728 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	; 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e053      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	4b2d      	ldr	r3, [pc, #180]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 020c 	and.w	r2, r3, #12
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d1eb      	bne.n	8004258 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004280:	4b27      	ldr	r3, [pc, #156]	; (8004320 <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d210      	bcs.n	80042b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b24      	ldr	r3, [pc, #144]	; (8004320 <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 020f 	bic.w	r2, r3, #15
 8004296:	4922      	ldr	r1, [pc, #136]	; (8004320 <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	4b20      	ldr	r3, [pc, #128]	; (8004320 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d001      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e032      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4916      	ldr	r1, [pc, #88]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	490e      	ldr	r1, [pc, #56]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ee:	f000 f821 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80042f2:	4602      	mov	r2, r0
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	490a      	ldr	r1, [pc, #40]	; (8004328 <HAL_RCC_ClockConfig+0x1cc>)
 8004300:	5ccb      	ldrb	r3, [r1, r3]
 8004302:	fa22 f303 	lsr.w	r3, r2, r3
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <HAL_RCC_ClockConfig+0x1d0>)
 8004308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800430a:	4b09      	ldr	r3, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1d4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe f9c6 	bl	80026a0 <HAL_InitTick>

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40023c00 	.word	0x40023c00
 8004324:	40023800 	.word	0x40023800
 8004328:	08009e10 	.word	0x08009e10
 800432c:	20000000 	.word	0x20000000
 8004330:	20000008 	.word	0x20000008

08004334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004334:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	2300      	movs	r3, #0
 8004346:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800434c:	4b67      	ldr	r3, [pc, #412]	; (80044ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b08      	cmp	r3, #8
 8004356:	d00d      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0x40>
 8004358:	2b08      	cmp	r3, #8
 800435a:	f200 80bd 	bhi.w	80044d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x34>
 8004362:	2b04      	cmp	r3, #4
 8004364:	d003      	beq.n	800436e <HAL_RCC_GetSysClockFreq+0x3a>
 8004366:	e0b7      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004368:	4b61      	ldr	r3, [pc, #388]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800436a:	60bb      	str	r3, [r7, #8]
      break;
 800436c:	e0b7      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800436e:	4b61      	ldr	r3, [pc, #388]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004370:	60bb      	str	r3, [r7, #8]
      break;
 8004372:	e0b4      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004374:	4b5d      	ldr	r3, [pc, #372]	; (80044ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800437c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800437e:	4b5b      	ldr	r3, [pc, #364]	; (80044ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d04d      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438a:	4b58      	ldr	r3, [pc, #352]	; (80044ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	461a      	mov	r2, r3
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	f240 10ff 	movw	r0, #511	; 0x1ff
 800439a:	f04f 0100 	mov.w	r1, #0
 800439e:	ea02 0800 	and.w	r8, r2, r0
 80043a2:	ea03 0901 	and.w	r9, r3, r1
 80043a6:	4640      	mov	r0, r8
 80043a8:	4649      	mov	r1, r9
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	014b      	lsls	r3, r1, #5
 80043b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043b8:	0142      	lsls	r2, r0, #5
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	ebb0 0008 	subs.w	r0, r0, r8
 80043c2:	eb61 0109 	sbc.w	r1, r1, r9
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	018b      	lsls	r3, r1, #6
 80043d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043d4:	0182      	lsls	r2, r0, #6
 80043d6:	1a12      	subs	r2, r2, r0
 80043d8:	eb63 0301 	sbc.w	r3, r3, r1
 80043dc:	f04f 0000 	mov.w	r0, #0
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	00d9      	lsls	r1, r3, #3
 80043e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043ea:	00d0      	lsls	r0, r2, #3
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	eb12 0208 	adds.w	r2, r2, r8
 80043f4:	eb43 0309 	adc.w	r3, r3, r9
 80043f8:	f04f 0000 	mov.w	r0, #0
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	0259      	lsls	r1, r3, #9
 8004402:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004406:	0250      	lsls	r0, r2, #9
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	461a      	mov	r2, r3
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	f7fc fc86 	bl	8000d28 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4613      	mov	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e04a      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004426:	4b31      	ldr	r3, [pc, #196]	; (80044ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	099b      	lsrs	r3, r3, #6
 800442c:	461a      	mov	r2, r3
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004436:	f04f 0100 	mov.w	r1, #0
 800443a:	ea02 0400 	and.w	r4, r2, r0
 800443e:	ea03 0501 	and.w	r5, r3, r1
 8004442:	4620      	mov	r0, r4
 8004444:	4629      	mov	r1, r5
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	014b      	lsls	r3, r1, #5
 8004450:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004454:	0142      	lsls	r2, r0, #5
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	1b00      	subs	r0, r0, r4
 800445c:	eb61 0105 	sbc.w	r1, r1, r5
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	018b      	lsls	r3, r1, #6
 800446a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800446e:	0182      	lsls	r2, r0, #6
 8004470:	1a12      	subs	r2, r2, r0
 8004472:	eb63 0301 	sbc.w	r3, r3, r1
 8004476:	f04f 0000 	mov.w	r0, #0
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	00d9      	lsls	r1, r3, #3
 8004480:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004484:	00d0      	lsls	r0, r2, #3
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	1912      	adds	r2, r2, r4
 800448c:	eb45 0303 	adc.w	r3, r5, r3
 8004490:	f04f 0000 	mov.w	r0, #0
 8004494:	f04f 0100 	mov.w	r1, #0
 8004498:	0299      	lsls	r1, r3, #10
 800449a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800449e:	0290      	lsls	r0, r2, #10
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	f7fc fc3a 	bl	8000d28 <__aeabi_uldivmod>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4613      	mov	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	3301      	adds	r3, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	60bb      	str	r3, [r7, #8]
      break;
 80044d6:	e002      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044da:	60bb      	str	r3, [r7, #8]
      break;
 80044dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044de:	68bb      	ldr	r3, [r7, #8]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	00f42400 	.word	0x00f42400
 80044f4:	007a1200 	.word	0x007a1200

080044f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCC_GetHCLKFreq+0x14>)
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000000 	.word	0x20000000

08004510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004514:	f7ff fff0 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004518:	4602      	mov	r2, r0
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	0a9b      	lsrs	r3, r3, #10
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	4903      	ldr	r1, [pc, #12]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004526:	5ccb      	ldrb	r3, [r1, r3]
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40023800 	.word	0x40023800
 8004534:	08009e20 	.word	0x08009e20

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800453c:	f7ff ffdc 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0b5b      	lsrs	r3, r3, #13
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4903      	ldr	r1, [pc, #12]	; (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	08009e20 	.word	0x08009e20

08004560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004588:	4b69      	ldr	r3, [pc, #420]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a68      	ldr	r2, [pc, #416]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004592:	6093      	str	r3, [r2, #8]
 8004594:	4b66      	ldr	r3, [pc, #408]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459c:	4964      	ldr	r1, [pc, #400]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d017      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ba:	4b5d      	ldr	r3, [pc, #372]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	4959      	ldr	r1, [pc, #356]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d8:	d101      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045da:	2301      	movs	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045e6:	2301      	movs	r3, #1
 80045e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d017      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045f6:	4b4e      	ldr	r3, [pc, #312]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	494a      	ldr	r1, [pc, #296]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004614:	d101      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004616:	2301      	movs	r3, #1
 8004618:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 808b 	beq.w	800475a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004644:	4b3a      	ldr	r3, [pc, #232]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	4a39      	ldr	r2, [pc, #228]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	6413      	str	r3, [r2, #64]	; 0x40
 8004650:	4b37      	ldr	r3, [pc, #220]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800465c:	4b35      	ldr	r3, [pc, #212]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a34      	ldr	r2, [pc, #208]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7fe f85e 	bl	8002728 <HAL_GetTick>
 800466c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004670:	f7fe f85a 	bl	8002728 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e357      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004682:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800468e:	4b28      	ldr	r3, [pc, #160]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d035      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d02e      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ac:	4b20      	ldr	r3, [pc, #128]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046b6:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c2:	4b1b      	ldr	r3, [pc, #108]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4a1a      	ldr	r2, [pc, #104]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046ce:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046d4:	4b16      	ldr	r3, [pc, #88]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d114      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fe f822 	bl	8002728 <HAL_GetTick>
 80046e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e6:	e00a      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e8:	f7fe f81e 	bl	8002728 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e319      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0ee      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004716:	d111      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004726:	400b      	ands	r3, r1
 8004728:	4901      	ldr	r1, [pc, #4]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
 800472e:	e00b      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
 8004738:	0ffffcff 	.word	0x0ffffcff
 800473c:	4bb1      	ldr	r3, [pc, #708]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4ab0      	ldr	r2, [pc, #704]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004742:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004746:	6093      	str	r3, [r2, #8]
 8004748:	4bae      	ldr	r3, [pc, #696]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800474a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004754:	49ab      	ldr	r1, [pc, #684]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004756:	4313      	orrs	r3, r2
 8004758:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b00      	cmp	r3, #0
 8004764:	d010      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004766:	4ba7      	ldr	r3, [pc, #668]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476c:	4aa5      	ldr	r2, [pc, #660]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800476e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004772:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004776:	4ba3      	ldr	r3, [pc, #652]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004778:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	49a0      	ldr	r1, [pc, #640]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004794:	4b9b      	ldr	r3, [pc, #620]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a2:	4998      	ldr	r1, [pc, #608]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047b6:	4b93      	ldr	r3, [pc, #588]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c4:	498f      	ldr	r1, [pc, #572]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047d8:	4b8a      	ldr	r3, [pc, #552]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e6:	4987      	ldr	r1, [pc, #540]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047fa:	4b82      	ldr	r3, [pc, #520]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	497e      	ldr	r1, [pc, #504]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800481c:	4b79      	ldr	r3, [pc, #484]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f023 0203 	bic.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	4976      	ldr	r1, [pc, #472]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800483e:	4b71      	ldr	r3, [pc, #452]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	f023 020c 	bic.w	r2, r3, #12
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484c:	496d      	ldr	r1, [pc, #436]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004860:	4b68      	ldr	r3, [pc, #416]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486e:	4965      	ldr	r1, [pc, #404]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004882:	4b60      	ldr	r3, [pc, #384]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004890:	495c      	ldr	r1, [pc, #368]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048a4:	4b57      	ldr	r3, [pc, #348]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	4954      	ldr	r1, [pc, #336]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048c6:	4b4f      	ldr	r3, [pc, #316]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d4:	494b      	ldr	r1, [pc, #300]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048e8:	4b46      	ldr	r3, [pc, #280]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f6:	4943      	ldr	r1, [pc, #268]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800490a:	4b3e      	ldr	r3, [pc, #248]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004918:	493a      	ldr	r1, [pc, #232]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800492c:	4b35      	ldr	r3, [pc, #212]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800493a:	4932      	ldr	r1, [pc, #200]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d011      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800494e:	4b2d      	ldr	r3, [pc, #180]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800495c:	4929      	ldr	r1, [pc, #164]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800496c:	d101      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800496e:	2301      	movs	r3, #1
 8004970:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800497e:	2301      	movs	r3, #1
 8004980:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800498e:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499c:	4919      	ldr	r1, [pc, #100]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049b0:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049c0:	4910      	ldr	r1, [pc, #64]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d006      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80d9 	beq.w	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a08      	ldr	r2, [pc, #32]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fd fe9e 	bl	8002728 <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049ee:	e00b      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049f0:	f7fd fe9a 	bl	8002728 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d904      	bls.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e197      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a08:	4b6c      	ldr	r3, [pc, #432]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1ed      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d021      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11d      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a28:	4b64      	ldr	r3, [pc, #400]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2e:	0c1b      	lsrs	r3, r3, #16
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a36:	4b61      	ldr	r3, [pc, #388]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3c:	0e1b      	lsrs	r3, r3, #24
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	019a      	lsls	r2, r3, #6
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	041b      	lsls	r3, r3, #16
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	061b      	lsls	r3, r3, #24
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	071b      	lsls	r3, r3, #28
 8004a5c:	4957      	ldr	r1, [pc, #348]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d004      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d02e      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a8e:	d129      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a90:	4b4a      	ldr	r3, [pc, #296]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a96:	0c1b      	lsrs	r3, r3, #16
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a9e:	4b47      	ldr	r3, [pc, #284]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa4:	0f1b      	lsrs	r3, r3, #28
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	019a      	lsls	r2, r3, #6
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	041b      	lsls	r3, r3, #16
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	061b      	lsls	r3, r3, #24
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	071b      	lsls	r3, r3, #28
 8004ac4:	493d      	ldr	r1, [pc, #244]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004acc:	4b3b      	ldr	r3, [pc, #236]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad2:	f023 021f 	bic.w	r2, r3, #31
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	3b01      	subs	r3, #1
 8004adc:	4937      	ldr	r1, [pc, #220]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01d      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004af0:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af6:	0e1b      	lsrs	r3, r3, #24
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004afe:	4b2f      	ldr	r3, [pc, #188]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b04:	0f1b      	lsrs	r3, r3, #28
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	019a      	lsls	r2, r3, #6
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	071b      	lsls	r3, r3, #28
 8004b24:	4925      	ldr	r1, [pc, #148]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d011      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	019a      	lsls	r2, r3, #6
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	041b      	lsls	r3, r3, #16
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	061b      	lsls	r3, r3, #24
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	071b      	lsls	r3, r3, #28
 8004b54:	4919      	ldr	r1, [pc, #100]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b5c:	4b17      	ldr	r3, [pc, #92]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b68:	f7fd fdde 	bl	8002728 <HAL_GetTick>
 8004b6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b70:	f7fd fdda 	bl	8002728 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e0d7      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b82:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 80cd 	bne.w	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba2:	f7fd fdc1 	bl	8002728 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004baa:	f7fd fdbd 	bl	8002728 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b64      	cmp	r3, #100	; 0x64
 8004bb6:	d903      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e0ba      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004bbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bc0:	4b5e      	ldr	r3, [pc, #376]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bcc:	d0ed      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d02e      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d12a      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bf6:	4b51      	ldr	r3, [pc, #324]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c04:	4b4d      	ldr	r3, [pc, #308]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0a:	0f1b      	lsrs	r3, r3, #28
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	019a      	lsls	r2, r3, #6
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	431a      	orrs	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	071b      	lsls	r3, r3, #28
 8004c2a:	4944      	ldr	r1, [pc, #272]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c32:	4b42      	ldr	r3, [pc, #264]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	3b01      	subs	r3, #1
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	493d      	ldr	r1, [pc, #244]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d022      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c60:	d11d      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c62:	4b36      	ldr	r3, [pc, #216]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	0e1b      	lsrs	r3, r3, #24
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c70:	4b32      	ldr	r3, [pc, #200]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	0f1b      	lsrs	r3, r3, #28
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	019a      	lsls	r2, r3, #6
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	061b      	lsls	r3, r3, #24
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	071b      	lsls	r3, r3, #28
 8004c96:	4929      	ldr	r1, [pc, #164]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d028      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004caa:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb0:	0e1b      	lsrs	r3, r3, #24
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cb8:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	0c1b      	lsrs	r3, r3, #16
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	019a      	lsls	r2, r3, #6
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	041b      	lsls	r3, r3, #16
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	071b      	lsls	r3, r3, #28
 8004cde:	4917      	ldr	r1, [pc, #92]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4911      	ldr	r1, [pc, #68]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0e      	ldr	r2, [pc, #56]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d08:	f7fd fd0e 	bl	8002728 <HAL_GetTick>
 8004d0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d10:	f7fd fd0a 	bl	8002728 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	; 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e007      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d2e:	d1ef      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800

08004d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e049      	b.n	8004de6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fd fa42 	bl	80021f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f000 fd30 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d001      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e054      	b.n	8004eb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a26      	ldr	r2, [pc, #152]	; (8004ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d022      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x80>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e32:	d01d      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x80>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a22      	ldr	r2, [pc, #136]	; (8004ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d018      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x80>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a21      	ldr	r2, [pc, #132]	; (8004ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x80>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00e      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x80>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x80>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1c      	ldr	r2, [pc, #112]	; (8004ed4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x80>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d115      	bne.n	8004e9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_TIM_Base_Start_IT+0xec>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b06      	cmp	r3, #6
 8004e80:	d015      	beq.n	8004eae <HAL_TIM_Base_Start_IT+0xbe>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e88:	d011      	beq.n	8004eae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9a:	e008      	b.n	8004eae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	e000      	b.n	8004eb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40001800 	.word	0x40001800
 8004edc:	00010007 	.word	0x00010007

08004ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e049      	b.n	8004f86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f841 	bl	8004f8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f000 fc60 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <HAL_TIM_PWM_Start+0x24>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	e03c      	b.n	8005042 <HAL_TIM_PWM_Start+0x9e>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d109      	bne.n	8004fe2 <HAL_TIM_PWM_Start+0x3e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	bf14      	ite	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	2300      	moveq	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	e02f      	b.n	8005042 <HAL_TIM_PWM_Start+0x9e>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d109      	bne.n	8004ffc <HAL_TIM_PWM_Start+0x58>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	bf14      	ite	ne
 8004ff4:	2301      	movne	r3, #1
 8004ff6:	2300      	moveq	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	e022      	b.n	8005042 <HAL_TIM_PWM_Start+0x9e>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b0c      	cmp	r3, #12
 8005000:	d109      	bne.n	8005016 <HAL_TIM_PWM_Start+0x72>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	bf14      	ite	ne
 800500e:	2301      	movne	r3, #1
 8005010:	2300      	moveq	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	e015      	b.n	8005042 <HAL_TIM_PWM_Start+0x9e>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b10      	cmp	r3, #16
 800501a:	d109      	bne.n	8005030 <HAL_TIM_PWM_Start+0x8c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	bf14      	ite	ne
 8005028:	2301      	movne	r3, #1
 800502a:	2300      	moveq	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	e008      	b.n	8005042 <HAL_TIM_PWM_Start+0x9e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e092      	b.n	8005170 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <HAL_TIM_PWM_Start+0xb6>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005058:	e023      	b.n	80050a2 <HAL_TIM_PWM_Start+0xfe>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d104      	bne.n	800506a <HAL_TIM_PWM_Start+0xc6>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005068:	e01b      	b.n	80050a2 <HAL_TIM_PWM_Start+0xfe>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b08      	cmp	r3, #8
 800506e:	d104      	bne.n	800507a <HAL_TIM_PWM_Start+0xd6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005078:	e013      	b.n	80050a2 <HAL_TIM_PWM_Start+0xfe>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b0c      	cmp	r3, #12
 800507e:	d104      	bne.n	800508a <HAL_TIM_PWM_Start+0xe6>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005088:	e00b      	b.n	80050a2 <HAL_TIM_PWM_Start+0xfe>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b10      	cmp	r3, #16
 800508e:	d104      	bne.n	800509a <HAL_TIM_PWM_Start+0xf6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005098:	e003      	b.n	80050a2 <HAL_TIM_PWM_Start+0xfe>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2201      	movs	r2, #1
 80050a8:	6839      	ldr	r1, [r7, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 ff32 	bl	8005f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a30      	ldr	r2, [pc, #192]	; (8005178 <HAL_TIM_PWM_Start+0x1d4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIM_PWM_Start+0x120>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a2f      	ldr	r2, [pc, #188]	; (800517c <HAL_TIM_PWM_Start+0x1d8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d101      	bne.n	80050c8 <HAL_TIM_PWM_Start+0x124>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <HAL_TIM_PWM_Start+0x126>
 80050c8:	2300      	movs	r3, #0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a25      	ldr	r2, [pc, #148]	; (8005178 <HAL_TIM_PWM_Start+0x1d4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d022      	beq.n	800512e <HAL_TIM_PWM_Start+0x18a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f0:	d01d      	beq.n	800512e <HAL_TIM_PWM_Start+0x18a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a22      	ldr	r2, [pc, #136]	; (8005180 <HAL_TIM_PWM_Start+0x1dc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d018      	beq.n	800512e <HAL_TIM_PWM_Start+0x18a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a20      	ldr	r2, [pc, #128]	; (8005184 <HAL_TIM_PWM_Start+0x1e0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_TIM_PWM_Start+0x18a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <HAL_TIM_PWM_Start+0x1e4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_TIM_PWM_Start+0x18a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a19      	ldr	r2, [pc, #100]	; (800517c <HAL_TIM_PWM_Start+0x1d8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_TIM_PWM_Start+0x18a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1b      	ldr	r2, [pc, #108]	; (800518c <HAL_TIM_PWM_Start+0x1e8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_TIM_PWM_Start+0x18a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a19      	ldr	r2, [pc, #100]	; (8005190 <HAL_TIM_PWM_Start+0x1ec>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d115      	bne.n	800515a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	4b17      	ldr	r3, [pc, #92]	; (8005194 <HAL_TIM_PWM_Start+0x1f0>)
 8005136:	4013      	ands	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b06      	cmp	r3, #6
 800513e:	d015      	beq.n	800516c <HAL_TIM_PWM_Start+0x1c8>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005146:	d011      	beq.n	800516c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	e008      	b.n	800516c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e000      	b.n	800516e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40010000 	.word	0x40010000
 800517c:	40010400 	.word	0x40010400
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	40014000 	.word	0x40014000
 8005190:	40001800 	.word	0x40001800
 8005194:	00010007 	.word	0x00010007

08005198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d122      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d11b      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0202 	mvn.w	r2, #2
 80051c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fae4 	bl	80057a8 <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fad6 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fae7 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d122      	bne.n	8005248 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b04      	cmp	r3, #4
 800520e:	d11b      	bne.n	8005248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0204 	mvn.w	r2, #4
 8005218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 faba 	bl	80057a8 <HAL_TIM_IC_CaptureCallback>
 8005234:	e005      	b.n	8005242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 faac 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fabd 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b08      	cmp	r3, #8
 8005254:	d122      	bne.n	800529c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b08      	cmp	r3, #8
 8005262:	d11b      	bne.n	800529c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0208 	mvn.w	r2, #8
 800526c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2204      	movs	r2, #4
 8005272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fa90 	bl	80057a8 <HAL_TIM_IC_CaptureCallback>
 8005288:	e005      	b.n	8005296 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa82 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fa93 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d122      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d11b      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0210 	mvn.w	r2, #16
 80052c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2208      	movs	r2, #8
 80052c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa66 	bl	80057a8 <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa58 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fa69 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10e      	bne.n	800531c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b01      	cmp	r3, #1
 800530a:	d107      	bne.n	800531c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0201 	mvn.w	r2, #1
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fc ffe4 	bl	80022e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005326:	2b80      	cmp	r3, #128	; 0x80
 8005328:	d10e      	bne.n	8005348 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005334:	2b80      	cmp	r3, #128	; 0x80
 8005336:	d107      	bne.n	8005348 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fea4 	bl	8006090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005356:	d10e      	bne.n	8005376 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	d107      	bne.n	8005376 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800536e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fe97 	bl	80060a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b40      	cmp	r3, #64	; 0x40
 8005382:	d10e      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d107      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800539a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fa17 	bl	80057d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d10e      	bne.n	80053ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d107      	bne.n	80053ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f06f 0220 	mvn.w	r2, #32
 80053c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fe57 	bl	800607c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e0ff      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b14      	cmp	r3, #20
 8005402:	f200 80f0 	bhi.w	80055e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005406:	a201      	add	r2, pc, #4	; (adr r2, 800540c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005461 	.word	0x08005461
 8005410:	080055e7 	.word	0x080055e7
 8005414:	080055e7 	.word	0x080055e7
 8005418:	080055e7 	.word	0x080055e7
 800541c:	080054a1 	.word	0x080054a1
 8005420:	080055e7 	.word	0x080055e7
 8005424:	080055e7 	.word	0x080055e7
 8005428:	080055e7 	.word	0x080055e7
 800542c:	080054e3 	.word	0x080054e3
 8005430:	080055e7 	.word	0x080055e7
 8005434:	080055e7 	.word	0x080055e7
 8005438:	080055e7 	.word	0x080055e7
 800543c:	08005523 	.word	0x08005523
 8005440:	080055e7 	.word	0x080055e7
 8005444:	080055e7 	.word	0x080055e7
 8005448:	080055e7 	.word	0x080055e7
 800544c:	08005565 	.word	0x08005565
 8005450:	080055e7 	.word	0x080055e7
 8005454:	080055e7 	.word	0x080055e7
 8005458:	080055e7 	.word	0x080055e7
 800545c:	080055a5 	.word	0x080055a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fa5c 	bl	8005924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0208 	orr.w	r2, r2, #8
 800547a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0204 	bic.w	r2, r2, #4
 800548a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6999      	ldr	r1, [r3, #24]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	619a      	str	r2, [r3, #24]
      break;
 800549e:	e0a5      	b.n	80055ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 faae 	bl	8005a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6999      	ldr	r1, [r3, #24]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	619a      	str	r2, [r3, #24]
      break;
 80054e0:	e084      	b.n	80055ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fb05 	bl	8005af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0208 	orr.w	r2, r2, #8
 80054fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0204 	bic.w	r2, r2, #4
 800550c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69d9      	ldr	r1, [r3, #28]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	61da      	str	r2, [r3, #28]
      break;
 8005520:	e064      	b.n	80055ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68b9      	ldr	r1, [r7, #8]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fb5b 	bl	8005be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800553c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69d9      	ldr	r1, [r3, #28]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	021a      	lsls	r2, r3, #8
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	61da      	str	r2, [r3, #28]
      break;
 8005562:	e043      	b.n	80055ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fb92 	bl	8005c94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0208 	orr.w	r2, r2, #8
 800557e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0204 	bic.w	r2, r2, #4
 800558e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055a2:	e023      	b.n	80055ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fbc4 	bl	8005d38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055e4:	e002      	b.n	80055ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
      break;
 80055ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop

08005600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_TIM_ConfigClockSource+0x1c>
 8005618:	2302      	movs	r3, #2
 800561a:	e0b4      	b.n	8005786 <HAL_TIM_ConfigClockSource+0x186>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	4b56      	ldr	r3, [pc, #344]	; (8005790 <HAL_TIM_ConfigClockSource+0x190>)
 8005638:	4013      	ands	r3, r2
 800563a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005654:	d03e      	beq.n	80056d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565a:	f200 8087 	bhi.w	800576c <HAL_TIM_ConfigClockSource+0x16c>
 800565e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005662:	f000 8086 	beq.w	8005772 <HAL_TIM_ConfigClockSource+0x172>
 8005666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566a:	d87f      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x16c>
 800566c:	2b70      	cmp	r3, #112	; 0x70
 800566e:	d01a      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005670:	2b70      	cmp	r3, #112	; 0x70
 8005672:	d87b      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x16c>
 8005674:	2b60      	cmp	r3, #96	; 0x60
 8005676:	d050      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x11a>
 8005678:	2b60      	cmp	r3, #96	; 0x60
 800567a:	d877      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x16c>
 800567c:	2b50      	cmp	r3, #80	; 0x50
 800567e:	d03c      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0xfa>
 8005680:	2b50      	cmp	r3, #80	; 0x50
 8005682:	d873      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x16c>
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d058      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x13a>
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d86f      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x16c>
 800568c:	2b30      	cmp	r3, #48	; 0x30
 800568e:	d064      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x15a>
 8005690:	2b30      	cmp	r3, #48	; 0x30
 8005692:	d86b      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x16c>
 8005694:	2b20      	cmp	r3, #32
 8005696:	d060      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x15a>
 8005698:	2b20      	cmp	r3, #32
 800569a:	d867      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x16c>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d05c      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x15a>
 80056a0:	2b10      	cmp	r3, #16
 80056a2:	d05a      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x15a>
 80056a4:	e062      	b.n	800576c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6899      	ldr	r1, [r3, #8]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f000 fc0d 	bl	8005ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	609a      	str	r2, [r3, #8]
      break;
 80056d2:	e04f      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6899      	ldr	r1, [r3, #8]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f000 fbf6 	bl	8005ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f6:	609a      	str	r2, [r3, #8]
      break;
 80056f8:	e03c      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6859      	ldr	r1, [r3, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	461a      	mov	r2, r3
 8005708:	f000 fb6a 	bl	8005de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2150      	movs	r1, #80	; 0x50
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fbc3 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005718:	e02c      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6859      	ldr	r1, [r3, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	461a      	mov	r2, r3
 8005728:	f000 fb89 	bl	8005e3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2160      	movs	r1, #96	; 0x60
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fbb3 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005738:	e01c      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6859      	ldr	r1, [r3, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	461a      	mov	r2, r3
 8005748:	f000 fb4a 	bl	8005de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2140      	movs	r1, #64	; 0x40
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fba3 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005758:	e00c      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f000 fb9a 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 800576a:	e003      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
      break;
 8005770:	e000      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	fffeff88 	.word	0xfffeff88

08005794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a40      	ldr	r2, [pc, #256]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d013      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005802:	d00f      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a3d      	ldr	r2, [pc, #244]	; (80058fc <TIM_Base_SetConfig+0x118>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00b      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3c      	ldr	r2, [pc, #240]	; (8005900 <TIM_Base_SetConfig+0x11c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a3b      	ldr	r2, [pc, #236]	; (8005904 <TIM_Base_SetConfig+0x120>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a3a      	ldr	r2, [pc, #232]	; (8005908 <TIM_Base_SetConfig+0x124>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d108      	bne.n	8005836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2f      	ldr	r2, [pc, #188]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005844:	d027      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2c      	ldr	r2, [pc, #176]	; (80058fc <TIM_Base_SetConfig+0x118>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d023      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2b      	ldr	r2, [pc, #172]	; (8005900 <TIM_Base_SetConfig+0x11c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01f      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2a      	ldr	r2, [pc, #168]	; (8005904 <TIM_Base_SetConfig+0x120>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d01b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a29      	ldr	r2, [pc, #164]	; (8005908 <TIM_Base_SetConfig+0x124>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d017      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a28      	ldr	r2, [pc, #160]	; (800590c <TIM_Base_SetConfig+0x128>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a27      	ldr	r2, [pc, #156]	; (8005910 <TIM_Base_SetConfig+0x12c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00f      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a26      	ldr	r2, [pc, #152]	; (8005914 <TIM_Base_SetConfig+0x130>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a25      	ldr	r2, [pc, #148]	; (8005918 <TIM_Base_SetConfig+0x134>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d007      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a24      	ldr	r2, [pc, #144]	; (800591c <TIM_Base_SetConfig+0x138>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d003      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a23      	ldr	r2, [pc, #140]	; (8005920 <TIM_Base_SetConfig+0x13c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d108      	bne.n	80058a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0xf8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a0c      	ldr	r2, [pc, #48]	; (8005908 <TIM_Base_SetConfig+0x124>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d103      	bne.n	80058e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	615a      	str	r2, [r3, #20]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800
 8005904:	40000c00 	.word	0x40000c00
 8005908:	40010400 	.word	0x40010400
 800590c:	40014000 	.word	0x40014000
 8005910:	40014400 	.word	0x40014400
 8005914:	40014800 	.word	0x40014800
 8005918:	40001800 	.word	0x40001800
 800591c:	40001c00 	.word	0x40001c00
 8005920:	40002000 	.word	0x40002000

08005924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f023 0201 	bic.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4b2b      	ldr	r3, [pc, #172]	; (80059fc <TIM_OC1_SetConfig+0xd8>)
 8005950:	4013      	ands	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f023 0302 	bic.w	r3, r3, #2
 800596c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a21      	ldr	r2, [pc, #132]	; (8005a00 <TIM_OC1_SetConfig+0xdc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_OC1_SetConfig+0x64>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a20      	ldr	r2, [pc, #128]	; (8005a04 <TIM_OC1_SetConfig+0xe0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d10c      	bne.n	80059a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f023 0308 	bic.w	r3, r3, #8
 800598e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f023 0304 	bic.w	r3, r3, #4
 80059a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <TIM_OC1_SetConfig+0xdc>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d003      	beq.n	80059b2 <TIM_OC1_SetConfig+0x8e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <TIM_OC1_SetConfig+0xe0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d111      	bne.n	80059d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	621a      	str	r2, [r3, #32]
}
 80059f0:	bf00      	nop
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	fffeff8f 	.word	0xfffeff8f
 8005a00:	40010000 	.word	0x40010000
 8005a04:	40010400 	.word	0x40010400

08005a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f023 0210 	bic.w	r2, r3, #16
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4b2e      	ldr	r3, [pc, #184]	; (8005aec <TIM_OC2_SetConfig+0xe4>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f023 0320 	bic.w	r3, r3, #32
 8005a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a23      	ldr	r2, [pc, #140]	; (8005af0 <TIM_OC2_SetConfig+0xe8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_OC2_SetConfig+0x68>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a22      	ldr	r2, [pc, #136]	; (8005af4 <TIM_OC2_SetConfig+0xec>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d10d      	bne.n	8005a8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <TIM_OC2_SetConfig+0xe8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_OC2_SetConfig+0x94>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a17      	ldr	r2, [pc, #92]	; (8005af4 <TIM_OC2_SetConfig+0xec>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d113      	bne.n	8005ac4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	feff8fff 	.word	0xfeff8fff
 8005af0:	40010000 	.word	0x40010000
 8005af4:	40010400 	.word	0x40010400

08005af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4b2d      	ldr	r3, [pc, #180]	; (8005bd8 <TIM_OC3_SetConfig+0xe0>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a22      	ldr	r2, [pc, #136]	; (8005bdc <TIM_OC3_SetConfig+0xe4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d003      	beq.n	8005b5e <TIM_OC3_SetConfig+0x66>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a21      	ldr	r2, [pc, #132]	; (8005be0 <TIM_OC3_SetConfig+0xe8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d10d      	bne.n	8005b7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a17      	ldr	r2, [pc, #92]	; (8005bdc <TIM_OC3_SetConfig+0xe4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_OC3_SetConfig+0x92>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <TIM_OC3_SetConfig+0xe8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d113      	bne.n	8005bb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	621a      	str	r2, [r3, #32]
}
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	fffeff8f 	.word	0xfffeff8f
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40010400 	.word	0x40010400

08005be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <TIM_OC4_SetConfig+0xa4>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	031b      	lsls	r3, r3, #12
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a13      	ldr	r2, [pc, #76]	; (8005c8c <TIM_OC4_SetConfig+0xa8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_OC4_SetConfig+0x68>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <TIM_OC4_SetConfig+0xac>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d109      	bne.n	8005c60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	019b      	lsls	r3, r3, #6
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	621a      	str	r2, [r3, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	feff8fff 	.word	0xfeff8fff
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400

08005c94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4b1b      	ldr	r3, [pc, #108]	; (8005d2c <TIM_OC5_SetConfig+0x98>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	041b      	lsls	r3, r3, #16
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a12      	ldr	r2, [pc, #72]	; (8005d30 <TIM_OC5_SetConfig+0x9c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_OC5_SetConfig+0x5e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a11      	ldr	r2, [pc, #68]	; (8005d34 <TIM_OC5_SetConfig+0xa0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d109      	bne.n	8005d06 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	fffeff8f 	.word	0xfffeff8f
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40010400 	.word	0x40010400

08005d38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <TIM_OC6_SetConfig+0x9c>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	051b      	lsls	r3, r3, #20
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a13      	ldr	r2, [pc, #76]	; (8005dd8 <TIM_OC6_SetConfig+0xa0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_OC6_SetConfig+0x60>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <TIM_OC6_SetConfig+0xa4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d109      	bne.n	8005dac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	029b      	lsls	r3, r3, #10
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	feff8fff 	.word	0xfeff8fff
 8005dd8:	40010000 	.word	0x40010000
 8005ddc:	40010400 	.word	0x40010400

08005de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0201 	bic.w	r2, r3, #1
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 030a 	bic.w	r3, r3, #10
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b087      	sub	sp, #28
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f023 0210 	bic.w	r2, r3, #16
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	031b      	lsls	r3, r3, #12
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	621a      	str	r2, [r3, #32]
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f043 0307 	orr.w	r3, r3, #7
 8005ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	609a      	str	r2, [r3, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	021a      	lsls	r2, r3, #8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	609a      	str	r2, [r3, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	2201      	movs	r2, #1
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a1a      	ldr	r2, [r3, #32]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	43db      	mvns	r3, r3
 8005f36:	401a      	ands	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1a      	ldr	r2, [r3, #32]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
	...

08005f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e06d      	b.n	8006054 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a30      	ldr	r2, [pc, #192]	; (8006060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a2f      	ldr	r2, [pc, #188]	; (8006064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d108      	bne.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a20      	ldr	r2, [pc, #128]	; (8006060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d022      	beq.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fea:	d01d      	beq.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1d      	ldr	r2, [pc, #116]	; (8006068 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d018      	beq.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1c      	ldr	r2, [pc, #112]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1a      	ldr	r2, [pc, #104]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a15      	ldr	r2, [pc, #84]	; (8006064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d009      	beq.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a16      	ldr	r2, [pc, #88]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a15      	ldr	r2, [pc, #84]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d10c      	bne.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800602e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	4313      	orrs	r3, r2
 8006038:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	40010000 	.word	0x40010000
 8006064:	40010400 	.word	0x40010400
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40000c00 	.word	0x40000c00
 8006074:	40014000 	.word	0x40014000
 8006078:	40001800 	.word	0x40001800

0800607c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e040      	b.n	800614c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fc f9a2 	bl	8002424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2224      	movs	r2, #36	; 0x24
 80060e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f8c0 	bl	800627c <UART_SetConfig>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e022      	b.n	800614c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fb16 	bl	8006740 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fb9d 	bl	8006884 <UART_CheckIdleState>
 800614a:	4603      	mov	r3, r0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	; 0x28
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006168:	2b20      	cmp	r3, #32
 800616a:	f040 8081 	bne.w	8006270 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_UART_Transmit+0x26>
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e079      	b.n	8006272 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_UART_Transmit+0x38>
 8006188:	2302      	movs	r3, #2
 800618a:	e072      	b.n	8006272 <HAL_UART_Transmit+0x11e>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2221      	movs	r2, #33	; 0x21
 80061a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061a2:	f7fc fac1 	bl	8002728 <HAL_GetTick>
 80061a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	88fa      	ldrh	r2, [r7, #6]
 80061ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c0:	d108      	bne.n	80061d4 <HAL_UART_Transmit+0x80>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	e003      	b.n	80061dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80061e4:	e02c      	b.n	8006240 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	2180      	movs	r1, #128	; 0x80
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fb7a 	bl	80068ea <UART_WaitOnFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e038      	b.n	8006272 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10b      	bne.n	800621e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006214:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	3302      	adds	r3, #2
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	e007      	b.n	800622e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	3301      	adds	r3, #1
 800622c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1cc      	bne.n	80061e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2200      	movs	r2, #0
 8006254:	2140      	movs	r1, #64	; 0x40
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fb47 	bl	80068ea <UART_WaitOnFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e005      	b.n	8006272 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	e000      	b.n	8006272 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006270:	2302      	movs	r3, #2
  }
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4ba7      	ldr	r3, [pc, #668]	; (8006544 <UART_SetConfig+0x2c8>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	6979      	ldr	r1, [r7, #20]
 80062b0:	430b      	orrs	r3, r1
 80062b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a95      	ldr	r2, [pc, #596]	; (8006548 <UART_SetConfig+0x2cc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d120      	bne.n	800633a <UART_SetConfig+0xbe>
 80062f8:	4b94      	ldr	r3, [pc, #592]	; (800654c <UART_SetConfig+0x2d0>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	2b03      	cmp	r3, #3
 8006304:	d816      	bhi.n	8006334 <UART_SetConfig+0xb8>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <UART_SetConfig+0x90>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	0800631d 	.word	0x0800631d
 8006310:	08006329 	.word	0x08006329
 8006314:	08006323 	.word	0x08006323
 8006318:	0800632f 	.word	0x0800632f
 800631c:	2301      	movs	r3, #1
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	e14f      	b.n	80065c2 <UART_SetConfig+0x346>
 8006322:	2302      	movs	r3, #2
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	e14c      	b.n	80065c2 <UART_SetConfig+0x346>
 8006328:	2304      	movs	r3, #4
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e149      	b.n	80065c2 <UART_SetConfig+0x346>
 800632e:	2308      	movs	r3, #8
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e146      	b.n	80065c2 <UART_SetConfig+0x346>
 8006334:	2310      	movs	r3, #16
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e143      	b.n	80065c2 <UART_SetConfig+0x346>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a84      	ldr	r2, [pc, #528]	; (8006550 <UART_SetConfig+0x2d4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d132      	bne.n	80063aa <UART_SetConfig+0x12e>
 8006344:	4b81      	ldr	r3, [pc, #516]	; (800654c <UART_SetConfig+0x2d0>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634a:	f003 030c 	and.w	r3, r3, #12
 800634e:	2b0c      	cmp	r3, #12
 8006350:	d828      	bhi.n	80063a4 <UART_SetConfig+0x128>
 8006352:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <UART_SetConfig+0xdc>)
 8006354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006358:	0800638d 	.word	0x0800638d
 800635c:	080063a5 	.word	0x080063a5
 8006360:	080063a5 	.word	0x080063a5
 8006364:	080063a5 	.word	0x080063a5
 8006368:	08006399 	.word	0x08006399
 800636c:	080063a5 	.word	0x080063a5
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080063a5 	.word	0x080063a5
 8006378:	08006393 	.word	0x08006393
 800637c:	080063a5 	.word	0x080063a5
 8006380:	080063a5 	.word	0x080063a5
 8006384:	080063a5 	.word	0x080063a5
 8006388:	0800639f 	.word	0x0800639f
 800638c:	2300      	movs	r3, #0
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e117      	b.n	80065c2 <UART_SetConfig+0x346>
 8006392:	2302      	movs	r3, #2
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e114      	b.n	80065c2 <UART_SetConfig+0x346>
 8006398:	2304      	movs	r3, #4
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e111      	b.n	80065c2 <UART_SetConfig+0x346>
 800639e:	2308      	movs	r3, #8
 80063a0:	77fb      	strb	r3, [r7, #31]
 80063a2:	e10e      	b.n	80065c2 <UART_SetConfig+0x346>
 80063a4:	2310      	movs	r3, #16
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e10b      	b.n	80065c2 <UART_SetConfig+0x346>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a69      	ldr	r2, [pc, #420]	; (8006554 <UART_SetConfig+0x2d8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d120      	bne.n	80063f6 <UART_SetConfig+0x17a>
 80063b4:	4b65      	ldr	r3, [pc, #404]	; (800654c <UART_SetConfig+0x2d0>)
 80063b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063be:	2b30      	cmp	r3, #48	; 0x30
 80063c0:	d013      	beq.n	80063ea <UART_SetConfig+0x16e>
 80063c2:	2b30      	cmp	r3, #48	; 0x30
 80063c4:	d814      	bhi.n	80063f0 <UART_SetConfig+0x174>
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d009      	beq.n	80063de <UART_SetConfig+0x162>
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d810      	bhi.n	80063f0 <UART_SetConfig+0x174>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <UART_SetConfig+0x15c>
 80063d2:	2b10      	cmp	r3, #16
 80063d4:	d006      	beq.n	80063e4 <UART_SetConfig+0x168>
 80063d6:	e00b      	b.n	80063f0 <UART_SetConfig+0x174>
 80063d8:	2300      	movs	r3, #0
 80063da:	77fb      	strb	r3, [r7, #31]
 80063dc:	e0f1      	b.n	80065c2 <UART_SetConfig+0x346>
 80063de:	2302      	movs	r3, #2
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e0ee      	b.n	80065c2 <UART_SetConfig+0x346>
 80063e4:	2304      	movs	r3, #4
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e0eb      	b.n	80065c2 <UART_SetConfig+0x346>
 80063ea:	2308      	movs	r3, #8
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e0e8      	b.n	80065c2 <UART_SetConfig+0x346>
 80063f0:	2310      	movs	r3, #16
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e0e5      	b.n	80065c2 <UART_SetConfig+0x346>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a57      	ldr	r2, [pc, #348]	; (8006558 <UART_SetConfig+0x2dc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d120      	bne.n	8006442 <UART_SetConfig+0x1c6>
 8006400:	4b52      	ldr	r3, [pc, #328]	; (800654c <UART_SetConfig+0x2d0>)
 8006402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800640a:	2bc0      	cmp	r3, #192	; 0xc0
 800640c:	d013      	beq.n	8006436 <UART_SetConfig+0x1ba>
 800640e:	2bc0      	cmp	r3, #192	; 0xc0
 8006410:	d814      	bhi.n	800643c <UART_SetConfig+0x1c0>
 8006412:	2b80      	cmp	r3, #128	; 0x80
 8006414:	d009      	beq.n	800642a <UART_SetConfig+0x1ae>
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d810      	bhi.n	800643c <UART_SetConfig+0x1c0>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <UART_SetConfig+0x1a8>
 800641e:	2b40      	cmp	r3, #64	; 0x40
 8006420:	d006      	beq.n	8006430 <UART_SetConfig+0x1b4>
 8006422:	e00b      	b.n	800643c <UART_SetConfig+0x1c0>
 8006424:	2300      	movs	r3, #0
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e0cb      	b.n	80065c2 <UART_SetConfig+0x346>
 800642a:	2302      	movs	r3, #2
 800642c:	77fb      	strb	r3, [r7, #31]
 800642e:	e0c8      	b.n	80065c2 <UART_SetConfig+0x346>
 8006430:	2304      	movs	r3, #4
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e0c5      	b.n	80065c2 <UART_SetConfig+0x346>
 8006436:	2308      	movs	r3, #8
 8006438:	77fb      	strb	r3, [r7, #31]
 800643a:	e0c2      	b.n	80065c2 <UART_SetConfig+0x346>
 800643c:	2310      	movs	r3, #16
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e0bf      	b.n	80065c2 <UART_SetConfig+0x346>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a45      	ldr	r2, [pc, #276]	; (800655c <UART_SetConfig+0x2e0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d125      	bne.n	8006498 <UART_SetConfig+0x21c>
 800644c:	4b3f      	ldr	r3, [pc, #252]	; (800654c <UART_SetConfig+0x2d0>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800645a:	d017      	beq.n	800648c <UART_SetConfig+0x210>
 800645c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006460:	d817      	bhi.n	8006492 <UART_SetConfig+0x216>
 8006462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006466:	d00b      	beq.n	8006480 <UART_SetConfig+0x204>
 8006468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800646c:	d811      	bhi.n	8006492 <UART_SetConfig+0x216>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <UART_SetConfig+0x1fe>
 8006472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006476:	d006      	beq.n	8006486 <UART_SetConfig+0x20a>
 8006478:	e00b      	b.n	8006492 <UART_SetConfig+0x216>
 800647a:	2300      	movs	r3, #0
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e0a0      	b.n	80065c2 <UART_SetConfig+0x346>
 8006480:	2302      	movs	r3, #2
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e09d      	b.n	80065c2 <UART_SetConfig+0x346>
 8006486:	2304      	movs	r3, #4
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e09a      	b.n	80065c2 <UART_SetConfig+0x346>
 800648c:	2308      	movs	r3, #8
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e097      	b.n	80065c2 <UART_SetConfig+0x346>
 8006492:	2310      	movs	r3, #16
 8006494:	77fb      	strb	r3, [r7, #31]
 8006496:	e094      	b.n	80065c2 <UART_SetConfig+0x346>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a30      	ldr	r2, [pc, #192]	; (8006560 <UART_SetConfig+0x2e4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d125      	bne.n	80064ee <UART_SetConfig+0x272>
 80064a2:	4b2a      	ldr	r3, [pc, #168]	; (800654c <UART_SetConfig+0x2d0>)
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064b0:	d017      	beq.n	80064e2 <UART_SetConfig+0x266>
 80064b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064b6:	d817      	bhi.n	80064e8 <UART_SetConfig+0x26c>
 80064b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064bc:	d00b      	beq.n	80064d6 <UART_SetConfig+0x25a>
 80064be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c2:	d811      	bhi.n	80064e8 <UART_SetConfig+0x26c>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <UART_SetConfig+0x254>
 80064c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064cc:	d006      	beq.n	80064dc <UART_SetConfig+0x260>
 80064ce:	e00b      	b.n	80064e8 <UART_SetConfig+0x26c>
 80064d0:	2301      	movs	r3, #1
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e075      	b.n	80065c2 <UART_SetConfig+0x346>
 80064d6:	2302      	movs	r3, #2
 80064d8:	77fb      	strb	r3, [r7, #31]
 80064da:	e072      	b.n	80065c2 <UART_SetConfig+0x346>
 80064dc:	2304      	movs	r3, #4
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e06f      	b.n	80065c2 <UART_SetConfig+0x346>
 80064e2:	2308      	movs	r3, #8
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e06c      	b.n	80065c2 <UART_SetConfig+0x346>
 80064e8:	2310      	movs	r3, #16
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e069      	b.n	80065c2 <UART_SetConfig+0x346>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a1c      	ldr	r2, [pc, #112]	; (8006564 <UART_SetConfig+0x2e8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d137      	bne.n	8006568 <UART_SetConfig+0x2ec>
 80064f8:	4b14      	ldr	r3, [pc, #80]	; (800654c <UART_SetConfig+0x2d0>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006502:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006506:	d017      	beq.n	8006538 <UART_SetConfig+0x2bc>
 8006508:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800650c:	d817      	bhi.n	800653e <UART_SetConfig+0x2c2>
 800650e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006512:	d00b      	beq.n	800652c <UART_SetConfig+0x2b0>
 8006514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006518:	d811      	bhi.n	800653e <UART_SetConfig+0x2c2>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <UART_SetConfig+0x2aa>
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006522:	d006      	beq.n	8006532 <UART_SetConfig+0x2b6>
 8006524:	e00b      	b.n	800653e <UART_SetConfig+0x2c2>
 8006526:	2300      	movs	r3, #0
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e04a      	b.n	80065c2 <UART_SetConfig+0x346>
 800652c:	2302      	movs	r3, #2
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e047      	b.n	80065c2 <UART_SetConfig+0x346>
 8006532:	2304      	movs	r3, #4
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e044      	b.n	80065c2 <UART_SetConfig+0x346>
 8006538:	2308      	movs	r3, #8
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e041      	b.n	80065c2 <UART_SetConfig+0x346>
 800653e:	2310      	movs	r3, #16
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	e03e      	b.n	80065c2 <UART_SetConfig+0x346>
 8006544:	efff69f3 	.word	0xefff69f3
 8006548:	40011000 	.word	0x40011000
 800654c:	40023800 	.word	0x40023800
 8006550:	40004400 	.word	0x40004400
 8006554:	40004800 	.word	0x40004800
 8006558:	40004c00 	.word	0x40004c00
 800655c:	40005000 	.word	0x40005000
 8006560:	40011400 	.word	0x40011400
 8006564:	40007800 	.word	0x40007800
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a71      	ldr	r2, [pc, #452]	; (8006734 <UART_SetConfig+0x4b8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d125      	bne.n	80065be <UART_SetConfig+0x342>
 8006572:	4b71      	ldr	r3, [pc, #452]	; (8006738 <UART_SetConfig+0x4bc>)
 8006574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800657c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006580:	d017      	beq.n	80065b2 <UART_SetConfig+0x336>
 8006582:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006586:	d817      	bhi.n	80065b8 <UART_SetConfig+0x33c>
 8006588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800658c:	d00b      	beq.n	80065a6 <UART_SetConfig+0x32a>
 800658e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006592:	d811      	bhi.n	80065b8 <UART_SetConfig+0x33c>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <UART_SetConfig+0x324>
 8006598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800659c:	d006      	beq.n	80065ac <UART_SetConfig+0x330>
 800659e:	e00b      	b.n	80065b8 <UART_SetConfig+0x33c>
 80065a0:	2300      	movs	r3, #0
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e00d      	b.n	80065c2 <UART_SetConfig+0x346>
 80065a6:	2302      	movs	r3, #2
 80065a8:	77fb      	strb	r3, [r7, #31]
 80065aa:	e00a      	b.n	80065c2 <UART_SetConfig+0x346>
 80065ac:	2304      	movs	r3, #4
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e007      	b.n	80065c2 <UART_SetConfig+0x346>
 80065b2:	2308      	movs	r3, #8
 80065b4:	77fb      	strb	r3, [r7, #31]
 80065b6:	e004      	b.n	80065c2 <UART_SetConfig+0x346>
 80065b8:	2310      	movs	r3, #16
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e001      	b.n	80065c2 <UART_SetConfig+0x346>
 80065be:	2310      	movs	r3, #16
 80065c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ca:	d15a      	bne.n	8006682 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80065cc:	7ffb      	ldrb	r3, [r7, #31]
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	d827      	bhi.n	8006622 <UART_SetConfig+0x3a6>
 80065d2:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <UART_SetConfig+0x35c>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	08006605 	.word	0x08006605
 80065e0:	0800660d 	.word	0x0800660d
 80065e4:	08006623 	.word	0x08006623
 80065e8:	08006613 	.word	0x08006613
 80065ec:	08006623 	.word	0x08006623
 80065f0:	08006623 	.word	0x08006623
 80065f4:	08006623 	.word	0x08006623
 80065f8:	0800661b 	.word	0x0800661b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065fc:	f7fd ff88 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8006600:	61b8      	str	r0, [r7, #24]
        break;
 8006602:	e013      	b.n	800662c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006604:	f7fd ff98 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 8006608:	61b8      	str	r0, [r7, #24]
        break;
 800660a:	e00f      	b.n	800662c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800660c:	4b4b      	ldr	r3, [pc, #300]	; (800673c <UART_SetConfig+0x4c0>)
 800660e:	61bb      	str	r3, [r7, #24]
        break;
 8006610:	e00c      	b.n	800662c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006612:	f7fd fe8f 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 8006616:	61b8      	str	r0, [r7, #24]
        break;
 8006618:	e008      	b.n	800662c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661e:	61bb      	str	r3, [r7, #24]
        break;
 8006620:	e004      	b.n	800662c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	77bb      	strb	r3, [r7, #30]
        break;
 800662a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d074      	beq.n	800671c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	005a      	lsls	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	441a      	add	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	fbb2 f3f3 	udiv	r3, r2, r3
 8006646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2b0f      	cmp	r3, #15
 800664c:	d916      	bls.n	800667c <UART_SetConfig+0x400>
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006654:	d212      	bcs.n	800667c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f023 030f 	bic.w	r3, r3, #15
 800665e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	b29b      	uxth	r3, r3
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	b29a      	uxth	r2, r3
 800666c:	89fb      	ldrh	r3, [r7, #14]
 800666e:	4313      	orrs	r3, r2
 8006670:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	89fa      	ldrh	r2, [r7, #14]
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	e04f      	b.n	800671c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	77bb      	strb	r3, [r7, #30]
 8006680:	e04c      	b.n	800671c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006682:	7ffb      	ldrb	r3, [r7, #31]
 8006684:	2b08      	cmp	r3, #8
 8006686:	d828      	bhi.n	80066da <UART_SetConfig+0x45e>
 8006688:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <UART_SetConfig+0x414>)
 800668a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668e:	bf00      	nop
 8006690:	080066b5 	.word	0x080066b5
 8006694:	080066bd 	.word	0x080066bd
 8006698:	080066c5 	.word	0x080066c5
 800669c:	080066db 	.word	0x080066db
 80066a0:	080066cb 	.word	0x080066cb
 80066a4:	080066db 	.word	0x080066db
 80066a8:	080066db 	.word	0x080066db
 80066ac:	080066db 	.word	0x080066db
 80066b0:	080066d3 	.word	0x080066d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b4:	f7fd ff2c 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 80066b8:	61b8      	str	r0, [r7, #24]
        break;
 80066ba:	e013      	b.n	80066e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066bc:	f7fd ff3c 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 80066c0:	61b8      	str	r0, [r7, #24]
        break;
 80066c2:	e00f      	b.n	80066e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c4:	4b1d      	ldr	r3, [pc, #116]	; (800673c <UART_SetConfig+0x4c0>)
 80066c6:	61bb      	str	r3, [r7, #24]
        break;
 80066c8:	e00c      	b.n	80066e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ca:	f7fd fe33 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80066ce:	61b8      	str	r0, [r7, #24]
        break;
 80066d0:	e008      	b.n	80066e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d6:	61bb      	str	r3, [r7, #24]
        break;
 80066d8:	e004      	b.n	80066e4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	77bb      	strb	r3, [r7, #30]
        break;
 80066e2:	bf00      	nop
    }

    if (pclk != 0U)
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d018      	beq.n	800671c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	085a      	lsrs	r2, r3, #1
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	441a      	add	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	2b0f      	cmp	r3, #15
 8006702:	d909      	bls.n	8006718 <UART_SetConfig+0x49c>
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670a:	d205      	bcs.n	8006718 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	b29a      	uxth	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60da      	str	r2, [r3, #12]
 8006716:	e001      	b.n	800671c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006728:	7fbb      	ldrb	r3, [r7, #30]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3720      	adds	r7, #32
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	40007c00 	.word	0x40007c00
 8006738:	40023800 	.word	0x40023800
 800673c:	00f42400 	.word	0x00f42400

08006740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	430a      	orrs	r2, r1
 800678a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	f003 0320 	and.w	r3, r3, #32
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01a      	beq.n	8006856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800683e:	d10a      	bne.n	8006856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	605a      	str	r2, [r3, #4]
  }
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af02      	add	r7, sp, #8
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006894:	f7fb ff48 	bl	8002728 <HAL_GetTick>
 8006898:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0308 	and.w	r3, r3, #8
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d10e      	bne.n	80068c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f817 	bl	80068ea <UART_WaitOnFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e00d      	b.n	80068e2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b09c      	sub	sp, #112	; 0x70
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	4613      	mov	r3, r2
 80068f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068fa:	e0a5      	b.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006902:	f000 80a1 	beq.w	8006a48 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006906:	f7fb ff0f 	bl	8002728 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006912:	429a      	cmp	r2, r3
 8006914:	d302      	bcc.n	800691c <UART_WaitOnFlagUntilTimeout+0x32>
 8006916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006918:	2b00      	cmp	r3, #0
 800691a:	d13e      	bne.n	800699a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800692a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006930:	667b      	str	r3, [r7, #100]	; 0x64
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800693a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800693c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006940:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e6      	bne.n	800691c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	663b      	str	r3, [r7, #96]	; 0x60
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800696e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006970:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800697c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e5      	bne.n	800694e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2220      	movs	r2, #32
 8006986:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e067      	b.n	8006a6a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d04f      	beq.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b6:	d147      	bne.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
 80069e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e6      	bne.n	80069c2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	613b      	str	r3, [r7, #16]
   return(result);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f023 0301 	bic.w	r3, r3, #1
 8006a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3308      	adds	r3, #8
 8006a12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a14:	623a      	str	r2, [r7, #32]
 8006a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	69f9      	ldr	r1, [r7, #28]
 8006a1a:	6a3a      	ldr	r2, [r7, #32]
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e5      	bne.n	80069f4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e010      	b.n	8006a6a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4013      	ands	r3, r2
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	bf0c      	ite	eq
 8006a58:	2301      	moveq	r3, #1
 8006a5a:	2300      	movne	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	f43f af4a 	beq.w	80068fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3770      	adds	r7, #112	; 0x70
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a74:	b084      	sub	sp, #16
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	f107 001c 	add.w	r0, r7, #28
 8006a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d120      	bne.n	8006ace <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	4b20      	ldr	r3, [pc, #128]	; (8006b20 <USB_CoreInit+0xac>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d105      	bne.n	8006ac2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa92 	bl	8006fec <USB_CoreReset>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]
 8006acc:	e010      	b.n	8006af0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fa86 	bl	8006fec <USB_CoreReset>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d10b      	bne.n	8006b0e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f043 0206 	orr.w	r2, r3, #6
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f043 0220 	orr.w	r2, r3, #32
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b1a:	b004      	add	sp, #16
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	ffbdffbf 	.word	0xffbdffbf

08006b24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f023 0201 	bic.w	r2, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d115      	bne.n	8006b94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b74:	2001      	movs	r0, #1
 8006b76:	f7fb fde3 	bl	8002740 <HAL_Delay>
      ms++;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fa25 	bl	8006fd0 <USB_GetMode>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d01e      	beq.n	8006bca <USB_SetCurrentMode+0x84>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b31      	cmp	r3, #49	; 0x31
 8006b90:	d9f0      	bls.n	8006b74 <USB_SetCurrentMode+0x2e>
 8006b92:	e01a      	b.n	8006bca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d115      	bne.n	8006bc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	f7fb fdca 	bl	8002740 <HAL_Delay>
      ms++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa0c 	bl	8006fd0 <USB_GetMode>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <USB_SetCurrentMode+0x84>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b31      	cmp	r3, #49	; 0x31
 8006bc2:	d9f0      	bls.n	8006ba6 <USB_SetCurrentMode+0x60>
 8006bc4:	e001      	b.n	8006bca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e005      	b.n	8006bd6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b32      	cmp	r3, #50	; 0x32
 8006bce:	d101      	bne.n	8006bd4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006be0:	b084      	sub	sp, #16
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	613b      	str	r3, [r7, #16]
 8006bfe:	e009      	b.n	8006c14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	3340      	adds	r3, #64	; 0x40
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	3301      	adds	r3, #1
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2b0e      	cmp	r3, #14
 8006c18:	d9f2      	bls.n	8006c00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11c      	bne.n	8006c5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c2e:	f043 0302 	orr.w	r3, r3, #2
 8006c32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	e005      	b.n	8006c66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c78:	4619      	mov	r1, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c80:	461a      	mov	r2, r3
 8006c82:	680b      	ldr	r3, [r1, #0]
 8006c84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d10c      	bne.n	8006ca6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d104      	bne.n	8006c9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c92:	2100      	movs	r1, #0
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f961 	bl	8006f5c <USB_SetDevSpeed>
 8006c9a:	e008      	b.n	8006cae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f95c 	bl	8006f5c <USB_SetDevSpeed>
 8006ca4:	e003      	b.n	8006cae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ca6:	2103      	movs	r1, #3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f957 	bl	8006f5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cae:	2110      	movs	r1, #16
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f8f3 	bl	8006e9c <USB_FlushTxFifo>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f91d 	bl	8006f00 <USB_FlushRxFifo>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	2300      	movs	r3, #0
 8006cda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cee:	461a      	mov	r2, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	e043      	b.n	8006d82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d10:	d118      	bne.n	8006d44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d24:	461a      	mov	r2, r3
 8006d26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	e013      	b.n	8006d56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	e008      	b.n	8006d56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d50:	461a      	mov	r2, r3
 8006d52:	2300      	movs	r3, #0
 8006d54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d62:	461a      	mov	r2, r3
 8006d64:	2300      	movs	r3, #0
 8006d66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d74:	461a      	mov	r2, r3
 8006d76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d3b7      	bcc.n	8006cfa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	e043      	b.n	8006e18 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da6:	d118      	bne.n	8006dda <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	e013      	b.n	8006dec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	e008      	b.n	8006dec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de6:	461a      	mov	r2, r3
 8006de8:	2300      	movs	r3, #0
 8006dea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	3301      	adds	r3, #1
 8006e16:	613b      	str	r3, [r7, #16]
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d3b7      	bcc.n	8006d90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d105      	bne.n	8006e54 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f043 0210 	orr.w	r2, r3, #16
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699a      	ldr	r2, [r3, #24]
 8006e58:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <USB_DevInit+0x2b4>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	f043 0208 	orr.w	r2, r3, #8
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d105      	bne.n	8006e84 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	699a      	ldr	r2, [r3, #24]
 8006e7c:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <USB_DevInit+0x2b8>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e90:	b004      	add	sp, #16
 8006e92:	4770      	bx	lr
 8006e94:	803c3800 	.word	0x803c3800
 8006e98:	40000004 	.word	0x40000004

08006e9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	4a12      	ldr	r2, [pc, #72]	; (8006efc <USB_FlushTxFifo+0x60>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d901      	bls.n	8006eba <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e01a      	b.n	8006ef0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	daf3      	bge.n	8006eaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	019b      	lsls	r3, r3, #6
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	4a08      	ldr	r2, [pc, #32]	; (8006efc <USB_FlushTxFifo+0x60>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d901      	bls.n	8006ee2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e006      	b.n	8006ef0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b20      	cmp	r3, #32
 8006eec:	d0f1      	beq.n	8006ed2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	00030d40 	.word	0x00030d40

08006f00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	4a11      	ldr	r2, [pc, #68]	; (8006f58 <USB_FlushRxFifo+0x58>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d901      	bls.n	8006f1c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e017      	b.n	8006f4c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	daf3      	bge.n	8006f0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2210      	movs	r2, #16
 8006f2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3301      	adds	r3, #1
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	4a08      	ldr	r2, [pc, #32]	; (8006f58 <USB_FlushRxFifo+0x58>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d901      	bls.n	8006f3e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e006      	b.n	8006f4c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0310 	and.w	r3, r3, #16
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	d0f1      	beq.n	8006f2e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	00030d40 	.word	0x00030d40

08006f5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	68f9      	ldr	r1, [r7, #12]
 8006f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b085      	sub	sp, #20
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fa8:	f023 0303 	bic.w	r3, r3, #3
 8006fac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fbc:	f043 0302 	orr.w	r3, r3, #2
 8006fc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	4a13      	ldr	r2, [pc, #76]	; (800704c <USB_CoreReset+0x60>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d901      	bls.n	8007008 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e01a      	b.n	800703e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	daf3      	bge.n	8006ff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f043 0201 	orr.w	r2, r3, #1
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	4a09      	ldr	r2, [pc, #36]	; (800704c <USB_CoreReset+0x60>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d901      	bls.n	8007030 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e006      	b.n	800703e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b01      	cmp	r3, #1
 800703a:	d0f1      	beq.n	8007020 <USB_CoreReset+0x34>

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	00030d40 	.word	0x00030d40

08007050 <calloc>:
 8007050:	4b02      	ldr	r3, [pc, #8]	; (800705c <calloc+0xc>)
 8007052:	460a      	mov	r2, r1
 8007054:	4601      	mov	r1, r0
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	f000 b834 	b.w	80070c4 <_calloc_r>
 800705c:	20000010 	.word	0x20000010

08007060 <__errno>:
 8007060:	4b01      	ldr	r3, [pc, #4]	; (8007068 <__errno+0x8>)
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	20000010 	.word	0x20000010

0800706c <__libc_init_array>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4d0d      	ldr	r5, [pc, #52]	; (80070a4 <__libc_init_array+0x38>)
 8007070:	4c0d      	ldr	r4, [pc, #52]	; (80070a8 <__libc_init_array+0x3c>)
 8007072:	1b64      	subs	r4, r4, r5
 8007074:	10a4      	asrs	r4, r4, #2
 8007076:	2600      	movs	r6, #0
 8007078:	42a6      	cmp	r6, r4
 800707a:	d109      	bne.n	8007090 <__libc_init_array+0x24>
 800707c:	4d0b      	ldr	r5, [pc, #44]	; (80070ac <__libc_init_array+0x40>)
 800707e:	4c0c      	ldr	r4, [pc, #48]	; (80070b0 <__libc_init_array+0x44>)
 8007080:	f002 feb6 	bl	8009df0 <_init>
 8007084:	1b64      	subs	r4, r4, r5
 8007086:	10a4      	asrs	r4, r4, #2
 8007088:	2600      	movs	r6, #0
 800708a:	42a6      	cmp	r6, r4
 800708c:	d105      	bne.n	800709a <__libc_init_array+0x2e>
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	f855 3b04 	ldr.w	r3, [r5], #4
 8007094:	4798      	blx	r3
 8007096:	3601      	adds	r6, #1
 8007098:	e7ee      	b.n	8007078 <__libc_init_array+0xc>
 800709a:	f855 3b04 	ldr.w	r3, [r5], #4
 800709e:	4798      	blx	r3
 80070a0:	3601      	adds	r6, #1
 80070a2:	e7f2      	b.n	800708a <__libc_init_array+0x1e>
 80070a4:	0800a214 	.word	0x0800a214
 80070a8:	0800a214 	.word	0x0800a214
 80070ac:	0800a214 	.word	0x0800a214
 80070b0:	0800a218 	.word	0x0800a218

080070b4 <memset>:
 80070b4:	4402      	add	r2, r0
 80070b6:	4603      	mov	r3, r0
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d100      	bne.n	80070be <memset+0xa>
 80070bc:	4770      	bx	lr
 80070be:	f803 1b01 	strb.w	r1, [r3], #1
 80070c2:	e7f9      	b.n	80070b8 <memset+0x4>

080070c4 <_calloc_r>:
 80070c4:	b513      	push	{r0, r1, r4, lr}
 80070c6:	434a      	muls	r2, r1
 80070c8:	4611      	mov	r1, r2
 80070ca:	9201      	str	r2, [sp, #4]
 80070cc:	f000 f80a 	bl	80070e4 <_malloc_r>
 80070d0:	4604      	mov	r4, r0
 80070d2:	b118      	cbz	r0, 80070dc <_calloc_r+0x18>
 80070d4:	9a01      	ldr	r2, [sp, #4]
 80070d6:	2100      	movs	r1, #0
 80070d8:	f7ff ffec 	bl	80070b4 <memset>
 80070dc:	4620      	mov	r0, r4
 80070de:	b002      	add	sp, #8
 80070e0:	bd10      	pop	{r4, pc}
	...

080070e4 <_malloc_r>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	1ccd      	adds	r5, r1, #3
 80070e8:	f025 0503 	bic.w	r5, r5, #3
 80070ec:	3508      	adds	r5, #8
 80070ee:	2d0c      	cmp	r5, #12
 80070f0:	bf38      	it	cc
 80070f2:	250c      	movcc	r5, #12
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	4606      	mov	r6, r0
 80070f8:	db01      	blt.n	80070fe <_malloc_r+0x1a>
 80070fa:	42a9      	cmp	r1, r5
 80070fc:	d903      	bls.n	8007106 <_malloc_r+0x22>
 80070fe:	230c      	movs	r3, #12
 8007100:	6033      	str	r3, [r6, #0]
 8007102:	2000      	movs	r0, #0
 8007104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007106:	f001 fb75 	bl	80087f4 <__malloc_lock>
 800710a:	4921      	ldr	r1, [pc, #132]	; (8007190 <_malloc_r+0xac>)
 800710c:	680a      	ldr	r2, [r1, #0]
 800710e:	4614      	mov	r4, r2
 8007110:	b99c      	cbnz	r4, 800713a <_malloc_r+0x56>
 8007112:	4f20      	ldr	r7, [pc, #128]	; (8007194 <_malloc_r+0xb0>)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	b923      	cbnz	r3, 8007122 <_malloc_r+0x3e>
 8007118:	4621      	mov	r1, r4
 800711a:	4630      	mov	r0, r6
 800711c:	f000 fca6 	bl	8007a6c <_sbrk_r>
 8007120:	6038      	str	r0, [r7, #0]
 8007122:	4629      	mov	r1, r5
 8007124:	4630      	mov	r0, r6
 8007126:	f000 fca1 	bl	8007a6c <_sbrk_r>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d123      	bne.n	8007176 <_malloc_r+0x92>
 800712e:	230c      	movs	r3, #12
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	4630      	mov	r0, r6
 8007134:	f001 fb64 	bl	8008800 <__malloc_unlock>
 8007138:	e7e3      	b.n	8007102 <_malloc_r+0x1e>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	1b5b      	subs	r3, r3, r5
 800713e:	d417      	bmi.n	8007170 <_malloc_r+0x8c>
 8007140:	2b0b      	cmp	r3, #11
 8007142:	d903      	bls.n	800714c <_malloc_r+0x68>
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	441c      	add	r4, r3
 8007148:	6025      	str	r5, [r4, #0]
 800714a:	e004      	b.n	8007156 <_malloc_r+0x72>
 800714c:	6863      	ldr	r3, [r4, #4]
 800714e:	42a2      	cmp	r2, r4
 8007150:	bf0c      	ite	eq
 8007152:	600b      	streq	r3, [r1, #0]
 8007154:	6053      	strne	r3, [r2, #4]
 8007156:	4630      	mov	r0, r6
 8007158:	f001 fb52 	bl	8008800 <__malloc_unlock>
 800715c:	f104 000b 	add.w	r0, r4, #11
 8007160:	1d23      	adds	r3, r4, #4
 8007162:	f020 0007 	bic.w	r0, r0, #7
 8007166:	1ac2      	subs	r2, r0, r3
 8007168:	d0cc      	beq.n	8007104 <_malloc_r+0x20>
 800716a:	1a1b      	subs	r3, r3, r0
 800716c:	50a3      	str	r3, [r4, r2]
 800716e:	e7c9      	b.n	8007104 <_malloc_r+0x20>
 8007170:	4622      	mov	r2, r4
 8007172:	6864      	ldr	r4, [r4, #4]
 8007174:	e7cc      	b.n	8007110 <_malloc_r+0x2c>
 8007176:	1cc4      	adds	r4, r0, #3
 8007178:	f024 0403 	bic.w	r4, r4, #3
 800717c:	42a0      	cmp	r0, r4
 800717e:	d0e3      	beq.n	8007148 <_malloc_r+0x64>
 8007180:	1a21      	subs	r1, r4, r0
 8007182:	4630      	mov	r0, r6
 8007184:	f000 fc72 	bl	8007a6c <_sbrk_r>
 8007188:	3001      	adds	r0, #1
 800718a:	d1dd      	bne.n	8007148 <_malloc_r+0x64>
 800718c:	e7cf      	b.n	800712e <_malloc_r+0x4a>
 800718e:	bf00      	nop
 8007190:	20000208 	.word	0x20000208
 8007194:	2000020c 	.word	0x2000020c

08007198 <__cvt>:
 8007198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800719c:	ec55 4b10 	vmov	r4, r5, d0
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	460e      	mov	r6, r1
 80071a4:	4619      	mov	r1, r3
 80071a6:	462b      	mov	r3, r5
 80071a8:	bfbb      	ittet	lt
 80071aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071ae:	461d      	movlt	r5, r3
 80071b0:	2300      	movge	r3, #0
 80071b2:	232d      	movlt	r3, #45	; 0x2d
 80071b4:	700b      	strb	r3, [r1, #0]
 80071b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071bc:	4691      	mov	r9, r2
 80071be:	f023 0820 	bic.w	r8, r3, #32
 80071c2:	bfbc      	itt	lt
 80071c4:	4622      	movlt	r2, r4
 80071c6:	4614      	movlt	r4, r2
 80071c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071cc:	d005      	beq.n	80071da <__cvt+0x42>
 80071ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071d2:	d100      	bne.n	80071d6 <__cvt+0x3e>
 80071d4:	3601      	adds	r6, #1
 80071d6:	2102      	movs	r1, #2
 80071d8:	e000      	b.n	80071dc <__cvt+0x44>
 80071da:	2103      	movs	r1, #3
 80071dc:	ab03      	add	r3, sp, #12
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	ab02      	add	r3, sp, #8
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	ec45 4b10 	vmov	d0, r4, r5
 80071e8:	4653      	mov	r3, sl
 80071ea:	4632      	mov	r2, r6
 80071ec:	f000 fcfc 	bl	8007be8 <_dtoa_r>
 80071f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071f4:	4607      	mov	r7, r0
 80071f6:	d102      	bne.n	80071fe <__cvt+0x66>
 80071f8:	f019 0f01 	tst.w	r9, #1
 80071fc:	d022      	beq.n	8007244 <__cvt+0xac>
 80071fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007202:	eb07 0906 	add.w	r9, r7, r6
 8007206:	d110      	bne.n	800722a <__cvt+0x92>
 8007208:	783b      	ldrb	r3, [r7, #0]
 800720a:	2b30      	cmp	r3, #48	; 0x30
 800720c:	d10a      	bne.n	8007224 <__cvt+0x8c>
 800720e:	2200      	movs	r2, #0
 8007210:	2300      	movs	r3, #0
 8007212:	4620      	mov	r0, r4
 8007214:	4629      	mov	r1, r5
 8007216:	f7f9 fc77 	bl	8000b08 <__aeabi_dcmpeq>
 800721a:	b918      	cbnz	r0, 8007224 <__cvt+0x8c>
 800721c:	f1c6 0601 	rsb	r6, r6, #1
 8007220:	f8ca 6000 	str.w	r6, [sl]
 8007224:	f8da 3000 	ldr.w	r3, [sl]
 8007228:	4499      	add	r9, r3
 800722a:	2200      	movs	r2, #0
 800722c:	2300      	movs	r3, #0
 800722e:	4620      	mov	r0, r4
 8007230:	4629      	mov	r1, r5
 8007232:	f7f9 fc69 	bl	8000b08 <__aeabi_dcmpeq>
 8007236:	b108      	cbz	r0, 800723c <__cvt+0xa4>
 8007238:	f8cd 900c 	str.w	r9, [sp, #12]
 800723c:	2230      	movs	r2, #48	; 0x30
 800723e:	9b03      	ldr	r3, [sp, #12]
 8007240:	454b      	cmp	r3, r9
 8007242:	d307      	bcc.n	8007254 <__cvt+0xbc>
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007248:	1bdb      	subs	r3, r3, r7
 800724a:	4638      	mov	r0, r7
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	b004      	add	sp, #16
 8007250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007254:	1c59      	adds	r1, r3, #1
 8007256:	9103      	str	r1, [sp, #12]
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	e7f0      	b.n	800723e <__cvt+0xa6>

0800725c <__exponent>:
 800725c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800725e:	4603      	mov	r3, r0
 8007260:	2900      	cmp	r1, #0
 8007262:	bfb8      	it	lt
 8007264:	4249      	neglt	r1, r1
 8007266:	f803 2b02 	strb.w	r2, [r3], #2
 800726a:	bfb4      	ite	lt
 800726c:	222d      	movlt	r2, #45	; 0x2d
 800726e:	222b      	movge	r2, #43	; 0x2b
 8007270:	2909      	cmp	r1, #9
 8007272:	7042      	strb	r2, [r0, #1]
 8007274:	dd2a      	ble.n	80072cc <__exponent+0x70>
 8007276:	f10d 0407 	add.w	r4, sp, #7
 800727a:	46a4      	mov	ip, r4
 800727c:	270a      	movs	r7, #10
 800727e:	46a6      	mov	lr, r4
 8007280:	460a      	mov	r2, r1
 8007282:	fb91 f6f7 	sdiv	r6, r1, r7
 8007286:	fb07 1516 	mls	r5, r7, r6, r1
 800728a:	3530      	adds	r5, #48	; 0x30
 800728c:	2a63      	cmp	r2, #99	; 0x63
 800728e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007292:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007296:	4631      	mov	r1, r6
 8007298:	dcf1      	bgt.n	800727e <__exponent+0x22>
 800729a:	3130      	adds	r1, #48	; 0x30
 800729c:	f1ae 0502 	sub.w	r5, lr, #2
 80072a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072a4:	1c44      	adds	r4, r0, #1
 80072a6:	4629      	mov	r1, r5
 80072a8:	4561      	cmp	r1, ip
 80072aa:	d30a      	bcc.n	80072c2 <__exponent+0x66>
 80072ac:	f10d 0209 	add.w	r2, sp, #9
 80072b0:	eba2 020e 	sub.w	r2, r2, lr
 80072b4:	4565      	cmp	r5, ip
 80072b6:	bf88      	it	hi
 80072b8:	2200      	movhi	r2, #0
 80072ba:	4413      	add	r3, r2
 80072bc:	1a18      	subs	r0, r3, r0
 80072be:	b003      	add	sp, #12
 80072c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072ca:	e7ed      	b.n	80072a8 <__exponent+0x4c>
 80072cc:	2330      	movs	r3, #48	; 0x30
 80072ce:	3130      	adds	r1, #48	; 0x30
 80072d0:	7083      	strb	r3, [r0, #2]
 80072d2:	70c1      	strb	r1, [r0, #3]
 80072d4:	1d03      	adds	r3, r0, #4
 80072d6:	e7f1      	b.n	80072bc <__exponent+0x60>

080072d8 <_printf_float>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	ed2d 8b02 	vpush	{d8}
 80072e0:	b08d      	sub	sp, #52	; 0x34
 80072e2:	460c      	mov	r4, r1
 80072e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80072e8:	4616      	mov	r6, r2
 80072ea:	461f      	mov	r7, r3
 80072ec:	4605      	mov	r5, r0
 80072ee:	f001 fa67 	bl	80087c0 <_localeconv_r>
 80072f2:	f8d0 a000 	ldr.w	sl, [r0]
 80072f6:	4650      	mov	r0, sl
 80072f8:	f7f8 ff8a 	bl	8000210 <strlen>
 80072fc:	2300      	movs	r3, #0
 80072fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	9305      	str	r3, [sp, #20]
 8007304:	f8d8 3000 	ldr.w	r3, [r8]
 8007308:	f894 b018 	ldrb.w	fp, [r4, #24]
 800730c:	3307      	adds	r3, #7
 800730e:	f023 0307 	bic.w	r3, r3, #7
 8007312:	f103 0208 	add.w	r2, r3, #8
 8007316:	f8c8 2000 	str.w	r2, [r8]
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007322:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007326:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800732a:	9307      	str	r3, [sp, #28]
 800732c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007330:	ee08 0a10 	vmov	s16, r0
 8007334:	4b9f      	ldr	r3, [pc, #636]	; (80075b4 <_printf_float+0x2dc>)
 8007336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800733a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800733e:	f7f9 fc15 	bl	8000b6c <__aeabi_dcmpun>
 8007342:	bb88      	cbnz	r0, 80073a8 <_printf_float+0xd0>
 8007344:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007348:	4b9a      	ldr	r3, [pc, #616]	; (80075b4 <_printf_float+0x2dc>)
 800734a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800734e:	f7f9 fbef 	bl	8000b30 <__aeabi_dcmple>
 8007352:	bb48      	cbnz	r0, 80073a8 <_printf_float+0xd0>
 8007354:	2200      	movs	r2, #0
 8007356:	2300      	movs	r3, #0
 8007358:	4640      	mov	r0, r8
 800735a:	4649      	mov	r1, r9
 800735c:	f7f9 fbde 	bl	8000b1c <__aeabi_dcmplt>
 8007360:	b110      	cbz	r0, 8007368 <_printf_float+0x90>
 8007362:	232d      	movs	r3, #45	; 0x2d
 8007364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007368:	4b93      	ldr	r3, [pc, #588]	; (80075b8 <_printf_float+0x2e0>)
 800736a:	4894      	ldr	r0, [pc, #592]	; (80075bc <_printf_float+0x2e4>)
 800736c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007370:	bf94      	ite	ls
 8007372:	4698      	movls	r8, r3
 8007374:	4680      	movhi	r8, r0
 8007376:	2303      	movs	r3, #3
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	9b05      	ldr	r3, [sp, #20]
 800737c:	f023 0204 	bic.w	r2, r3, #4
 8007380:	6022      	str	r2, [r4, #0]
 8007382:	f04f 0900 	mov.w	r9, #0
 8007386:	9700      	str	r7, [sp, #0]
 8007388:	4633      	mov	r3, r6
 800738a:	aa0b      	add	r2, sp, #44	; 0x2c
 800738c:	4621      	mov	r1, r4
 800738e:	4628      	mov	r0, r5
 8007390:	f000 f9d8 	bl	8007744 <_printf_common>
 8007394:	3001      	adds	r0, #1
 8007396:	f040 8090 	bne.w	80074ba <_printf_float+0x1e2>
 800739a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800739e:	b00d      	add	sp, #52	; 0x34
 80073a0:	ecbd 8b02 	vpop	{d8}
 80073a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a8:	4642      	mov	r2, r8
 80073aa:	464b      	mov	r3, r9
 80073ac:	4640      	mov	r0, r8
 80073ae:	4649      	mov	r1, r9
 80073b0:	f7f9 fbdc 	bl	8000b6c <__aeabi_dcmpun>
 80073b4:	b140      	cbz	r0, 80073c8 <_printf_float+0xf0>
 80073b6:	464b      	mov	r3, r9
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	bfbc      	itt	lt
 80073bc:	232d      	movlt	r3, #45	; 0x2d
 80073be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073c2:	487f      	ldr	r0, [pc, #508]	; (80075c0 <_printf_float+0x2e8>)
 80073c4:	4b7f      	ldr	r3, [pc, #508]	; (80075c4 <_printf_float+0x2ec>)
 80073c6:	e7d1      	b.n	800736c <_printf_float+0x94>
 80073c8:	6863      	ldr	r3, [r4, #4]
 80073ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073ce:	9206      	str	r2, [sp, #24]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	d13f      	bne.n	8007454 <_printf_float+0x17c>
 80073d4:	2306      	movs	r3, #6
 80073d6:	6063      	str	r3, [r4, #4]
 80073d8:	9b05      	ldr	r3, [sp, #20]
 80073da:	6861      	ldr	r1, [r4, #4]
 80073dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073e0:	2300      	movs	r3, #0
 80073e2:	9303      	str	r3, [sp, #12]
 80073e4:	ab0a      	add	r3, sp, #40	; 0x28
 80073e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80073ea:	ab09      	add	r3, sp, #36	; 0x24
 80073ec:	ec49 8b10 	vmov	d0, r8, r9
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	6022      	str	r2, [r4, #0]
 80073f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80073f8:	4628      	mov	r0, r5
 80073fa:	f7ff fecd 	bl	8007198 <__cvt>
 80073fe:	9b06      	ldr	r3, [sp, #24]
 8007400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007402:	2b47      	cmp	r3, #71	; 0x47
 8007404:	4680      	mov	r8, r0
 8007406:	d108      	bne.n	800741a <_printf_float+0x142>
 8007408:	1cc8      	adds	r0, r1, #3
 800740a:	db02      	blt.n	8007412 <_printf_float+0x13a>
 800740c:	6863      	ldr	r3, [r4, #4]
 800740e:	4299      	cmp	r1, r3
 8007410:	dd41      	ble.n	8007496 <_printf_float+0x1be>
 8007412:	f1ab 0b02 	sub.w	fp, fp, #2
 8007416:	fa5f fb8b 	uxtb.w	fp, fp
 800741a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800741e:	d820      	bhi.n	8007462 <_printf_float+0x18a>
 8007420:	3901      	subs	r1, #1
 8007422:	465a      	mov	r2, fp
 8007424:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007428:	9109      	str	r1, [sp, #36]	; 0x24
 800742a:	f7ff ff17 	bl	800725c <__exponent>
 800742e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007430:	1813      	adds	r3, r2, r0
 8007432:	2a01      	cmp	r2, #1
 8007434:	4681      	mov	r9, r0
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	dc02      	bgt.n	8007440 <_printf_float+0x168>
 800743a:	6822      	ldr	r2, [r4, #0]
 800743c:	07d2      	lsls	r2, r2, #31
 800743e:	d501      	bpl.n	8007444 <_printf_float+0x16c>
 8007440:	3301      	adds	r3, #1
 8007442:	6123      	str	r3, [r4, #16]
 8007444:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007448:	2b00      	cmp	r3, #0
 800744a:	d09c      	beq.n	8007386 <_printf_float+0xae>
 800744c:	232d      	movs	r3, #45	; 0x2d
 800744e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007452:	e798      	b.n	8007386 <_printf_float+0xae>
 8007454:	9a06      	ldr	r2, [sp, #24]
 8007456:	2a47      	cmp	r2, #71	; 0x47
 8007458:	d1be      	bne.n	80073d8 <_printf_float+0x100>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1bc      	bne.n	80073d8 <_printf_float+0x100>
 800745e:	2301      	movs	r3, #1
 8007460:	e7b9      	b.n	80073d6 <_printf_float+0xfe>
 8007462:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007466:	d118      	bne.n	800749a <_printf_float+0x1c2>
 8007468:	2900      	cmp	r1, #0
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	dd0b      	ble.n	8007486 <_printf_float+0x1ae>
 800746e:	6121      	str	r1, [r4, #16]
 8007470:	b913      	cbnz	r3, 8007478 <_printf_float+0x1a0>
 8007472:	6822      	ldr	r2, [r4, #0]
 8007474:	07d0      	lsls	r0, r2, #31
 8007476:	d502      	bpl.n	800747e <_printf_float+0x1a6>
 8007478:	3301      	adds	r3, #1
 800747a:	440b      	add	r3, r1
 800747c:	6123      	str	r3, [r4, #16]
 800747e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007480:	f04f 0900 	mov.w	r9, #0
 8007484:	e7de      	b.n	8007444 <_printf_float+0x16c>
 8007486:	b913      	cbnz	r3, 800748e <_printf_float+0x1b6>
 8007488:	6822      	ldr	r2, [r4, #0]
 800748a:	07d2      	lsls	r2, r2, #31
 800748c:	d501      	bpl.n	8007492 <_printf_float+0x1ba>
 800748e:	3302      	adds	r3, #2
 8007490:	e7f4      	b.n	800747c <_printf_float+0x1a4>
 8007492:	2301      	movs	r3, #1
 8007494:	e7f2      	b.n	800747c <_printf_float+0x1a4>
 8007496:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800749a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800749c:	4299      	cmp	r1, r3
 800749e:	db05      	blt.n	80074ac <_printf_float+0x1d4>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	6121      	str	r1, [r4, #16]
 80074a4:	07d8      	lsls	r0, r3, #31
 80074a6:	d5ea      	bpl.n	800747e <_printf_float+0x1a6>
 80074a8:	1c4b      	adds	r3, r1, #1
 80074aa:	e7e7      	b.n	800747c <_printf_float+0x1a4>
 80074ac:	2900      	cmp	r1, #0
 80074ae:	bfd4      	ite	le
 80074b0:	f1c1 0202 	rsble	r2, r1, #2
 80074b4:	2201      	movgt	r2, #1
 80074b6:	4413      	add	r3, r2
 80074b8:	e7e0      	b.n	800747c <_printf_float+0x1a4>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	055a      	lsls	r2, r3, #21
 80074be:	d407      	bmi.n	80074d0 <_printf_float+0x1f8>
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	4642      	mov	r2, r8
 80074c4:	4631      	mov	r1, r6
 80074c6:	4628      	mov	r0, r5
 80074c8:	47b8      	blx	r7
 80074ca:	3001      	adds	r0, #1
 80074cc:	d12c      	bne.n	8007528 <_printf_float+0x250>
 80074ce:	e764      	b.n	800739a <_printf_float+0xc2>
 80074d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074d4:	f240 80e0 	bls.w	8007698 <_printf_float+0x3c0>
 80074d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074dc:	2200      	movs	r2, #0
 80074de:	2300      	movs	r3, #0
 80074e0:	f7f9 fb12 	bl	8000b08 <__aeabi_dcmpeq>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d034      	beq.n	8007552 <_printf_float+0x27a>
 80074e8:	4a37      	ldr	r2, [pc, #220]	; (80075c8 <_printf_float+0x2f0>)
 80074ea:	2301      	movs	r3, #1
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b8      	blx	r7
 80074f2:	3001      	adds	r0, #1
 80074f4:	f43f af51 	beq.w	800739a <_printf_float+0xc2>
 80074f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074fc:	429a      	cmp	r2, r3
 80074fe:	db02      	blt.n	8007506 <_printf_float+0x22e>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	07d8      	lsls	r0, r3, #31
 8007504:	d510      	bpl.n	8007528 <_printf_float+0x250>
 8007506:	ee18 3a10 	vmov	r3, s16
 800750a:	4652      	mov	r2, sl
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	f43f af41 	beq.w	800739a <_printf_float+0xc2>
 8007518:	f04f 0800 	mov.w	r8, #0
 800751c:	f104 091a 	add.w	r9, r4, #26
 8007520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007522:	3b01      	subs	r3, #1
 8007524:	4543      	cmp	r3, r8
 8007526:	dc09      	bgt.n	800753c <_printf_float+0x264>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	079b      	lsls	r3, r3, #30
 800752c:	f100 8105 	bmi.w	800773a <_printf_float+0x462>
 8007530:	68e0      	ldr	r0, [r4, #12]
 8007532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007534:	4298      	cmp	r0, r3
 8007536:	bfb8      	it	lt
 8007538:	4618      	movlt	r0, r3
 800753a:	e730      	b.n	800739e <_printf_float+0xc6>
 800753c:	2301      	movs	r3, #1
 800753e:	464a      	mov	r2, r9
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	f43f af27 	beq.w	800739a <_printf_float+0xc2>
 800754c:	f108 0801 	add.w	r8, r8, #1
 8007550:	e7e6      	b.n	8007520 <_printf_float+0x248>
 8007552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	dc39      	bgt.n	80075cc <_printf_float+0x2f4>
 8007558:	4a1b      	ldr	r2, [pc, #108]	; (80075c8 <_printf_float+0x2f0>)
 800755a:	2301      	movs	r3, #1
 800755c:	4631      	mov	r1, r6
 800755e:	4628      	mov	r0, r5
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	f43f af19 	beq.w	800739a <_printf_float+0xc2>
 8007568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800756c:	4313      	orrs	r3, r2
 800756e:	d102      	bne.n	8007576 <_printf_float+0x29e>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	07d9      	lsls	r1, r3, #31
 8007574:	d5d8      	bpl.n	8007528 <_printf_float+0x250>
 8007576:	ee18 3a10 	vmov	r3, s16
 800757a:	4652      	mov	r2, sl
 800757c:	4631      	mov	r1, r6
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	f43f af09 	beq.w	800739a <_printf_float+0xc2>
 8007588:	f04f 0900 	mov.w	r9, #0
 800758c:	f104 0a1a 	add.w	sl, r4, #26
 8007590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007592:	425b      	negs	r3, r3
 8007594:	454b      	cmp	r3, r9
 8007596:	dc01      	bgt.n	800759c <_printf_float+0x2c4>
 8007598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800759a:	e792      	b.n	80074c2 <_printf_float+0x1ea>
 800759c:	2301      	movs	r3, #1
 800759e:	4652      	mov	r2, sl
 80075a0:	4631      	mov	r1, r6
 80075a2:	4628      	mov	r0, r5
 80075a4:	47b8      	blx	r7
 80075a6:	3001      	adds	r0, #1
 80075a8:	f43f aef7 	beq.w	800739a <_printf_float+0xc2>
 80075ac:	f109 0901 	add.w	r9, r9, #1
 80075b0:	e7ee      	b.n	8007590 <_printf_float+0x2b8>
 80075b2:	bf00      	nop
 80075b4:	7fefffff 	.word	0x7fefffff
 80075b8:	08009e2c 	.word	0x08009e2c
 80075bc:	08009e30 	.word	0x08009e30
 80075c0:	08009e38 	.word	0x08009e38
 80075c4:	08009e34 	.word	0x08009e34
 80075c8:	08009e3c 	.word	0x08009e3c
 80075cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075d0:	429a      	cmp	r2, r3
 80075d2:	bfa8      	it	ge
 80075d4:	461a      	movge	r2, r3
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	4691      	mov	r9, r2
 80075da:	dc37      	bgt.n	800764c <_printf_float+0x374>
 80075dc:	f04f 0b00 	mov.w	fp, #0
 80075e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075e4:	f104 021a 	add.w	r2, r4, #26
 80075e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075ea:	9305      	str	r3, [sp, #20]
 80075ec:	eba3 0309 	sub.w	r3, r3, r9
 80075f0:	455b      	cmp	r3, fp
 80075f2:	dc33      	bgt.n	800765c <_printf_float+0x384>
 80075f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075f8:	429a      	cmp	r2, r3
 80075fa:	db3b      	blt.n	8007674 <_printf_float+0x39c>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	07da      	lsls	r2, r3, #31
 8007600:	d438      	bmi.n	8007674 <_printf_float+0x39c>
 8007602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007604:	9b05      	ldr	r3, [sp, #20]
 8007606:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	eba2 0901 	sub.w	r9, r2, r1
 800760e:	4599      	cmp	r9, r3
 8007610:	bfa8      	it	ge
 8007612:	4699      	movge	r9, r3
 8007614:	f1b9 0f00 	cmp.w	r9, #0
 8007618:	dc35      	bgt.n	8007686 <_printf_float+0x3ae>
 800761a:	f04f 0800 	mov.w	r8, #0
 800761e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007622:	f104 0a1a 	add.w	sl, r4, #26
 8007626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	eba3 0309 	sub.w	r3, r3, r9
 8007630:	4543      	cmp	r3, r8
 8007632:	f77f af79 	ble.w	8007528 <_printf_float+0x250>
 8007636:	2301      	movs	r3, #1
 8007638:	4652      	mov	r2, sl
 800763a:	4631      	mov	r1, r6
 800763c:	4628      	mov	r0, r5
 800763e:	47b8      	blx	r7
 8007640:	3001      	adds	r0, #1
 8007642:	f43f aeaa 	beq.w	800739a <_printf_float+0xc2>
 8007646:	f108 0801 	add.w	r8, r8, #1
 800764a:	e7ec      	b.n	8007626 <_printf_float+0x34e>
 800764c:	4613      	mov	r3, r2
 800764e:	4631      	mov	r1, r6
 8007650:	4642      	mov	r2, r8
 8007652:	4628      	mov	r0, r5
 8007654:	47b8      	blx	r7
 8007656:	3001      	adds	r0, #1
 8007658:	d1c0      	bne.n	80075dc <_printf_float+0x304>
 800765a:	e69e      	b.n	800739a <_printf_float+0xc2>
 800765c:	2301      	movs	r3, #1
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	9205      	str	r2, [sp, #20]
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	f43f ae97 	beq.w	800739a <_printf_float+0xc2>
 800766c:	9a05      	ldr	r2, [sp, #20]
 800766e:	f10b 0b01 	add.w	fp, fp, #1
 8007672:	e7b9      	b.n	80075e8 <_printf_float+0x310>
 8007674:	ee18 3a10 	vmov	r3, s16
 8007678:	4652      	mov	r2, sl
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	47b8      	blx	r7
 8007680:	3001      	adds	r0, #1
 8007682:	d1be      	bne.n	8007602 <_printf_float+0x32a>
 8007684:	e689      	b.n	800739a <_printf_float+0xc2>
 8007686:	9a05      	ldr	r2, [sp, #20]
 8007688:	464b      	mov	r3, r9
 800768a:	4442      	add	r2, r8
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	47b8      	blx	r7
 8007692:	3001      	adds	r0, #1
 8007694:	d1c1      	bne.n	800761a <_printf_float+0x342>
 8007696:	e680      	b.n	800739a <_printf_float+0xc2>
 8007698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800769a:	2a01      	cmp	r2, #1
 800769c:	dc01      	bgt.n	80076a2 <_printf_float+0x3ca>
 800769e:	07db      	lsls	r3, r3, #31
 80076a0:	d538      	bpl.n	8007714 <_printf_float+0x43c>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4642      	mov	r2, r8
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	f43f ae74 	beq.w	800739a <_printf_float+0xc2>
 80076b2:	ee18 3a10 	vmov	r3, s16
 80076b6:	4652      	mov	r2, sl
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	f43f ae6b 	beq.w	800739a <_printf_float+0xc2>
 80076c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076c8:	2200      	movs	r2, #0
 80076ca:	2300      	movs	r3, #0
 80076cc:	f7f9 fa1c 	bl	8000b08 <__aeabi_dcmpeq>
 80076d0:	b9d8      	cbnz	r0, 800770a <_printf_float+0x432>
 80076d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d4:	f108 0201 	add.w	r2, r8, #1
 80076d8:	3b01      	subs	r3, #1
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	d10e      	bne.n	8007702 <_printf_float+0x42a>
 80076e4:	e659      	b.n	800739a <_printf_float+0xc2>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4652      	mov	r2, sl
 80076ea:	4631      	mov	r1, r6
 80076ec:	4628      	mov	r0, r5
 80076ee:	47b8      	blx	r7
 80076f0:	3001      	adds	r0, #1
 80076f2:	f43f ae52 	beq.w	800739a <_printf_float+0xc2>
 80076f6:	f108 0801 	add.w	r8, r8, #1
 80076fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076fc:	3b01      	subs	r3, #1
 80076fe:	4543      	cmp	r3, r8
 8007700:	dcf1      	bgt.n	80076e6 <_printf_float+0x40e>
 8007702:	464b      	mov	r3, r9
 8007704:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007708:	e6dc      	b.n	80074c4 <_printf_float+0x1ec>
 800770a:	f04f 0800 	mov.w	r8, #0
 800770e:	f104 0a1a 	add.w	sl, r4, #26
 8007712:	e7f2      	b.n	80076fa <_printf_float+0x422>
 8007714:	2301      	movs	r3, #1
 8007716:	4642      	mov	r2, r8
 8007718:	e7df      	b.n	80076da <_printf_float+0x402>
 800771a:	2301      	movs	r3, #1
 800771c:	464a      	mov	r2, r9
 800771e:	4631      	mov	r1, r6
 8007720:	4628      	mov	r0, r5
 8007722:	47b8      	blx	r7
 8007724:	3001      	adds	r0, #1
 8007726:	f43f ae38 	beq.w	800739a <_printf_float+0xc2>
 800772a:	f108 0801 	add.w	r8, r8, #1
 800772e:	68e3      	ldr	r3, [r4, #12]
 8007730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007732:	1a5b      	subs	r3, r3, r1
 8007734:	4543      	cmp	r3, r8
 8007736:	dcf0      	bgt.n	800771a <_printf_float+0x442>
 8007738:	e6fa      	b.n	8007530 <_printf_float+0x258>
 800773a:	f04f 0800 	mov.w	r8, #0
 800773e:	f104 0919 	add.w	r9, r4, #25
 8007742:	e7f4      	b.n	800772e <_printf_float+0x456>

08007744 <_printf_common>:
 8007744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007748:	4616      	mov	r6, r2
 800774a:	4699      	mov	r9, r3
 800774c:	688a      	ldr	r2, [r1, #8]
 800774e:	690b      	ldr	r3, [r1, #16]
 8007750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007754:	4293      	cmp	r3, r2
 8007756:	bfb8      	it	lt
 8007758:	4613      	movlt	r3, r2
 800775a:	6033      	str	r3, [r6, #0]
 800775c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007760:	4607      	mov	r7, r0
 8007762:	460c      	mov	r4, r1
 8007764:	b10a      	cbz	r2, 800776a <_printf_common+0x26>
 8007766:	3301      	adds	r3, #1
 8007768:	6033      	str	r3, [r6, #0]
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	0699      	lsls	r1, r3, #26
 800776e:	bf42      	ittt	mi
 8007770:	6833      	ldrmi	r3, [r6, #0]
 8007772:	3302      	addmi	r3, #2
 8007774:	6033      	strmi	r3, [r6, #0]
 8007776:	6825      	ldr	r5, [r4, #0]
 8007778:	f015 0506 	ands.w	r5, r5, #6
 800777c:	d106      	bne.n	800778c <_printf_common+0x48>
 800777e:	f104 0a19 	add.w	sl, r4, #25
 8007782:	68e3      	ldr	r3, [r4, #12]
 8007784:	6832      	ldr	r2, [r6, #0]
 8007786:	1a9b      	subs	r3, r3, r2
 8007788:	42ab      	cmp	r3, r5
 800778a:	dc26      	bgt.n	80077da <_printf_common+0x96>
 800778c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007790:	1e13      	subs	r3, r2, #0
 8007792:	6822      	ldr	r2, [r4, #0]
 8007794:	bf18      	it	ne
 8007796:	2301      	movne	r3, #1
 8007798:	0692      	lsls	r2, r2, #26
 800779a:	d42b      	bmi.n	80077f4 <_printf_common+0xb0>
 800779c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077a0:	4649      	mov	r1, r9
 80077a2:	4638      	mov	r0, r7
 80077a4:	47c0      	blx	r8
 80077a6:	3001      	adds	r0, #1
 80077a8:	d01e      	beq.n	80077e8 <_printf_common+0xa4>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	68e5      	ldr	r5, [r4, #12]
 80077ae:	6832      	ldr	r2, [r6, #0]
 80077b0:	f003 0306 	and.w	r3, r3, #6
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	bf08      	it	eq
 80077b8:	1aad      	subeq	r5, r5, r2
 80077ba:	68a3      	ldr	r3, [r4, #8]
 80077bc:	6922      	ldr	r2, [r4, #16]
 80077be:	bf0c      	ite	eq
 80077c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077c4:	2500      	movne	r5, #0
 80077c6:	4293      	cmp	r3, r2
 80077c8:	bfc4      	itt	gt
 80077ca:	1a9b      	subgt	r3, r3, r2
 80077cc:	18ed      	addgt	r5, r5, r3
 80077ce:	2600      	movs	r6, #0
 80077d0:	341a      	adds	r4, #26
 80077d2:	42b5      	cmp	r5, r6
 80077d4:	d11a      	bne.n	800780c <_printf_common+0xc8>
 80077d6:	2000      	movs	r0, #0
 80077d8:	e008      	b.n	80077ec <_printf_common+0xa8>
 80077da:	2301      	movs	r3, #1
 80077dc:	4652      	mov	r2, sl
 80077de:	4649      	mov	r1, r9
 80077e0:	4638      	mov	r0, r7
 80077e2:	47c0      	blx	r8
 80077e4:	3001      	adds	r0, #1
 80077e6:	d103      	bne.n	80077f0 <_printf_common+0xac>
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f0:	3501      	adds	r5, #1
 80077f2:	e7c6      	b.n	8007782 <_printf_common+0x3e>
 80077f4:	18e1      	adds	r1, r4, r3
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	2030      	movs	r0, #48	; 0x30
 80077fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077fe:	4422      	add	r2, r4
 8007800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007808:	3302      	adds	r3, #2
 800780a:	e7c7      	b.n	800779c <_printf_common+0x58>
 800780c:	2301      	movs	r3, #1
 800780e:	4622      	mov	r2, r4
 8007810:	4649      	mov	r1, r9
 8007812:	4638      	mov	r0, r7
 8007814:	47c0      	blx	r8
 8007816:	3001      	adds	r0, #1
 8007818:	d0e6      	beq.n	80077e8 <_printf_common+0xa4>
 800781a:	3601      	adds	r6, #1
 800781c:	e7d9      	b.n	80077d2 <_printf_common+0x8e>
	...

08007820 <_printf_i>:
 8007820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007824:	460c      	mov	r4, r1
 8007826:	4691      	mov	r9, r2
 8007828:	7e27      	ldrb	r7, [r4, #24]
 800782a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800782c:	2f78      	cmp	r7, #120	; 0x78
 800782e:	4680      	mov	r8, r0
 8007830:	469a      	mov	sl, r3
 8007832:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007836:	d807      	bhi.n	8007848 <_printf_i+0x28>
 8007838:	2f62      	cmp	r7, #98	; 0x62
 800783a:	d80a      	bhi.n	8007852 <_printf_i+0x32>
 800783c:	2f00      	cmp	r7, #0
 800783e:	f000 80d8 	beq.w	80079f2 <_printf_i+0x1d2>
 8007842:	2f58      	cmp	r7, #88	; 0x58
 8007844:	f000 80a3 	beq.w	800798e <_printf_i+0x16e>
 8007848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800784c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007850:	e03a      	b.n	80078c8 <_printf_i+0xa8>
 8007852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007856:	2b15      	cmp	r3, #21
 8007858:	d8f6      	bhi.n	8007848 <_printf_i+0x28>
 800785a:	a001      	add	r0, pc, #4	; (adr r0, 8007860 <_printf_i+0x40>)
 800785c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007860:	080078b9 	.word	0x080078b9
 8007864:	080078cd 	.word	0x080078cd
 8007868:	08007849 	.word	0x08007849
 800786c:	08007849 	.word	0x08007849
 8007870:	08007849 	.word	0x08007849
 8007874:	08007849 	.word	0x08007849
 8007878:	080078cd 	.word	0x080078cd
 800787c:	08007849 	.word	0x08007849
 8007880:	08007849 	.word	0x08007849
 8007884:	08007849 	.word	0x08007849
 8007888:	08007849 	.word	0x08007849
 800788c:	080079d9 	.word	0x080079d9
 8007890:	080078fd 	.word	0x080078fd
 8007894:	080079bb 	.word	0x080079bb
 8007898:	08007849 	.word	0x08007849
 800789c:	08007849 	.word	0x08007849
 80078a0:	080079fb 	.word	0x080079fb
 80078a4:	08007849 	.word	0x08007849
 80078a8:	080078fd 	.word	0x080078fd
 80078ac:	08007849 	.word	0x08007849
 80078b0:	08007849 	.word	0x08007849
 80078b4:	080079c3 	.word	0x080079c3
 80078b8:	680b      	ldr	r3, [r1, #0]
 80078ba:	1d1a      	adds	r2, r3, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	600a      	str	r2, [r1, #0]
 80078c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0a3      	b.n	8007a14 <_printf_i+0x1f4>
 80078cc:	6825      	ldr	r5, [r4, #0]
 80078ce:	6808      	ldr	r0, [r1, #0]
 80078d0:	062e      	lsls	r6, r5, #24
 80078d2:	f100 0304 	add.w	r3, r0, #4
 80078d6:	d50a      	bpl.n	80078ee <_printf_i+0xce>
 80078d8:	6805      	ldr	r5, [r0, #0]
 80078da:	600b      	str	r3, [r1, #0]
 80078dc:	2d00      	cmp	r5, #0
 80078de:	da03      	bge.n	80078e8 <_printf_i+0xc8>
 80078e0:	232d      	movs	r3, #45	; 0x2d
 80078e2:	426d      	negs	r5, r5
 80078e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078e8:	485e      	ldr	r0, [pc, #376]	; (8007a64 <_printf_i+0x244>)
 80078ea:	230a      	movs	r3, #10
 80078ec:	e019      	b.n	8007922 <_printf_i+0x102>
 80078ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80078f2:	6805      	ldr	r5, [r0, #0]
 80078f4:	600b      	str	r3, [r1, #0]
 80078f6:	bf18      	it	ne
 80078f8:	b22d      	sxthne	r5, r5
 80078fa:	e7ef      	b.n	80078dc <_printf_i+0xbc>
 80078fc:	680b      	ldr	r3, [r1, #0]
 80078fe:	6825      	ldr	r5, [r4, #0]
 8007900:	1d18      	adds	r0, r3, #4
 8007902:	6008      	str	r0, [r1, #0]
 8007904:	0628      	lsls	r0, r5, #24
 8007906:	d501      	bpl.n	800790c <_printf_i+0xec>
 8007908:	681d      	ldr	r5, [r3, #0]
 800790a:	e002      	b.n	8007912 <_printf_i+0xf2>
 800790c:	0669      	lsls	r1, r5, #25
 800790e:	d5fb      	bpl.n	8007908 <_printf_i+0xe8>
 8007910:	881d      	ldrh	r5, [r3, #0]
 8007912:	4854      	ldr	r0, [pc, #336]	; (8007a64 <_printf_i+0x244>)
 8007914:	2f6f      	cmp	r7, #111	; 0x6f
 8007916:	bf0c      	ite	eq
 8007918:	2308      	moveq	r3, #8
 800791a:	230a      	movne	r3, #10
 800791c:	2100      	movs	r1, #0
 800791e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007922:	6866      	ldr	r6, [r4, #4]
 8007924:	60a6      	str	r6, [r4, #8]
 8007926:	2e00      	cmp	r6, #0
 8007928:	bfa2      	ittt	ge
 800792a:	6821      	ldrge	r1, [r4, #0]
 800792c:	f021 0104 	bicge.w	r1, r1, #4
 8007930:	6021      	strge	r1, [r4, #0]
 8007932:	b90d      	cbnz	r5, 8007938 <_printf_i+0x118>
 8007934:	2e00      	cmp	r6, #0
 8007936:	d04d      	beq.n	80079d4 <_printf_i+0x1b4>
 8007938:	4616      	mov	r6, r2
 800793a:	fbb5 f1f3 	udiv	r1, r5, r3
 800793e:	fb03 5711 	mls	r7, r3, r1, r5
 8007942:	5dc7      	ldrb	r7, [r0, r7]
 8007944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007948:	462f      	mov	r7, r5
 800794a:	42bb      	cmp	r3, r7
 800794c:	460d      	mov	r5, r1
 800794e:	d9f4      	bls.n	800793a <_printf_i+0x11a>
 8007950:	2b08      	cmp	r3, #8
 8007952:	d10b      	bne.n	800796c <_printf_i+0x14c>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	07df      	lsls	r7, r3, #31
 8007958:	d508      	bpl.n	800796c <_printf_i+0x14c>
 800795a:	6923      	ldr	r3, [r4, #16]
 800795c:	6861      	ldr	r1, [r4, #4]
 800795e:	4299      	cmp	r1, r3
 8007960:	bfde      	ittt	le
 8007962:	2330      	movle	r3, #48	; 0x30
 8007964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007968:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800796c:	1b92      	subs	r2, r2, r6
 800796e:	6122      	str	r2, [r4, #16]
 8007970:	f8cd a000 	str.w	sl, [sp]
 8007974:	464b      	mov	r3, r9
 8007976:	aa03      	add	r2, sp, #12
 8007978:	4621      	mov	r1, r4
 800797a:	4640      	mov	r0, r8
 800797c:	f7ff fee2 	bl	8007744 <_printf_common>
 8007980:	3001      	adds	r0, #1
 8007982:	d14c      	bne.n	8007a1e <_printf_i+0x1fe>
 8007984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007988:	b004      	add	sp, #16
 800798a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798e:	4835      	ldr	r0, [pc, #212]	; (8007a64 <_printf_i+0x244>)
 8007990:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	680e      	ldr	r6, [r1, #0]
 8007998:	061f      	lsls	r7, r3, #24
 800799a:	f856 5b04 	ldr.w	r5, [r6], #4
 800799e:	600e      	str	r6, [r1, #0]
 80079a0:	d514      	bpl.n	80079cc <_printf_i+0x1ac>
 80079a2:	07d9      	lsls	r1, r3, #31
 80079a4:	bf44      	itt	mi
 80079a6:	f043 0320 	orrmi.w	r3, r3, #32
 80079aa:	6023      	strmi	r3, [r4, #0]
 80079ac:	b91d      	cbnz	r5, 80079b6 <_printf_i+0x196>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	f023 0320 	bic.w	r3, r3, #32
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	2310      	movs	r3, #16
 80079b8:	e7b0      	b.n	800791c <_printf_i+0xfc>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	f043 0320 	orr.w	r3, r3, #32
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	2378      	movs	r3, #120	; 0x78
 80079c4:	4828      	ldr	r0, [pc, #160]	; (8007a68 <_printf_i+0x248>)
 80079c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079ca:	e7e3      	b.n	8007994 <_printf_i+0x174>
 80079cc:	065e      	lsls	r6, r3, #25
 80079ce:	bf48      	it	mi
 80079d0:	b2ad      	uxthmi	r5, r5
 80079d2:	e7e6      	b.n	80079a2 <_printf_i+0x182>
 80079d4:	4616      	mov	r6, r2
 80079d6:	e7bb      	b.n	8007950 <_printf_i+0x130>
 80079d8:	680b      	ldr	r3, [r1, #0]
 80079da:	6826      	ldr	r6, [r4, #0]
 80079dc:	6960      	ldr	r0, [r4, #20]
 80079de:	1d1d      	adds	r5, r3, #4
 80079e0:	600d      	str	r5, [r1, #0]
 80079e2:	0635      	lsls	r5, r6, #24
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	d501      	bpl.n	80079ec <_printf_i+0x1cc>
 80079e8:	6018      	str	r0, [r3, #0]
 80079ea:	e002      	b.n	80079f2 <_printf_i+0x1d2>
 80079ec:	0671      	lsls	r1, r6, #25
 80079ee:	d5fb      	bpl.n	80079e8 <_printf_i+0x1c8>
 80079f0:	8018      	strh	r0, [r3, #0]
 80079f2:	2300      	movs	r3, #0
 80079f4:	6123      	str	r3, [r4, #16]
 80079f6:	4616      	mov	r6, r2
 80079f8:	e7ba      	b.n	8007970 <_printf_i+0x150>
 80079fa:	680b      	ldr	r3, [r1, #0]
 80079fc:	1d1a      	adds	r2, r3, #4
 80079fe:	600a      	str	r2, [r1, #0]
 8007a00:	681e      	ldr	r6, [r3, #0]
 8007a02:	6862      	ldr	r2, [r4, #4]
 8007a04:	2100      	movs	r1, #0
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7f8 fc0a 	bl	8000220 <memchr>
 8007a0c:	b108      	cbz	r0, 8007a12 <_printf_i+0x1f2>
 8007a0e:	1b80      	subs	r0, r0, r6
 8007a10:	6060      	str	r0, [r4, #4]
 8007a12:	6863      	ldr	r3, [r4, #4]
 8007a14:	6123      	str	r3, [r4, #16]
 8007a16:	2300      	movs	r3, #0
 8007a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a1c:	e7a8      	b.n	8007970 <_printf_i+0x150>
 8007a1e:	6923      	ldr	r3, [r4, #16]
 8007a20:	4632      	mov	r2, r6
 8007a22:	4649      	mov	r1, r9
 8007a24:	4640      	mov	r0, r8
 8007a26:	47d0      	blx	sl
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d0ab      	beq.n	8007984 <_printf_i+0x164>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	079b      	lsls	r3, r3, #30
 8007a30:	d413      	bmi.n	8007a5a <_printf_i+0x23a>
 8007a32:	68e0      	ldr	r0, [r4, #12]
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	4298      	cmp	r0, r3
 8007a38:	bfb8      	it	lt
 8007a3a:	4618      	movlt	r0, r3
 8007a3c:	e7a4      	b.n	8007988 <_printf_i+0x168>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4632      	mov	r2, r6
 8007a42:	4649      	mov	r1, r9
 8007a44:	4640      	mov	r0, r8
 8007a46:	47d0      	blx	sl
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d09b      	beq.n	8007984 <_printf_i+0x164>
 8007a4c:	3501      	adds	r5, #1
 8007a4e:	68e3      	ldr	r3, [r4, #12]
 8007a50:	9903      	ldr	r1, [sp, #12]
 8007a52:	1a5b      	subs	r3, r3, r1
 8007a54:	42ab      	cmp	r3, r5
 8007a56:	dcf2      	bgt.n	8007a3e <_printf_i+0x21e>
 8007a58:	e7eb      	b.n	8007a32 <_printf_i+0x212>
 8007a5a:	2500      	movs	r5, #0
 8007a5c:	f104 0619 	add.w	r6, r4, #25
 8007a60:	e7f5      	b.n	8007a4e <_printf_i+0x22e>
 8007a62:	bf00      	nop
 8007a64:	08009e3e 	.word	0x08009e3e
 8007a68:	08009e4f 	.word	0x08009e4f

08007a6c <_sbrk_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d06      	ldr	r5, [pc, #24]	; (8007a88 <_sbrk_r+0x1c>)
 8007a70:	2300      	movs	r3, #0
 8007a72:	4604      	mov	r4, r0
 8007a74:	4608      	mov	r0, r1
 8007a76:	602b      	str	r3, [r5, #0]
 8007a78:	f7fa fac2 	bl	8002000 <_sbrk>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d102      	bne.n	8007a86 <_sbrk_r+0x1a>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	b103      	cbz	r3, 8007a86 <_sbrk_r+0x1a>
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	200007dc 	.word	0x200007dc

08007a8c <siprintf>:
 8007a8c:	b40e      	push	{r1, r2, r3}
 8007a8e:	b500      	push	{lr}
 8007a90:	b09c      	sub	sp, #112	; 0x70
 8007a92:	ab1d      	add	r3, sp, #116	; 0x74
 8007a94:	9002      	str	r0, [sp, #8]
 8007a96:	9006      	str	r0, [sp, #24]
 8007a98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a9c:	4809      	ldr	r0, [pc, #36]	; (8007ac4 <siprintf+0x38>)
 8007a9e:	9107      	str	r1, [sp, #28]
 8007aa0:	9104      	str	r1, [sp, #16]
 8007aa2:	4909      	ldr	r1, [pc, #36]	; (8007ac8 <siprintf+0x3c>)
 8007aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aa8:	9105      	str	r1, [sp, #20]
 8007aaa:	6800      	ldr	r0, [r0, #0]
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	a902      	add	r1, sp, #8
 8007ab0:	f001 fad6 	bl	8009060 <_svfiprintf_r>
 8007ab4:	9b02      	ldr	r3, [sp, #8]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	b01c      	add	sp, #112	; 0x70
 8007abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ac0:	b003      	add	sp, #12
 8007ac2:	4770      	bx	lr
 8007ac4:	20000010 	.word	0x20000010
 8007ac8:	ffff0208 	.word	0xffff0208

08007acc <quorem>:
 8007acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad0:	6903      	ldr	r3, [r0, #16]
 8007ad2:	690c      	ldr	r4, [r1, #16]
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	4607      	mov	r7, r0
 8007ad8:	f2c0 8081 	blt.w	8007bde <quorem+0x112>
 8007adc:	3c01      	subs	r4, #1
 8007ade:	f101 0814 	add.w	r8, r1, #20
 8007ae2:	f100 0514 	add.w	r5, r0, #20
 8007ae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007af0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007af4:	3301      	adds	r3, #1
 8007af6:	429a      	cmp	r2, r3
 8007af8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007afc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b00:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b04:	d331      	bcc.n	8007b6a <quorem+0x9e>
 8007b06:	f04f 0e00 	mov.w	lr, #0
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	46ac      	mov	ip, r5
 8007b0e:	46f2      	mov	sl, lr
 8007b10:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b14:	b293      	uxth	r3, r2
 8007b16:	fb06 e303 	mla	r3, r6, r3, lr
 8007b1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	ebaa 0303 	sub.w	r3, sl, r3
 8007b24:	0c12      	lsrs	r2, r2, #16
 8007b26:	f8dc a000 	ldr.w	sl, [ip]
 8007b2a:	fb06 e202 	mla	r2, r6, r2, lr
 8007b2e:	fa13 f38a 	uxtah	r3, r3, sl
 8007b32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b36:	fa1f fa82 	uxth.w	sl, r2
 8007b3a:	f8dc 2000 	ldr.w	r2, [ip]
 8007b3e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007b42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b4c:	4581      	cmp	r9, r0
 8007b4e:	f84c 3b04 	str.w	r3, [ip], #4
 8007b52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b56:	d2db      	bcs.n	8007b10 <quorem+0x44>
 8007b58:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b5c:	b92b      	cbnz	r3, 8007b6a <quorem+0x9e>
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	3b04      	subs	r3, #4
 8007b62:	429d      	cmp	r5, r3
 8007b64:	461a      	mov	r2, r3
 8007b66:	d32e      	bcc.n	8007bc6 <quorem+0xfa>
 8007b68:	613c      	str	r4, [r7, #16]
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	f001 f8cc 	bl	8008d08 <__mcmp>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	db24      	blt.n	8007bbe <quorem+0xf2>
 8007b74:	3601      	adds	r6, #1
 8007b76:	4628      	mov	r0, r5
 8007b78:	f04f 0c00 	mov.w	ip, #0
 8007b7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b80:	f8d0 e000 	ldr.w	lr, [r0]
 8007b84:	b293      	uxth	r3, r2
 8007b86:	ebac 0303 	sub.w	r3, ip, r3
 8007b8a:	0c12      	lsrs	r2, r2, #16
 8007b8c:	fa13 f38e 	uxtah	r3, r3, lr
 8007b90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b9e:	45c1      	cmp	r9, r8
 8007ba0:	f840 3b04 	str.w	r3, [r0], #4
 8007ba4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ba8:	d2e8      	bcs.n	8007b7c <quorem+0xb0>
 8007baa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bb2:	b922      	cbnz	r2, 8007bbe <quorem+0xf2>
 8007bb4:	3b04      	subs	r3, #4
 8007bb6:	429d      	cmp	r5, r3
 8007bb8:	461a      	mov	r2, r3
 8007bba:	d30a      	bcc.n	8007bd2 <quorem+0x106>
 8007bbc:	613c      	str	r4, [r7, #16]
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	b003      	add	sp, #12
 8007bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc6:	6812      	ldr	r2, [r2, #0]
 8007bc8:	3b04      	subs	r3, #4
 8007bca:	2a00      	cmp	r2, #0
 8007bcc:	d1cc      	bne.n	8007b68 <quorem+0x9c>
 8007bce:	3c01      	subs	r4, #1
 8007bd0:	e7c7      	b.n	8007b62 <quorem+0x96>
 8007bd2:	6812      	ldr	r2, [r2, #0]
 8007bd4:	3b04      	subs	r3, #4
 8007bd6:	2a00      	cmp	r2, #0
 8007bd8:	d1f0      	bne.n	8007bbc <quorem+0xf0>
 8007bda:	3c01      	subs	r4, #1
 8007bdc:	e7eb      	b.n	8007bb6 <quorem+0xea>
 8007bde:	2000      	movs	r0, #0
 8007be0:	e7ee      	b.n	8007bc0 <quorem+0xf4>
 8007be2:	0000      	movs	r0, r0
 8007be4:	0000      	movs	r0, r0
	...

08007be8 <_dtoa_r>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	ed2d 8b02 	vpush	{d8}
 8007bf0:	ec57 6b10 	vmov	r6, r7, d0
 8007bf4:	b095      	sub	sp, #84	; 0x54
 8007bf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bfc:	9105      	str	r1, [sp, #20]
 8007bfe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007c02:	4604      	mov	r4, r0
 8007c04:	9209      	str	r2, [sp, #36]	; 0x24
 8007c06:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c08:	b975      	cbnz	r5, 8007c28 <_dtoa_r+0x40>
 8007c0a:	2010      	movs	r0, #16
 8007c0c:	f000 fddc 	bl	80087c8 <malloc>
 8007c10:	4602      	mov	r2, r0
 8007c12:	6260      	str	r0, [r4, #36]	; 0x24
 8007c14:	b920      	cbnz	r0, 8007c20 <_dtoa_r+0x38>
 8007c16:	4bb2      	ldr	r3, [pc, #712]	; (8007ee0 <_dtoa_r+0x2f8>)
 8007c18:	21ea      	movs	r1, #234	; 0xea
 8007c1a:	48b2      	ldr	r0, [pc, #712]	; (8007ee4 <_dtoa_r+0x2fc>)
 8007c1c:	f001 fb20 	bl	8009260 <__assert_func>
 8007c20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c24:	6005      	str	r5, [r0, #0]
 8007c26:	60c5      	str	r5, [r0, #12]
 8007c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c2a:	6819      	ldr	r1, [r3, #0]
 8007c2c:	b151      	cbz	r1, 8007c44 <_dtoa_r+0x5c>
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	604a      	str	r2, [r1, #4]
 8007c32:	2301      	movs	r3, #1
 8007c34:	4093      	lsls	r3, r2
 8007c36:	608b      	str	r3, [r1, #8]
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fe27 	bl	800888c <_Bfree>
 8007c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	1e3b      	subs	r3, r7, #0
 8007c46:	bfb9      	ittee	lt
 8007c48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c4c:	9303      	strlt	r3, [sp, #12]
 8007c4e:	2300      	movge	r3, #0
 8007c50:	f8c8 3000 	strge.w	r3, [r8]
 8007c54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007c58:	4ba3      	ldr	r3, [pc, #652]	; (8007ee8 <_dtoa_r+0x300>)
 8007c5a:	bfbc      	itt	lt
 8007c5c:	2201      	movlt	r2, #1
 8007c5e:	f8c8 2000 	strlt.w	r2, [r8]
 8007c62:	ea33 0309 	bics.w	r3, r3, r9
 8007c66:	d11b      	bne.n	8007ca0 <_dtoa_r+0xb8>
 8007c68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c74:	4333      	orrs	r3, r6
 8007c76:	f000 857a 	beq.w	800876e <_dtoa_r+0xb86>
 8007c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c7c:	b963      	cbnz	r3, 8007c98 <_dtoa_r+0xb0>
 8007c7e:	4b9b      	ldr	r3, [pc, #620]	; (8007eec <_dtoa_r+0x304>)
 8007c80:	e024      	b.n	8007ccc <_dtoa_r+0xe4>
 8007c82:	4b9b      	ldr	r3, [pc, #620]	; (8007ef0 <_dtoa_r+0x308>)
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	3308      	adds	r3, #8
 8007c88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	9800      	ldr	r0, [sp, #0]
 8007c8e:	b015      	add	sp, #84	; 0x54
 8007c90:	ecbd 8b02 	vpop	{d8}
 8007c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c98:	4b94      	ldr	r3, [pc, #592]	; (8007eec <_dtoa_r+0x304>)
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	3303      	adds	r3, #3
 8007c9e:	e7f3      	b.n	8007c88 <_dtoa_r+0xa0>
 8007ca0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	ec51 0b17 	vmov	r0, r1, d7
 8007caa:	2300      	movs	r3, #0
 8007cac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007cb0:	f7f8 ff2a 	bl	8000b08 <__aeabi_dcmpeq>
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	b158      	cbz	r0, 8007cd0 <_dtoa_r+0xe8>
 8007cb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cba:	2301      	movs	r3, #1
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 8551 	beq.w	8008768 <_dtoa_r+0xb80>
 8007cc6:	488b      	ldr	r0, [pc, #556]	; (8007ef4 <_dtoa_r+0x30c>)
 8007cc8:	6018      	str	r0, [r3, #0]
 8007cca:	1e43      	subs	r3, r0, #1
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	e7dd      	b.n	8007c8c <_dtoa_r+0xa4>
 8007cd0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007cd4:	aa12      	add	r2, sp, #72	; 0x48
 8007cd6:	a913      	add	r1, sp, #76	; 0x4c
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f001 f8b9 	bl	8008e50 <__d2b>
 8007cde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ce2:	4683      	mov	fp, r0
 8007ce4:	2d00      	cmp	r5, #0
 8007ce6:	d07c      	beq.n	8007de2 <_dtoa_r+0x1fa>
 8007ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cf2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007cf6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007cfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007cfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d02:	4b7d      	ldr	r3, [pc, #500]	; (8007ef8 <_dtoa_r+0x310>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	4630      	mov	r0, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	f7f8 fadd 	bl	80002c8 <__aeabi_dsub>
 8007d0e:	a36e      	add	r3, pc, #440	; (adr r3, 8007ec8 <_dtoa_r+0x2e0>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fc90 	bl	8000638 <__aeabi_dmul>
 8007d18:	a36d      	add	r3, pc, #436	; (adr r3, 8007ed0 <_dtoa_r+0x2e8>)
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	f7f8 fad5 	bl	80002cc <__adddf3>
 8007d22:	4606      	mov	r6, r0
 8007d24:	4628      	mov	r0, r5
 8007d26:	460f      	mov	r7, r1
 8007d28:	f7f8 fc1c 	bl	8000564 <__aeabi_i2d>
 8007d2c:	a36a      	add	r3, pc, #424	; (adr r3, 8007ed8 <_dtoa_r+0x2f0>)
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	f7f8 fc81 	bl	8000638 <__aeabi_dmul>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	f7f8 fac5 	bl	80002cc <__adddf3>
 8007d42:	4606      	mov	r6, r0
 8007d44:	460f      	mov	r7, r1
 8007d46:	f7f8 ff27 	bl	8000b98 <__aeabi_d2iz>
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	4682      	mov	sl, r0
 8007d4e:	2300      	movs	r3, #0
 8007d50:	4630      	mov	r0, r6
 8007d52:	4639      	mov	r1, r7
 8007d54:	f7f8 fee2 	bl	8000b1c <__aeabi_dcmplt>
 8007d58:	b148      	cbz	r0, 8007d6e <_dtoa_r+0x186>
 8007d5a:	4650      	mov	r0, sl
 8007d5c:	f7f8 fc02 	bl	8000564 <__aeabi_i2d>
 8007d60:	4632      	mov	r2, r6
 8007d62:	463b      	mov	r3, r7
 8007d64:	f7f8 fed0 	bl	8000b08 <__aeabi_dcmpeq>
 8007d68:	b908      	cbnz	r0, 8007d6e <_dtoa_r+0x186>
 8007d6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007d6e:	f1ba 0f16 	cmp.w	sl, #22
 8007d72:	d854      	bhi.n	8007e1e <_dtoa_r+0x236>
 8007d74:	4b61      	ldr	r3, [pc, #388]	; (8007efc <_dtoa_r+0x314>)
 8007d76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d82:	f7f8 fecb 	bl	8000b1c <__aeabi_dcmplt>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d04b      	beq.n	8007e22 <_dtoa_r+0x23a>
 8007d8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007d8e:	2300      	movs	r3, #0
 8007d90:	930e      	str	r3, [sp, #56]	; 0x38
 8007d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d94:	1b5d      	subs	r5, r3, r5
 8007d96:	1e6b      	subs	r3, r5, #1
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	bf43      	ittte	mi
 8007d9c:	2300      	movmi	r3, #0
 8007d9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007da2:	9304      	strmi	r3, [sp, #16]
 8007da4:	f04f 0800 	movpl.w	r8, #0
 8007da8:	f1ba 0f00 	cmp.w	sl, #0
 8007dac:	db3b      	blt.n	8007e26 <_dtoa_r+0x23e>
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007db4:	4453      	add	r3, sl
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	2300      	movs	r3, #0
 8007dba:	9306      	str	r3, [sp, #24]
 8007dbc:	9b05      	ldr	r3, [sp, #20]
 8007dbe:	2b09      	cmp	r3, #9
 8007dc0:	d869      	bhi.n	8007e96 <_dtoa_r+0x2ae>
 8007dc2:	2b05      	cmp	r3, #5
 8007dc4:	bfc4      	itt	gt
 8007dc6:	3b04      	subgt	r3, #4
 8007dc8:	9305      	strgt	r3, [sp, #20]
 8007dca:	9b05      	ldr	r3, [sp, #20]
 8007dcc:	f1a3 0302 	sub.w	r3, r3, #2
 8007dd0:	bfcc      	ite	gt
 8007dd2:	2500      	movgt	r5, #0
 8007dd4:	2501      	movle	r5, #1
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d869      	bhi.n	8007eae <_dtoa_r+0x2c6>
 8007dda:	e8df f003 	tbb	[pc, r3]
 8007dde:	4e2c      	.short	0x4e2c
 8007de0:	5a4c      	.short	0x5a4c
 8007de2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007de6:	441d      	add	r5, r3
 8007de8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	bfc1      	itttt	gt
 8007df0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007df4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007df8:	fa09 f303 	lslgt.w	r3, r9, r3
 8007dfc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e00:	bfda      	itte	le
 8007e02:	f1c3 0320 	rsble	r3, r3, #32
 8007e06:	fa06 f003 	lslle.w	r0, r6, r3
 8007e0a:	4318      	orrgt	r0, r3
 8007e0c:	f7f8 fb9a 	bl	8000544 <__aeabi_ui2d>
 8007e10:	2301      	movs	r3, #1
 8007e12:	4606      	mov	r6, r0
 8007e14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007e18:	3d01      	subs	r5, #1
 8007e1a:	9310      	str	r3, [sp, #64]	; 0x40
 8007e1c:	e771      	b.n	8007d02 <_dtoa_r+0x11a>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e7b6      	b.n	8007d90 <_dtoa_r+0x1a8>
 8007e22:	900e      	str	r0, [sp, #56]	; 0x38
 8007e24:	e7b5      	b.n	8007d92 <_dtoa_r+0x1aa>
 8007e26:	f1ca 0300 	rsb	r3, sl, #0
 8007e2a:	9306      	str	r3, [sp, #24]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	eba8 080a 	sub.w	r8, r8, sl
 8007e32:	930d      	str	r3, [sp, #52]	; 0x34
 8007e34:	e7c2      	b.n	8007dbc <_dtoa_r+0x1d4>
 8007e36:	2300      	movs	r3, #0
 8007e38:	9308      	str	r3, [sp, #32]
 8007e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	dc39      	bgt.n	8007eb4 <_dtoa_r+0x2cc>
 8007e40:	f04f 0901 	mov.w	r9, #1
 8007e44:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e48:	464b      	mov	r3, r9
 8007e4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007e4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e50:	2200      	movs	r2, #0
 8007e52:	6042      	str	r2, [r0, #4]
 8007e54:	2204      	movs	r2, #4
 8007e56:	f102 0614 	add.w	r6, r2, #20
 8007e5a:	429e      	cmp	r6, r3
 8007e5c:	6841      	ldr	r1, [r0, #4]
 8007e5e:	d92f      	bls.n	8007ec0 <_dtoa_r+0x2d8>
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fcd3 	bl	800880c <_Balloc>
 8007e66:	9000      	str	r0, [sp, #0]
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d14b      	bne.n	8007f04 <_dtoa_r+0x31c>
 8007e6c:	4b24      	ldr	r3, [pc, #144]	; (8007f00 <_dtoa_r+0x318>)
 8007e6e:	4602      	mov	r2, r0
 8007e70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e74:	e6d1      	b.n	8007c1a <_dtoa_r+0x32>
 8007e76:	2301      	movs	r3, #1
 8007e78:	e7de      	b.n	8007e38 <_dtoa_r+0x250>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	9308      	str	r3, [sp, #32]
 8007e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e80:	eb0a 0903 	add.w	r9, sl, r3
 8007e84:	f109 0301 	add.w	r3, r9, #1
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	bfb8      	it	lt
 8007e8e:	2301      	movlt	r3, #1
 8007e90:	e7dd      	b.n	8007e4e <_dtoa_r+0x266>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e7f2      	b.n	8007e7c <_dtoa_r+0x294>
 8007e96:	2501      	movs	r5, #1
 8007e98:	2300      	movs	r3, #0
 8007e9a:	9305      	str	r3, [sp, #20]
 8007e9c:	9508      	str	r5, [sp, #32]
 8007e9e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ea8:	2312      	movs	r3, #18
 8007eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8007eac:	e7cf      	b.n	8007e4e <_dtoa_r+0x266>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	9308      	str	r3, [sp, #32]
 8007eb2:	e7f4      	b.n	8007e9e <_dtoa_r+0x2b6>
 8007eb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007eb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ebc:	464b      	mov	r3, r9
 8007ebe:	e7c6      	b.n	8007e4e <_dtoa_r+0x266>
 8007ec0:	3101      	adds	r1, #1
 8007ec2:	6041      	str	r1, [r0, #4]
 8007ec4:	0052      	lsls	r2, r2, #1
 8007ec6:	e7c6      	b.n	8007e56 <_dtoa_r+0x26e>
 8007ec8:	636f4361 	.word	0x636f4361
 8007ecc:	3fd287a7 	.word	0x3fd287a7
 8007ed0:	8b60c8b3 	.word	0x8b60c8b3
 8007ed4:	3fc68a28 	.word	0x3fc68a28
 8007ed8:	509f79fb 	.word	0x509f79fb
 8007edc:	3fd34413 	.word	0x3fd34413
 8007ee0:	08009e6d 	.word	0x08009e6d
 8007ee4:	08009e84 	.word	0x08009e84
 8007ee8:	7ff00000 	.word	0x7ff00000
 8007eec:	08009e69 	.word	0x08009e69
 8007ef0:	08009e60 	.word	0x08009e60
 8007ef4:	08009e3d 	.word	0x08009e3d
 8007ef8:	3ff80000 	.word	0x3ff80000
 8007efc:	08009f80 	.word	0x08009f80
 8007f00:	08009ee3 	.word	0x08009ee3
 8007f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f06:	9a00      	ldr	r2, [sp, #0]
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	9b01      	ldr	r3, [sp, #4]
 8007f0c:	2b0e      	cmp	r3, #14
 8007f0e:	f200 80ad 	bhi.w	800806c <_dtoa_r+0x484>
 8007f12:	2d00      	cmp	r5, #0
 8007f14:	f000 80aa 	beq.w	800806c <_dtoa_r+0x484>
 8007f18:	f1ba 0f00 	cmp.w	sl, #0
 8007f1c:	dd36      	ble.n	8007f8c <_dtoa_r+0x3a4>
 8007f1e:	4ac3      	ldr	r2, [pc, #780]	; (800822c <_dtoa_r+0x644>)
 8007f20:	f00a 030f 	and.w	r3, sl, #15
 8007f24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f28:	ed93 7b00 	vldr	d7, [r3]
 8007f2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007f30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007f34:	eeb0 8a47 	vmov.f32	s16, s14
 8007f38:	eef0 8a67 	vmov.f32	s17, s15
 8007f3c:	d016      	beq.n	8007f6c <_dtoa_r+0x384>
 8007f3e:	4bbc      	ldr	r3, [pc, #752]	; (8008230 <_dtoa_r+0x648>)
 8007f40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f48:	f7f8 fca0 	bl	800088c <__aeabi_ddiv>
 8007f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f50:	f007 070f 	and.w	r7, r7, #15
 8007f54:	2503      	movs	r5, #3
 8007f56:	4eb6      	ldr	r6, [pc, #728]	; (8008230 <_dtoa_r+0x648>)
 8007f58:	b957      	cbnz	r7, 8007f70 <_dtoa_r+0x388>
 8007f5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f5e:	ec53 2b18 	vmov	r2, r3, d8
 8007f62:	f7f8 fc93 	bl	800088c <__aeabi_ddiv>
 8007f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f6a:	e029      	b.n	8007fc0 <_dtoa_r+0x3d8>
 8007f6c:	2502      	movs	r5, #2
 8007f6e:	e7f2      	b.n	8007f56 <_dtoa_r+0x36e>
 8007f70:	07f9      	lsls	r1, r7, #31
 8007f72:	d508      	bpl.n	8007f86 <_dtoa_r+0x39e>
 8007f74:	ec51 0b18 	vmov	r0, r1, d8
 8007f78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f7c:	f7f8 fb5c 	bl	8000638 <__aeabi_dmul>
 8007f80:	ec41 0b18 	vmov	d8, r0, r1
 8007f84:	3501      	adds	r5, #1
 8007f86:	107f      	asrs	r7, r7, #1
 8007f88:	3608      	adds	r6, #8
 8007f8a:	e7e5      	b.n	8007f58 <_dtoa_r+0x370>
 8007f8c:	f000 80a6 	beq.w	80080dc <_dtoa_r+0x4f4>
 8007f90:	f1ca 0600 	rsb	r6, sl, #0
 8007f94:	4ba5      	ldr	r3, [pc, #660]	; (800822c <_dtoa_r+0x644>)
 8007f96:	4fa6      	ldr	r7, [pc, #664]	; (8008230 <_dtoa_r+0x648>)
 8007f98:	f006 020f 	and.w	r2, r6, #15
 8007f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fa8:	f7f8 fb46 	bl	8000638 <__aeabi_dmul>
 8007fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fb0:	1136      	asrs	r6, r6, #4
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2502      	movs	r5, #2
 8007fb6:	2e00      	cmp	r6, #0
 8007fb8:	f040 8085 	bne.w	80080c6 <_dtoa_r+0x4de>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1d2      	bne.n	8007f66 <_dtoa_r+0x37e>
 8007fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 808c 	beq.w	80080e0 <_dtoa_r+0x4f8>
 8007fc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fcc:	4b99      	ldr	r3, [pc, #612]	; (8008234 <_dtoa_r+0x64c>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7f8 fda2 	bl	8000b1c <__aeabi_dcmplt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f000 8081 	beq.w	80080e0 <_dtoa_r+0x4f8>
 8007fde:	9b01      	ldr	r3, [sp, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d07d      	beq.n	80080e0 <_dtoa_r+0x4f8>
 8007fe4:	f1b9 0f00 	cmp.w	r9, #0
 8007fe8:	dd3c      	ble.n	8008064 <_dtoa_r+0x47c>
 8007fea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007fee:	9307      	str	r3, [sp, #28]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4b91      	ldr	r3, [pc, #580]	; (8008238 <_dtoa_r+0x650>)
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	4639      	mov	r1, r7
 8007ff8:	f7f8 fb1e 	bl	8000638 <__aeabi_dmul>
 8007ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008000:	3501      	adds	r5, #1
 8008002:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008006:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800800a:	4628      	mov	r0, r5
 800800c:	f7f8 faaa 	bl	8000564 <__aeabi_i2d>
 8008010:	4632      	mov	r2, r6
 8008012:	463b      	mov	r3, r7
 8008014:	f7f8 fb10 	bl	8000638 <__aeabi_dmul>
 8008018:	4b88      	ldr	r3, [pc, #544]	; (800823c <_dtoa_r+0x654>)
 800801a:	2200      	movs	r2, #0
 800801c:	f7f8 f956 	bl	80002cc <__adddf3>
 8008020:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008028:	9303      	str	r3, [sp, #12]
 800802a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800802c:	2b00      	cmp	r3, #0
 800802e:	d15c      	bne.n	80080ea <_dtoa_r+0x502>
 8008030:	4b83      	ldr	r3, [pc, #524]	; (8008240 <_dtoa_r+0x658>)
 8008032:	2200      	movs	r2, #0
 8008034:	4630      	mov	r0, r6
 8008036:	4639      	mov	r1, r7
 8008038:	f7f8 f946 	bl	80002c8 <__aeabi_dsub>
 800803c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008040:	4606      	mov	r6, r0
 8008042:	460f      	mov	r7, r1
 8008044:	f7f8 fd88 	bl	8000b58 <__aeabi_dcmpgt>
 8008048:	2800      	cmp	r0, #0
 800804a:	f040 8296 	bne.w	800857a <_dtoa_r+0x992>
 800804e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008052:	4630      	mov	r0, r6
 8008054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008058:	4639      	mov	r1, r7
 800805a:	f7f8 fd5f 	bl	8000b1c <__aeabi_dcmplt>
 800805e:	2800      	cmp	r0, #0
 8008060:	f040 8288 	bne.w	8008574 <_dtoa_r+0x98c>
 8008064:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008068:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800806c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800806e:	2b00      	cmp	r3, #0
 8008070:	f2c0 8158 	blt.w	8008324 <_dtoa_r+0x73c>
 8008074:	f1ba 0f0e 	cmp.w	sl, #14
 8008078:	f300 8154 	bgt.w	8008324 <_dtoa_r+0x73c>
 800807c:	4b6b      	ldr	r3, [pc, #428]	; (800822c <_dtoa_r+0x644>)
 800807e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008082:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	f280 80e3 	bge.w	8008254 <_dtoa_r+0x66c>
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f300 80df 	bgt.w	8008254 <_dtoa_r+0x66c>
 8008096:	f040 826d 	bne.w	8008574 <_dtoa_r+0x98c>
 800809a:	4b69      	ldr	r3, [pc, #420]	; (8008240 <_dtoa_r+0x658>)
 800809c:	2200      	movs	r2, #0
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 fac9 	bl	8000638 <__aeabi_dmul>
 80080a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080aa:	f7f8 fd4b 	bl	8000b44 <__aeabi_dcmpge>
 80080ae:	9e01      	ldr	r6, [sp, #4]
 80080b0:	4637      	mov	r7, r6
 80080b2:	2800      	cmp	r0, #0
 80080b4:	f040 8243 	bne.w	800853e <_dtoa_r+0x956>
 80080b8:	9d00      	ldr	r5, [sp, #0]
 80080ba:	2331      	movs	r3, #49	; 0x31
 80080bc:	f805 3b01 	strb.w	r3, [r5], #1
 80080c0:	f10a 0a01 	add.w	sl, sl, #1
 80080c4:	e23f      	b.n	8008546 <_dtoa_r+0x95e>
 80080c6:	07f2      	lsls	r2, r6, #31
 80080c8:	d505      	bpl.n	80080d6 <_dtoa_r+0x4ee>
 80080ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ce:	f7f8 fab3 	bl	8000638 <__aeabi_dmul>
 80080d2:	3501      	adds	r5, #1
 80080d4:	2301      	movs	r3, #1
 80080d6:	1076      	asrs	r6, r6, #1
 80080d8:	3708      	adds	r7, #8
 80080da:	e76c      	b.n	8007fb6 <_dtoa_r+0x3ce>
 80080dc:	2502      	movs	r5, #2
 80080de:	e76f      	b.n	8007fc0 <_dtoa_r+0x3d8>
 80080e0:	9b01      	ldr	r3, [sp, #4]
 80080e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80080e6:	930c      	str	r3, [sp, #48]	; 0x30
 80080e8:	e78d      	b.n	8008006 <_dtoa_r+0x41e>
 80080ea:	9900      	ldr	r1, [sp, #0]
 80080ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80080ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080f0:	4b4e      	ldr	r3, [pc, #312]	; (800822c <_dtoa_r+0x644>)
 80080f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080f6:	4401      	add	r1, r0
 80080f8:	9102      	str	r1, [sp, #8]
 80080fa:	9908      	ldr	r1, [sp, #32]
 80080fc:	eeb0 8a47 	vmov.f32	s16, s14
 8008100:	eef0 8a67 	vmov.f32	s17, s15
 8008104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008108:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800810c:	2900      	cmp	r1, #0
 800810e:	d045      	beq.n	800819c <_dtoa_r+0x5b4>
 8008110:	494c      	ldr	r1, [pc, #304]	; (8008244 <_dtoa_r+0x65c>)
 8008112:	2000      	movs	r0, #0
 8008114:	f7f8 fbba 	bl	800088c <__aeabi_ddiv>
 8008118:	ec53 2b18 	vmov	r2, r3, d8
 800811c:	f7f8 f8d4 	bl	80002c8 <__aeabi_dsub>
 8008120:	9d00      	ldr	r5, [sp, #0]
 8008122:	ec41 0b18 	vmov	d8, r0, r1
 8008126:	4639      	mov	r1, r7
 8008128:	4630      	mov	r0, r6
 800812a:	f7f8 fd35 	bl	8000b98 <__aeabi_d2iz>
 800812e:	900c      	str	r0, [sp, #48]	; 0x30
 8008130:	f7f8 fa18 	bl	8000564 <__aeabi_i2d>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 f8c4 	bl	80002c8 <__aeabi_dsub>
 8008140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008142:	3330      	adds	r3, #48	; 0x30
 8008144:	f805 3b01 	strb.w	r3, [r5], #1
 8008148:	ec53 2b18 	vmov	r2, r3, d8
 800814c:	4606      	mov	r6, r0
 800814e:	460f      	mov	r7, r1
 8008150:	f7f8 fce4 	bl	8000b1c <__aeabi_dcmplt>
 8008154:	2800      	cmp	r0, #0
 8008156:	d165      	bne.n	8008224 <_dtoa_r+0x63c>
 8008158:	4632      	mov	r2, r6
 800815a:	463b      	mov	r3, r7
 800815c:	4935      	ldr	r1, [pc, #212]	; (8008234 <_dtoa_r+0x64c>)
 800815e:	2000      	movs	r0, #0
 8008160:	f7f8 f8b2 	bl	80002c8 <__aeabi_dsub>
 8008164:	ec53 2b18 	vmov	r2, r3, d8
 8008168:	f7f8 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 800816c:	2800      	cmp	r0, #0
 800816e:	f040 80b9 	bne.w	80082e4 <_dtoa_r+0x6fc>
 8008172:	9b02      	ldr	r3, [sp, #8]
 8008174:	429d      	cmp	r5, r3
 8008176:	f43f af75 	beq.w	8008064 <_dtoa_r+0x47c>
 800817a:	4b2f      	ldr	r3, [pc, #188]	; (8008238 <_dtoa_r+0x650>)
 800817c:	ec51 0b18 	vmov	r0, r1, d8
 8008180:	2200      	movs	r2, #0
 8008182:	f7f8 fa59 	bl	8000638 <__aeabi_dmul>
 8008186:	4b2c      	ldr	r3, [pc, #176]	; (8008238 <_dtoa_r+0x650>)
 8008188:	ec41 0b18 	vmov	d8, r0, r1
 800818c:	2200      	movs	r2, #0
 800818e:	4630      	mov	r0, r6
 8008190:	4639      	mov	r1, r7
 8008192:	f7f8 fa51 	bl	8000638 <__aeabi_dmul>
 8008196:	4606      	mov	r6, r0
 8008198:	460f      	mov	r7, r1
 800819a:	e7c4      	b.n	8008126 <_dtoa_r+0x53e>
 800819c:	ec51 0b17 	vmov	r0, r1, d7
 80081a0:	f7f8 fa4a 	bl	8000638 <__aeabi_dmul>
 80081a4:	9b02      	ldr	r3, [sp, #8]
 80081a6:	9d00      	ldr	r5, [sp, #0]
 80081a8:	930c      	str	r3, [sp, #48]	; 0x30
 80081aa:	ec41 0b18 	vmov	d8, r0, r1
 80081ae:	4639      	mov	r1, r7
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7f8 fcf1 	bl	8000b98 <__aeabi_d2iz>
 80081b6:	9011      	str	r0, [sp, #68]	; 0x44
 80081b8:	f7f8 f9d4 	bl	8000564 <__aeabi_i2d>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4630      	mov	r0, r6
 80081c2:	4639      	mov	r1, r7
 80081c4:	f7f8 f880 	bl	80002c8 <__aeabi_dsub>
 80081c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081ca:	3330      	adds	r3, #48	; 0x30
 80081cc:	f805 3b01 	strb.w	r3, [r5], #1
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	429d      	cmp	r5, r3
 80081d4:	4606      	mov	r6, r0
 80081d6:	460f      	mov	r7, r1
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	d134      	bne.n	8008248 <_dtoa_r+0x660>
 80081de:	4b19      	ldr	r3, [pc, #100]	; (8008244 <_dtoa_r+0x65c>)
 80081e0:	ec51 0b18 	vmov	r0, r1, d8
 80081e4:	f7f8 f872 	bl	80002cc <__adddf3>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4630      	mov	r0, r6
 80081ee:	4639      	mov	r1, r7
 80081f0:	f7f8 fcb2 	bl	8000b58 <__aeabi_dcmpgt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d175      	bne.n	80082e4 <_dtoa_r+0x6fc>
 80081f8:	ec53 2b18 	vmov	r2, r3, d8
 80081fc:	4911      	ldr	r1, [pc, #68]	; (8008244 <_dtoa_r+0x65c>)
 80081fe:	2000      	movs	r0, #0
 8008200:	f7f8 f862 	bl	80002c8 <__aeabi_dsub>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	f7f8 fc86 	bl	8000b1c <__aeabi_dcmplt>
 8008210:	2800      	cmp	r0, #0
 8008212:	f43f af27 	beq.w	8008064 <_dtoa_r+0x47c>
 8008216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008218:	1e6b      	subs	r3, r5, #1
 800821a:	930c      	str	r3, [sp, #48]	; 0x30
 800821c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008220:	2b30      	cmp	r3, #48	; 0x30
 8008222:	d0f8      	beq.n	8008216 <_dtoa_r+0x62e>
 8008224:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008228:	e04a      	b.n	80082c0 <_dtoa_r+0x6d8>
 800822a:	bf00      	nop
 800822c:	08009f80 	.word	0x08009f80
 8008230:	08009f58 	.word	0x08009f58
 8008234:	3ff00000 	.word	0x3ff00000
 8008238:	40240000 	.word	0x40240000
 800823c:	401c0000 	.word	0x401c0000
 8008240:	40140000 	.word	0x40140000
 8008244:	3fe00000 	.word	0x3fe00000
 8008248:	4baf      	ldr	r3, [pc, #700]	; (8008508 <_dtoa_r+0x920>)
 800824a:	f7f8 f9f5 	bl	8000638 <__aeabi_dmul>
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	e7ac      	b.n	80081ae <_dtoa_r+0x5c6>
 8008254:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008258:	9d00      	ldr	r5, [sp, #0]
 800825a:	4642      	mov	r2, r8
 800825c:	464b      	mov	r3, r9
 800825e:	4630      	mov	r0, r6
 8008260:	4639      	mov	r1, r7
 8008262:	f7f8 fb13 	bl	800088c <__aeabi_ddiv>
 8008266:	f7f8 fc97 	bl	8000b98 <__aeabi_d2iz>
 800826a:	9002      	str	r0, [sp, #8]
 800826c:	f7f8 f97a 	bl	8000564 <__aeabi_i2d>
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	f7f8 f9e0 	bl	8000638 <__aeabi_dmul>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4630      	mov	r0, r6
 800827e:	4639      	mov	r1, r7
 8008280:	f7f8 f822 	bl	80002c8 <__aeabi_dsub>
 8008284:	9e02      	ldr	r6, [sp, #8]
 8008286:	9f01      	ldr	r7, [sp, #4]
 8008288:	3630      	adds	r6, #48	; 0x30
 800828a:	f805 6b01 	strb.w	r6, [r5], #1
 800828e:	9e00      	ldr	r6, [sp, #0]
 8008290:	1bae      	subs	r6, r5, r6
 8008292:	42b7      	cmp	r7, r6
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	d137      	bne.n	800830a <_dtoa_r+0x722>
 800829a:	f7f8 f817 	bl	80002cc <__adddf3>
 800829e:	4642      	mov	r2, r8
 80082a0:	464b      	mov	r3, r9
 80082a2:	4606      	mov	r6, r0
 80082a4:	460f      	mov	r7, r1
 80082a6:	f7f8 fc57 	bl	8000b58 <__aeabi_dcmpgt>
 80082aa:	b9c8      	cbnz	r0, 80082e0 <_dtoa_r+0x6f8>
 80082ac:	4642      	mov	r2, r8
 80082ae:	464b      	mov	r3, r9
 80082b0:	4630      	mov	r0, r6
 80082b2:	4639      	mov	r1, r7
 80082b4:	f7f8 fc28 	bl	8000b08 <__aeabi_dcmpeq>
 80082b8:	b110      	cbz	r0, 80082c0 <_dtoa_r+0x6d8>
 80082ba:	9b02      	ldr	r3, [sp, #8]
 80082bc:	07d9      	lsls	r1, r3, #31
 80082be:	d40f      	bmi.n	80082e0 <_dtoa_r+0x6f8>
 80082c0:	4620      	mov	r0, r4
 80082c2:	4659      	mov	r1, fp
 80082c4:	f000 fae2 	bl	800888c <_Bfree>
 80082c8:	2300      	movs	r3, #0
 80082ca:	702b      	strb	r3, [r5, #0]
 80082cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082ce:	f10a 0001 	add.w	r0, sl, #1
 80082d2:	6018      	str	r0, [r3, #0]
 80082d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f43f acd8 	beq.w	8007c8c <_dtoa_r+0xa4>
 80082dc:	601d      	str	r5, [r3, #0]
 80082de:	e4d5      	b.n	8007c8c <_dtoa_r+0xa4>
 80082e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80082e4:	462b      	mov	r3, r5
 80082e6:	461d      	mov	r5, r3
 80082e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082ec:	2a39      	cmp	r2, #57	; 0x39
 80082ee:	d108      	bne.n	8008302 <_dtoa_r+0x71a>
 80082f0:	9a00      	ldr	r2, [sp, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d1f7      	bne.n	80082e6 <_dtoa_r+0x6fe>
 80082f6:	9a07      	ldr	r2, [sp, #28]
 80082f8:	9900      	ldr	r1, [sp, #0]
 80082fa:	3201      	adds	r2, #1
 80082fc:	9207      	str	r2, [sp, #28]
 80082fe:	2230      	movs	r2, #48	; 0x30
 8008300:	700a      	strb	r2, [r1, #0]
 8008302:	781a      	ldrb	r2, [r3, #0]
 8008304:	3201      	adds	r2, #1
 8008306:	701a      	strb	r2, [r3, #0]
 8008308:	e78c      	b.n	8008224 <_dtoa_r+0x63c>
 800830a:	4b7f      	ldr	r3, [pc, #508]	; (8008508 <_dtoa_r+0x920>)
 800830c:	2200      	movs	r2, #0
 800830e:	f7f8 f993 	bl	8000638 <__aeabi_dmul>
 8008312:	2200      	movs	r2, #0
 8008314:	2300      	movs	r3, #0
 8008316:	4606      	mov	r6, r0
 8008318:	460f      	mov	r7, r1
 800831a:	f7f8 fbf5 	bl	8000b08 <__aeabi_dcmpeq>
 800831e:	2800      	cmp	r0, #0
 8008320:	d09b      	beq.n	800825a <_dtoa_r+0x672>
 8008322:	e7cd      	b.n	80082c0 <_dtoa_r+0x6d8>
 8008324:	9a08      	ldr	r2, [sp, #32]
 8008326:	2a00      	cmp	r2, #0
 8008328:	f000 80c4 	beq.w	80084b4 <_dtoa_r+0x8cc>
 800832c:	9a05      	ldr	r2, [sp, #20]
 800832e:	2a01      	cmp	r2, #1
 8008330:	f300 80a8 	bgt.w	8008484 <_dtoa_r+0x89c>
 8008334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008336:	2a00      	cmp	r2, #0
 8008338:	f000 80a0 	beq.w	800847c <_dtoa_r+0x894>
 800833c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008340:	9e06      	ldr	r6, [sp, #24]
 8008342:	4645      	mov	r5, r8
 8008344:	9a04      	ldr	r2, [sp, #16]
 8008346:	2101      	movs	r1, #1
 8008348:	441a      	add	r2, r3
 800834a:	4620      	mov	r0, r4
 800834c:	4498      	add	r8, r3
 800834e:	9204      	str	r2, [sp, #16]
 8008350:	f000 fb58 	bl	8008a04 <__i2b>
 8008354:	4607      	mov	r7, r0
 8008356:	2d00      	cmp	r5, #0
 8008358:	dd0b      	ble.n	8008372 <_dtoa_r+0x78a>
 800835a:	9b04      	ldr	r3, [sp, #16]
 800835c:	2b00      	cmp	r3, #0
 800835e:	dd08      	ble.n	8008372 <_dtoa_r+0x78a>
 8008360:	42ab      	cmp	r3, r5
 8008362:	9a04      	ldr	r2, [sp, #16]
 8008364:	bfa8      	it	ge
 8008366:	462b      	movge	r3, r5
 8008368:	eba8 0803 	sub.w	r8, r8, r3
 800836c:	1aed      	subs	r5, r5, r3
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	9304      	str	r3, [sp, #16]
 8008372:	9b06      	ldr	r3, [sp, #24]
 8008374:	b1fb      	cbz	r3, 80083b6 <_dtoa_r+0x7ce>
 8008376:	9b08      	ldr	r3, [sp, #32]
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 809f 	beq.w	80084bc <_dtoa_r+0x8d4>
 800837e:	2e00      	cmp	r6, #0
 8008380:	dd11      	ble.n	80083a6 <_dtoa_r+0x7be>
 8008382:	4639      	mov	r1, r7
 8008384:	4632      	mov	r2, r6
 8008386:	4620      	mov	r0, r4
 8008388:	f000 fbf8 	bl	8008b7c <__pow5mult>
 800838c:	465a      	mov	r2, fp
 800838e:	4601      	mov	r1, r0
 8008390:	4607      	mov	r7, r0
 8008392:	4620      	mov	r0, r4
 8008394:	f000 fb4c 	bl	8008a30 <__multiply>
 8008398:	4659      	mov	r1, fp
 800839a:	9007      	str	r0, [sp, #28]
 800839c:	4620      	mov	r0, r4
 800839e:	f000 fa75 	bl	800888c <_Bfree>
 80083a2:	9b07      	ldr	r3, [sp, #28]
 80083a4:	469b      	mov	fp, r3
 80083a6:	9b06      	ldr	r3, [sp, #24]
 80083a8:	1b9a      	subs	r2, r3, r6
 80083aa:	d004      	beq.n	80083b6 <_dtoa_r+0x7ce>
 80083ac:	4659      	mov	r1, fp
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 fbe4 	bl	8008b7c <__pow5mult>
 80083b4:	4683      	mov	fp, r0
 80083b6:	2101      	movs	r1, #1
 80083b8:	4620      	mov	r0, r4
 80083ba:	f000 fb23 	bl	8008a04 <__i2b>
 80083be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	4606      	mov	r6, r0
 80083c4:	dd7c      	ble.n	80084c0 <_dtoa_r+0x8d8>
 80083c6:	461a      	mov	r2, r3
 80083c8:	4601      	mov	r1, r0
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 fbd6 	bl	8008b7c <__pow5mult>
 80083d0:	9b05      	ldr	r3, [sp, #20]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	4606      	mov	r6, r0
 80083d6:	dd76      	ble.n	80084c6 <_dtoa_r+0x8de>
 80083d8:	2300      	movs	r3, #0
 80083da:	9306      	str	r3, [sp, #24]
 80083dc:	6933      	ldr	r3, [r6, #16]
 80083de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80083e2:	6918      	ldr	r0, [r3, #16]
 80083e4:	f000 fabe 	bl	8008964 <__hi0bits>
 80083e8:	f1c0 0020 	rsb	r0, r0, #32
 80083ec:	9b04      	ldr	r3, [sp, #16]
 80083ee:	4418      	add	r0, r3
 80083f0:	f010 001f 	ands.w	r0, r0, #31
 80083f4:	f000 8086 	beq.w	8008504 <_dtoa_r+0x91c>
 80083f8:	f1c0 0320 	rsb	r3, r0, #32
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	dd7f      	ble.n	8008500 <_dtoa_r+0x918>
 8008400:	f1c0 001c 	rsb	r0, r0, #28
 8008404:	9b04      	ldr	r3, [sp, #16]
 8008406:	4403      	add	r3, r0
 8008408:	4480      	add	r8, r0
 800840a:	4405      	add	r5, r0
 800840c:	9304      	str	r3, [sp, #16]
 800840e:	f1b8 0f00 	cmp.w	r8, #0
 8008412:	dd05      	ble.n	8008420 <_dtoa_r+0x838>
 8008414:	4659      	mov	r1, fp
 8008416:	4642      	mov	r2, r8
 8008418:	4620      	mov	r0, r4
 800841a:	f000 fc09 	bl	8008c30 <__lshift>
 800841e:	4683      	mov	fp, r0
 8008420:	9b04      	ldr	r3, [sp, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	dd05      	ble.n	8008432 <_dtoa_r+0x84a>
 8008426:	4631      	mov	r1, r6
 8008428:	461a      	mov	r2, r3
 800842a:	4620      	mov	r0, r4
 800842c:	f000 fc00 	bl	8008c30 <__lshift>
 8008430:	4606      	mov	r6, r0
 8008432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008434:	2b00      	cmp	r3, #0
 8008436:	d069      	beq.n	800850c <_dtoa_r+0x924>
 8008438:	4631      	mov	r1, r6
 800843a:	4658      	mov	r0, fp
 800843c:	f000 fc64 	bl	8008d08 <__mcmp>
 8008440:	2800      	cmp	r0, #0
 8008442:	da63      	bge.n	800850c <_dtoa_r+0x924>
 8008444:	2300      	movs	r3, #0
 8008446:	4659      	mov	r1, fp
 8008448:	220a      	movs	r2, #10
 800844a:	4620      	mov	r0, r4
 800844c:	f000 fa40 	bl	80088d0 <__multadd>
 8008450:	9b08      	ldr	r3, [sp, #32]
 8008452:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008456:	4683      	mov	fp, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 818f 	beq.w	800877c <_dtoa_r+0xb94>
 800845e:	4639      	mov	r1, r7
 8008460:	2300      	movs	r3, #0
 8008462:	220a      	movs	r2, #10
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fa33 	bl	80088d0 <__multadd>
 800846a:	f1b9 0f00 	cmp.w	r9, #0
 800846e:	4607      	mov	r7, r0
 8008470:	f300 808e 	bgt.w	8008590 <_dtoa_r+0x9a8>
 8008474:	9b05      	ldr	r3, [sp, #20]
 8008476:	2b02      	cmp	r3, #2
 8008478:	dc50      	bgt.n	800851c <_dtoa_r+0x934>
 800847a:	e089      	b.n	8008590 <_dtoa_r+0x9a8>
 800847c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800847e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008482:	e75d      	b.n	8008340 <_dtoa_r+0x758>
 8008484:	9b01      	ldr	r3, [sp, #4]
 8008486:	1e5e      	subs	r6, r3, #1
 8008488:	9b06      	ldr	r3, [sp, #24]
 800848a:	42b3      	cmp	r3, r6
 800848c:	bfbf      	itttt	lt
 800848e:	9b06      	ldrlt	r3, [sp, #24]
 8008490:	9606      	strlt	r6, [sp, #24]
 8008492:	1af2      	sublt	r2, r6, r3
 8008494:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008496:	bfb6      	itet	lt
 8008498:	189b      	addlt	r3, r3, r2
 800849a:	1b9e      	subge	r6, r3, r6
 800849c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800849e:	9b01      	ldr	r3, [sp, #4]
 80084a0:	bfb8      	it	lt
 80084a2:	2600      	movlt	r6, #0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	bfb5      	itete	lt
 80084a8:	eba8 0503 	sublt.w	r5, r8, r3
 80084ac:	9b01      	ldrge	r3, [sp, #4]
 80084ae:	2300      	movlt	r3, #0
 80084b0:	4645      	movge	r5, r8
 80084b2:	e747      	b.n	8008344 <_dtoa_r+0x75c>
 80084b4:	9e06      	ldr	r6, [sp, #24]
 80084b6:	9f08      	ldr	r7, [sp, #32]
 80084b8:	4645      	mov	r5, r8
 80084ba:	e74c      	b.n	8008356 <_dtoa_r+0x76e>
 80084bc:	9a06      	ldr	r2, [sp, #24]
 80084be:	e775      	b.n	80083ac <_dtoa_r+0x7c4>
 80084c0:	9b05      	ldr	r3, [sp, #20]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	dc18      	bgt.n	80084f8 <_dtoa_r+0x910>
 80084c6:	9b02      	ldr	r3, [sp, #8]
 80084c8:	b9b3      	cbnz	r3, 80084f8 <_dtoa_r+0x910>
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084d0:	b9a3      	cbnz	r3, 80084fc <_dtoa_r+0x914>
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084d8:	0d1b      	lsrs	r3, r3, #20
 80084da:	051b      	lsls	r3, r3, #20
 80084dc:	b12b      	cbz	r3, 80084ea <_dtoa_r+0x902>
 80084de:	9b04      	ldr	r3, [sp, #16]
 80084e0:	3301      	adds	r3, #1
 80084e2:	9304      	str	r3, [sp, #16]
 80084e4:	f108 0801 	add.w	r8, r8, #1
 80084e8:	2301      	movs	r3, #1
 80084ea:	9306      	str	r3, [sp, #24]
 80084ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f47f af74 	bne.w	80083dc <_dtoa_r+0x7f4>
 80084f4:	2001      	movs	r0, #1
 80084f6:	e779      	b.n	80083ec <_dtoa_r+0x804>
 80084f8:	2300      	movs	r3, #0
 80084fa:	e7f6      	b.n	80084ea <_dtoa_r+0x902>
 80084fc:	9b02      	ldr	r3, [sp, #8]
 80084fe:	e7f4      	b.n	80084ea <_dtoa_r+0x902>
 8008500:	d085      	beq.n	800840e <_dtoa_r+0x826>
 8008502:	4618      	mov	r0, r3
 8008504:	301c      	adds	r0, #28
 8008506:	e77d      	b.n	8008404 <_dtoa_r+0x81c>
 8008508:	40240000 	.word	0x40240000
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	dc38      	bgt.n	8008584 <_dtoa_r+0x99c>
 8008512:	9b05      	ldr	r3, [sp, #20]
 8008514:	2b02      	cmp	r3, #2
 8008516:	dd35      	ble.n	8008584 <_dtoa_r+0x99c>
 8008518:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800851c:	f1b9 0f00 	cmp.w	r9, #0
 8008520:	d10d      	bne.n	800853e <_dtoa_r+0x956>
 8008522:	4631      	mov	r1, r6
 8008524:	464b      	mov	r3, r9
 8008526:	2205      	movs	r2, #5
 8008528:	4620      	mov	r0, r4
 800852a:	f000 f9d1 	bl	80088d0 <__multadd>
 800852e:	4601      	mov	r1, r0
 8008530:	4606      	mov	r6, r0
 8008532:	4658      	mov	r0, fp
 8008534:	f000 fbe8 	bl	8008d08 <__mcmp>
 8008538:	2800      	cmp	r0, #0
 800853a:	f73f adbd 	bgt.w	80080b8 <_dtoa_r+0x4d0>
 800853e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008540:	9d00      	ldr	r5, [sp, #0]
 8008542:	ea6f 0a03 	mvn.w	sl, r3
 8008546:	f04f 0800 	mov.w	r8, #0
 800854a:	4631      	mov	r1, r6
 800854c:	4620      	mov	r0, r4
 800854e:	f000 f99d 	bl	800888c <_Bfree>
 8008552:	2f00      	cmp	r7, #0
 8008554:	f43f aeb4 	beq.w	80082c0 <_dtoa_r+0x6d8>
 8008558:	f1b8 0f00 	cmp.w	r8, #0
 800855c:	d005      	beq.n	800856a <_dtoa_r+0x982>
 800855e:	45b8      	cmp	r8, r7
 8008560:	d003      	beq.n	800856a <_dtoa_r+0x982>
 8008562:	4641      	mov	r1, r8
 8008564:	4620      	mov	r0, r4
 8008566:	f000 f991 	bl	800888c <_Bfree>
 800856a:	4639      	mov	r1, r7
 800856c:	4620      	mov	r0, r4
 800856e:	f000 f98d 	bl	800888c <_Bfree>
 8008572:	e6a5      	b.n	80082c0 <_dtoa_r+0x6d8>
 8008574:	2600      	movs	r6, #0
 8008576:	4637      	mov	r7, r6
 8008578:	e7e1      	b.n	800853e <_dtoa_r+0x956>
 800857a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800857c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008580:	4637      	mov	r7, r6
 8008582:	e599      	b.n	80080b8 <_dtoa_r+0x4d0>
 8008584:	9b08      	ldr	r3, [sp, #32]
 8008586:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 80fd 	beq.w	800878a <_dtoa_r+0xba2>
 8008590:	2d00      	cmp	r5, #0
 8008592:	dd05      	ble.n	80085a0 <_dtoa_r+0x9b8>
 8008594:	4639      	mov	r1, r7
 8008596:	462a      	mov	r2, r5
 8008598:	4620      	mov	r0, r4
 800859a:	f000 fb49 	bl	8008c30 <__lshift>
 800859e:	4607      	mov	r7, r0
 80085a0:	9b06      	ldr	r3, [sp, #24]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d05c      	beq.n	8008660 <_dtoa_r+0xa78>
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 f92f 	bl	800880c <_Balloc>
 80085ae:	4605      	mov	r5, r0
 80085b0:	b928      	cbnz	r0, 80085be <_dtoa_r+0x9d6>
 80085b2:	4b80      	ldr	r3, [pc, #512]	; (80087b4 <_dtoa_r+0xbcc>)
 80085b4:	4602      	mov	r2, r0
 80085b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085ba:	f7ff bb2e 	b.w	8007c1a <_dtoa_r+0x32>
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	3202      	adds	r2, #2
 80085c2:	0092      	lsls	r2, r2, #2
 80085c4:	f107 010c 	add.w	r1, r7, #12
 80085c8:	300c      	adds	r0, #12
 80085ca:	f000 f905 	bl	80087d8 <memcpy>
 80085ce:	2201      	movs	r2, #1
 80085d0:	4629      	mov	r1, r5
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 fb2c 	bl	8008c30 <__lshift>
 80085d8:	9b00      	ldr	r3, [sp, #0]
 80085da:	3301      	adds	r3, #1
 80085dc:	9301      	str	r3, [sp, #4]
 80085de:	9b00      	ldr	r3, [sp, #0]
 80085e0:	444b      	add	r3, r9
 80085e2:	9307      	str	r3, [sp, #28]
 80085e4:	9b02      	ldr	r3, [sp, #8]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	46b8      	mov	r8, r7
 80085ec:	9306      	str	r3, [sp, #24]
 80085ee:	4607      	mov	r7, r0
 80085f0:	9b01      	ldr	r3, [sp, #4]
 80085f2:	4631      	mov	r1, r6
 80085f4:	3b01      	subs	r3, #1
 80085f6:	4658      	mov	r0, fp
 80085f8:	9302      	str	r3, [sp, #8]
 80085fa:	f7ff fa67 	bl	8007acc <quorem>
 80085fe:	4603      	mov	r3, r0
 8008600:	3330      	adds	r3, #48	; 0x30
 8008602:	9004      	str	r0, [sp, #16]
 8008604:	4641      	mov	r1, r8
 8008606:	4658      	mov	r0, fp
 8008608:	9308      	str	r3, [sp, #32]
 800860a:	f000 fb7d 	bl	8008d08 <__mcmp>
 800860e:	463a      	mov	r2, r7
 8008610:	4681      	mov	r9, r0
 8008612:	4631      	mov	r1, r6
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fb93 	bl	8008d40 <__mdiff>
 800861a:	68c2      	ldr	r2, [r0, #12]
 800861c:	9b08      	ldr	r3, [sp, #32]
 800861e:	4605      	mov	r5, r0
 8008620:	bb02      	cbnz	r2, 8008664 <_dtoa_r+0xa7c>
 8008622:	4601      	mov	r1, r0
 8008624:	4658      	mov	r0, fp
 8008626:	f000 fb6f 	bl	8008d08 <__mcmp>
 800862a:	9b08      	ldr	r3, [sp, #32]
 800862c:	4602      	mov	r2, r0
 800862e:	4629      	mov	r1, r5
 8008630:	4620      	mov	r0, r4
 8008632:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008636:	f000 f929 	bl	800888c <_Bfree>
 800863a:	9b05      	ldr	r3, [sp, #20]
 800863c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800863e:	9d01      	ldr	r5, [sp, #4]
 8008640:	ea43 0102 	orr.w	r1, r3, r2
 8008644:	9b06      	ldr	r3, [sp, #24]
 8008646:	430b      	orrs	r3, r1
 8008648:	9b08      	ldr	r3, [sp, #32]
 800864a:	d10d      	bne.n	8008668 <_dtoa_r+0xa80>
 800864c:	2b39      	cmp	r3, #57	; 0x39
 800864e:	d029      	beq.n	80086a4 <_dtoa_r+0xabc>
 8008650:	f1b9 0f00 	cmp.w	r9, #0
 8008654:	dd01      	ble.n	800865a <_dtoa_r+0xa72>
 8008656:	9b04      	ldr	r3, [sp, #16]
 8008658:	3331      	adds	r3, #49	; 0x31
 800865a:	9a02      	ldr	r2, [sp, #8]
 800865c:	7013      	strb	r3, [r2, #0]
 800865e:	e774      	b.n	800854a <_dtoa_r+0x962>
 8008660:	4638      	mov	r0, r7
 8008662:	e7b9      	b.n	80085d8 <_dtoa_r+0x9f0>
 8008664:	2201      	movs	r2, #1
 8008666:	e7e2      	b.n	800862e <_dtoa_r+0xa46>
 8008668:	f1b9 0f00 	cmp.w	r9, #0
 800866c:	db06      	blt.n	800867c <_dtoa_r+0xa94>
 800866e:	9905      	ldr	r1, [sp, #20]
 8008670:	ea41 0909 	orr.w	r9, r1, r9
 8008674:	9906      	ldr	r1, [sp, #24]
 8008676:	ea59 0101 	orrs.w	r1, r9, r1
 800867a:	d120      	bne.n	80086be <_dtoa_r+0xad6>
 800867c:	2a00      	cmp	r2, #0
 800867e:	ddec      	ble.n	800865a <_dtoa_r+0xa72>
 8008680:	4659      	mov	r1, fp
 8008682:	2201      	movs	r2, #1
 8008684:	4620      	mov	r0, r4
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	f000 fad2 	bl	8008c30 <__lshift>
 800868c:	4631      	mov	r1, r6
 800868e:	4683      	mov	fp, r0
 8008690:	f000 fb3a 	bl	8008d08 <__mcmp>
 8008694:	2800      	cmp	r0, #0
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	dc02      	bgt.n	80086a0 <_dtoa_r+0xab8>
 800869a:	d1de      	bne.n	800865a <_dtoa_r+0xa72>
 800869c:	07da      	lsls	r2, r3, #31
 800869e:	d5dc      	bpl.n	800865a <_dtoa_r+0xa72>
 80086a0:	2b39      	cmp	r3, #57	; 0x39
 80086a2:	d1d8      	bne.n	8008656 <_dtoa_r+0xa6e>
 80086a4:	9a02      	ldr	r2, [sp, #8]
 80086a6:	2339      	movs	r3, #57	; 0x39
 80086a8:	7013      	strb	r3, [r2, #0]
 80086aa:	462b      	mov	r3, r5
 80086ac:	461d      	mov	r5, r3
 80086ae:	3b01      	subs	r3, #1
 80086b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086b4:	2a39      	cmp	r2, #57	; 0x39
 80086b6:	d050      	beq.n	800875a <_dtoa_r+0xb72>
 80086b8:	3201      	adds	r2, #1
 80086ba:	701a      	strb	r2, [r3, #0]
 80086bc:	e745      	b.n	800854a <_dtoa_r+0x962>
 80086be:	2a00      	cmp	r2, #0
 80086c0:	dd03      	ble.n	80086ca <_dtoa_r+0xae2>
 80086c2:	2b39      	cmp	r3, #57	; 0x39
 80086c4:	d0ee      	beq.n	80086a4 <_dtoa_r+0xabc>
 80086c6:	3301      	adds	r3, #1
 80086c8:	e7c7      	b.n	800865a <_dtoa_r+0xa72>
 80086ca:	9a01      	ldr	r2, [sp, #4]
 80086cc:	9907      	ldr	r1, [sp, #28]
 80086ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086d2:	428a      	cmp	r2, r1
 80086d4:	d02a      	beq.n	800872c <_dtoa_r+0xb44>
 80086d6:	4659      	mov	r1, fp
 80086d8:	2300      	movs	r3, #0
 80086da:	220a      	movs	r2, #10
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 f8f7 	bl	80088d0 <__multadd>
 80086e2:	45b8      	cmp	r8, r7
 80086e4:	4683      	mov	fp, r0
 80086e6:	f04f 0300 	mov.w	r3, #0
 80086ea:	f04f 020a 	mov.w	r2, #10
 80086ee:	4641      	mov	r1, r8
 80086f0:	4620      	mov	r0, r4
 80086f2:	d107      	bne.n	8008704 <_dtoa_r+0xb1c>
 80086f4:	f000 f8ec 	bl	80088d0 <__multadd>
 80086f8:	4680      	mov	r8, r0
 80086fa:	4607      	mov	r7, r0
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	3301      	adds	r3, #1
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	e775      	b.n	80085f0 <_dtoa_r+0xa08>
 8008704:	f000 f8e4 	bl	80088d0 <__multadd>
 8008708:	4639      	mov	r1, r7
 800870a:	4680      	mov	r8, r0
 800870c:	2300      	movs	r3, #0
 800870e:	220a      	movs	r2, #10
 8008710:	4620      	mov	r0, r4
 8008712:	f000 f8dd 	bl	80088d0 <__multadd>
 8008716:	4607      	mov	r7, r0
 8008718:	e7f0      	b.n	80086fc <_dtoa_r+0xb14>
 800871a:	f1b9 0f00 	cmp.w	r9, #0
 800871e:	9a00      	ldr	r2, [sp, #0]
 8008720:	bfcc      	ite	gt
 8008722:	464d      	movgt	r5, r9
 8008724:	2501      	movle	r5, #1
 8008726:	4415      	add	r5, r2
 8008728:	f04f 0800 	mov.w	r8, #0
 800872c:	4659      	mov	r1, fp
 800872e:	2201      	movs	r2, #1
 8008730:	4620      	mov	r0, r4
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	f000 fa7c 	bl	8008c30 <__lshift>
 8008738:	4631      	mov	r1, r6
 800873a:	4683      	mov	fp, r0
 800873c:	f000 fae4 	bl	8008d08 <__mcmp>
 8008740:	2800      	cmp	r0, #0
 8008742:	dcb2      	bgt.n	80086aa <_dtoa_r+0xac2>
 8008744:	d102      	bne.n	800874c <_dtoa_r+0xb64>
 8008746:	9b01      	ldr	r3, [sp, #4]
 8008748:	07db      	lsls	r3, r3, #31
 800874a:	d4ae      	bmi.n	80086aa <_dtoa_r+0xac2>
 800874c:	462b      	mov	r3, r5
 800874e:	461d      	mov	r5, r3
 8008750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008754:	2a30      	cmp	r2, #48	; 0x30
 8008756:	d0fa      	beq.n	800874e <_dtoa_r+0xb66>
 8008758:	e6f7      	b.n	800854a <_dtoa_r+0x962>
 800875a:	9a00      	ldr	r2, [sp, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d1a5      	bne.n	80086ac <_dtoa_r+0xac4>
 8008760:	f10a 0a01 	add.w	sl, sl, #1
 8008764:	2331      	movs	r3, #49	; 0x31
 8008766:	e779      	b.n	800865c <_dtoa_r+0xa74>
 8008768:	4b13      	ldr	r3, [pc, #76]	; (80087b8 <_dtoa_r+0xbd0>)
 800876a:	f7ff baaf 	b.w	8007ccc <_dtoa_r+0xe4>
 800876e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008770:	2b00      	cmp	r3, #0
 8008772:	f47f aa86 	bne.w	8007c82 <_dtoa_r+0x9a>
 8008776:	4b11      	ldr	r3, [pc, #68]	; (80087bc <_dtoa_r+0xbd4>)
 8008778:	f7ff baa8 	b.w	8007ccc <_dtoa_r+0xe4>
 800877c:	f1b9 0f00 	cmp.w	r9, #0
 8008780:	dc03      	bgt.n	800878a <_dtoa_r+0xba2>
 8008782:	9b05      	ldr	r3, [sp, #20]
 8008784:	2b02      	cmp	r3, #2
 8008786:	f73f aec9 	bgt.w	800851c <_dtoa_r+0x934>
 800878a:	9d00      	ldr	r5, [sp, #0]
 800878c:	4631      	mov	r1, r6
 800878e:	4658      	mov	r0, fp
 8008790:	f7ff f99c 	bl	8007acc <quorem>
 8008794:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008798:	f805 3b01 	strb.w	r3, [r5], #1
 800879c:	9a00      	ldr	r2, [sp, #0]
 800879e:	1aaa      	subs	r2, r5, r2
 80087a0:	4591      	cmp	r9, r2
 80087a2:	ddba      	ble.n	800871a <_dtoa_r+0xb32>
 80087a4:	4659      	mov	r1, fp
 80087a6:	2300      	movs	r3, #0
 80087a8:	220a      	movs	r2, #10
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 f890 	bl	80088d0 <__multadd>
 80087b0:	4683      	mov	fp, r0
 80087b2:	e7eb      	b.n	800878c <_dtoa_r+0xba4>
 80087b4:	08009ee3 	.word	0x08009ee3
 80087b8:	08009e3c 	.word	0x08009e3c
 80087bc:	08009e60 	.word	0x08009e60

080087c0 <_localeconv_r>:
 80087c0:	4800      	ldr	r0, [pc, #0]	; (80087c4 <_localeconv_r+0x4>)
 80087c2:	4770      	bx	lr
 80087c4:	20000164 	.word	0x20000164

080087c8 <malloc>:
 80087c8:	4b02      	ldr	r3, [pc, #8]	; (80087d4 <malloc+0xc>)
 80087ca:	4601      	mov	r1, r0
 80087cc:	6818      	ldr	r0, [r3, #0]
 80087ce:	f7fe bc89 	b.w	80070e4 <_malloc_r>
 80087d2:	bf00      	nop
 80087d4:	20000010 	.word	0x20000010

080087d8 <memcpy>:
 80087d8:	440a      	add	r2, r1
 80087da:	4291      	cmp	r1, r2
 80087dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80087e0:	d100      	bne.n	80087e4 <memcpy+0xc>
 80087e2:	4770      	bx	lr
 80087e4:	b510      	push	{r4, lr}
 80087e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ee:	4291      	cmp	r1, r2
 80087f0:	d1f9      	bne.n	80087e6 <memcpy+0xe>
 80087f2:	bd10      	pop	{r4, pc}

080087f4 <__malloc_lock>:
 80087f4:	4801      	ldr	r0, [pc, #4]	; (80087fc <__malloc_lock+0x8>)
 80087f6:	f000 bd64 	b.w	80092c2 <__retarget_lock_acquire_recursive>
 80087fa:	bf00      	nop
 80087fc:	200007e4 	.word	0x200007e4

08008800 <__malloc_unlock>:
 8008800:	4801      	ldr	r0, [pc, #4]	; (8008808 <__malloc_unlock+0x8>)
 8008802:	f000 bd5f 	b.w	80092c4 <__retarget_lock_release_recursive>
 8008806:	bf00      	nop
 8008808:	200007e4 	.word	0x200007e4

0800880c <_Balloc>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008810:	4604      	mov	r4, r0
 8008812:	460d      	mov	r5, r1
 8008814:	b976      	cbnz	r6, 8008834 <_Balloc+0x28>
 8008816:	2010      	movs	r0, #16
 8008818:	f7ff ffd6 	bl	80087c8 <malloc>
 800881c:	4602      	mov	r2, r0
 800881e:	6260      	str	r0, [r4, #36]	; 0x24
 8008820:	b920      	cbnz	r0, 800882c <_Balloc+0x20>
 8008822:	4b18      	ldr	r3, [pc, #96]	; (8008884 <_Balloc+0x78>)
 8008824:	4818      	ldr	r0, [pc, #96]	; (8008888 <_Balloc+0x7c>)
 8008826:	2166      	movs	r1, #102	; 0x66
 8008828:	f000 fd1a 	bl	8009260 <__assert_func>
 800882c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008830:	6006      	str	r6, [r0, #0]
 8008832:	60c6      	str	r6, [r0, #12]
 8008834:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008836:	68f3      	ldr	r3, [r6, #12]
 8008838:	b183      	cbz	r3, 800885c <_Balloc+0x50>
 800883a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008842:	b9b8      	cbnz	r0, 8008874 <_Balloc+0x68>
 8008844:	2101      	movs	r1, #1
 8008846:	fa01 f605 	lsl.w	r6, r1, r5
 800884a:	1d72      	adds	r2, r6, #5
 800884c:	0092      	lsls	r2, r2, #2
 800884e:	4620      	mov	r0, r4
 8008850:	f7fe fc38 	bl	80070c4 <_calloc_r>
 8008854:	b160      	cbz	r0, 8008870 <_Balloc+0x64>
 8008856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800885a:	e00e      	b.n	800887a <_Balloc+0x6e>
 800885c:	2221      	movs	r2, #33	; 0x21
 800885e:	2104      	movs	r1, #4
 8008860:	4620      	mov	r0, r4
 8008862:	f7fe fc2f 	bl	80070c4 <_calloc_r>
 8008866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008868:	60f0      	str	r0, [r6, #12]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1e4      	bne.n	800883a <_Balloc+0x2e>
 8008870:	2000      	movs	r0, #0
 8008872:	bd70      	pop	{r4, r5, r6, pc}
 8008874:	6802      	ldr	r2, [r0, #0]
 8008876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800887a:	2300      	movs	r3, #0
 800887c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008880:	e7f7      	b.n	8008872 <_Balloc+0x66>
 8008882:	bf00      	nop
 8008884:	08009e6d 	.word	0x08009e6d
 8008888:	08009ef4 	.word	0x08009ef4

0800888c <_Bfree>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008890:	4605      	mov	r5, r0
 8008892:	460c      	mov	r4, r1
 8008894:	b976      	cbnz	r6, 80088b4 <_Bfree+0x28>
 8008896:	2010      	movs	r0, #16
 8008898:	f7ff ff96 	bl	80087c8 <malloc>
 800889c:	4602      	mov	r2, r0
 800889e:	6268      	str	r0, [r5, #36]	; 0x24
 80088a0:	b920      	cbnz	r0, 80088ac <_Bfree+0x20>
 80088a2:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <_Bfree+0x3c>)
 80088a4:	4809      	ldr	r0, [pc, #36]	; (80088cc <_Bfree+0x40>)
 80088a6:	218a      	movs	r1, #138	; 0x8a
 80088a8:	f000 fcda 	bl	8009260 <__assert_func>
 80088ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088b0:	6006      	str	r6, [r0, #0]
 80088b2:	60c6      	str	r6, [r0, #12]
 80088b4:	b13c      	cbz	r4, 80088c6 <_Bfree+0x3a>
 80088b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088b8:	6862      	ldr	r2, [r4, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088c0:	6021      	str	r1, [r4, #0]
 80088c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088c6:	bd70      	pop	{r4, r5, r6, pc}
 80088c8:	08009e6d 	.word	0x08009e6d
 80088cc:	08009ef4 	.word	0x08009ef4

080088d0 <__multadd>:
 80088d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d4:	690e      	ldr	r6, [r1, #16]
 80088d6:	4607      	mov	r7, r0
 80088d8:	4698      	mov	r8, r3
 80088da:	460c      	mov	r4, r1
 80088dc:	f101 0014 	add.w	r0, r1, #20
 80088e0:	2300      	movs	r3, #0
 80088e2:	6805      	ldr	r5, [r0, #0]
 80088e4:	b2a9      	uxth	r1, r5
 80088e6:	fb02 8101 	mla	r1, r2, r1, r8
 80088ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80088ee:	0c2d      	lsrs	r5, r5, #16
 80088f0:	fb02 c505 	mla	r5, r2, r5, ip
 80088f4:	b289      	uxth	r1, r1
 80088f6:	3301      	adds	r3, #1
 80088f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80088fc:	429e      	cmp	r6, r3
 80088fe:	f840 1b04 	str.w	r1, [r0], #4
 8008902:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008906:	dcec      	bgt.n	80088e2 <__multadd+0x12>
 8008908:	f1b8 0f00 	cmp.w	r8, #0
 800890c:	d022      	beq.n	8008954 <__multadd+0x84>
 800890e:	68a3      	ldr	r3, [r4, #8]
 8008910:	42b3      	cmp	r3, r6
 8008912:	dc19      	bgt.n	8008948 <__multadd+0x78>
 8008914:	6861      	ldr	r1, [r4, #4]
 8008916:	4638      	mov	r0, r7
 8008918:	3101      	adds	r1, #1
 800891a:	f7ff ff77 	bl	800880c <_Balloc>
 800891e:	4605      	mov	r5, r0
 8008920:	b928      	cbnz	r0, 800892e <__multadd+0x5e>
 8008922:	4602      	mov	r2, r0
 8008924:	4b0d      	ldr	r3, [pc, #52]	; (800895c <__multadd+0x8c>)
 8008926:	480e      	ldr	r0, [pc, #56]	; (8008960 <__multadd+0x90>)
 8008928:	21b5      	movs	r1, #181	; 0xb5
 800892a:	f000 fc99 	bl	8009260 <__assert_func>
 800892e:	6922      	ldr	r2, [r4, #16]
 8008930:	3202      	adds	r2, #2
 8008932:	f104 010c 	add.w	r1, r4, #12
 8008936:	0092      	lsls	r2, r2, #2
 8008938:	300c      	adds	r0, #12
 800893a:	f7ff ff4d 	bl	80087d8 <memcpy>
 800893e:	4621      	mov	r1, r4
 8008940:	4638      	mov	r0, r7
 8008942:	f7ff ffa3 	bl	800888c <_Bfree>
 8008946:	462c      	mov	r4, r5
 8008948:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800894c:	3601      	adds	r6, #1
 800894e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008952:	6126      	str	r6, [r4, #16]
 8008954:	4620      	mov	r0, r4
 8008956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800895a:	bf00      	nop
 800895c:	08009ee3 	.word	0x08009ee3
 8008960:	08009ef4 	.word	0x08009ef4

08008964 <__hi0bits>:
 8008964:	0c03      	lsrs	r3, r0, #16
 8008966:	041b      	lsls	r3, r3, #16
 8008968:	b9d3      	cbnz	r3, 80089a0 <__hi0bits+0x3c>
 800896a:	0400      	lsls	r0, r0, #16
 800896c:	2310      	movs	r3, #16
 800896e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008972:	bf04      	itt	eq
 8008974:	0200      	lsleq	r0, r0, #8
 8008976:	3308      	addeq	r3, #8
 8008978:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800897c:	bf04      	itt	eq
 800897e:	0100      	lsleq	r0, r0, #4
 8008980:	3304      	addeq	r3, #4
 8008982:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008986:	bf04      	itt	eq
 8008988:	0080      	lsleq	r0, r0, #2
 800898a:	3302      	addeq	r3, #2
 800898c:	2800      	cmp	r0, #0
 800898e:	db05      	blt.n	800899c <__hi0bits+0x38>
 8008990:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008994:	f103 0301 	add.w	r3, r3, #1
 8008998:	bf08      	it	eq
 800899a:	2320      	moveq	r3, #32
 800899c:	4618      	mov	r0, r3
 800899e:	4770      	bx	lr
 80089a0:	2300      	movs	r3, #0
 80089a2:	e7e4      	b.n	800896e <__hi0bits+0xa>

080089a4 <__lo0bits>:
 80089a4:	6803      	ldr	r3, [r0, #0]
 80089a6:	f013 0207 	ands.w	r2, r3, #7
 80089aa:	4601      	mov	r1, r0
 80089ac:	d00b      	beq.n	80089c6 <__lo0bits+0x22>
 80089ae:	07da      	lsls	r2, r3, #31
 80089b0:	d424      	bmi.n	80089fc <__lo0bits+0x58>
 80089b2:	0798      	lsls	r0, r3, #30
 80089b4:	bf49      	itett	mi
 80089b6:	085b      	lsrmi	r3, r3, #1
 80089b8:	089b      	lsrpl	r3, r3, #2
 80089ba:	2001      	movmi	r0, #1
 80089bc:	600b      	strmi	r3, [r1, #0]
 80089be:	bf5c      	itt	pl
 80089c0:	600b      	strpl	r3, [r1, #0]
 80089c2:	2002      	movpl	r0, #2
 80089c4:	4770      	bx	lr
 80089c6:	b298      	uxth	r0, r3
 80089c8:	b9b0      	cbnz	r0, 80089f8 <__lo0bits+0x54>
 80089ca:	0c1b      	lsrs	r3, r3, #16
 80089cc:	2010      	movs	r0, #16
 80089ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80089d2:	bf04      	itt	eq
 80089d4:	0a1b      	lsreq	r3, r3, #8
 80089d6:	3008      	addeq	r0, #8
 80089d8:	071a      	lsls	r2, r3, #28
 80089da:	bf04      	itt	eq
 80089dc:	091b      	lsreq	r3, r3, #4
 80089de:	3004      	addeq	r0, #4
 80089e0:	079a      	lsls	r2, r3, #30
 80089e2:	bf04      	itt	eq
 80089e4:	089b      	lsreq	r3, r3, #2
 80089e6:	3002      	addeq	r0, #2
 80089e8:	07da      	lsls	r2, r3, #31
 80089ea:	d403      	bmi.n	80089f4 <__lo0bits+0x50>
 80089ec:	085b      	lsrs	r3, r3, #1
 80089ee:	f100 0001 	add.w	r0, r0, #1
 80089f2:	d005      	beq.n	8008a00 <__lo0bits+0x5c>
 80089f4:	600b      	str	r3, [r1, #0]
 80089f6:	4770      	bx	lr
 80089f8:	4610      	mov	r0, r2
 80089fa:	e7e8      	b.n	80089ce <__lo0bits+0x2a>
 80089fc:	2000      	movs	r0, #0
 80089fe:	4770      	bx	lr
 8008a00:	2020      	movs	r0, #32
 8008a02:	4770      	bx	lr

08008a04 <__i2b>:
 8008a04:	b510      	push	{r4, lr}
 8008a06:	460c      	mov	r4, r1
 8008a08:	2101      	movs	r1, #1
 8008a0a:	f7ff feff 	bl	800880c <_Balloc>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	b928      	cbnz	r0, 8008a1e <__i2b+0x1a>
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <__i2b+0x24>)
 8008a14:	4805      	ldr	r0, [pc, #20]	; (8008a2c <__i2b+0x28>)
 8008a16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a1a:	f000 fc21 	bl	8009260 <__assert_func>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	6144      	str	r4, [r0, #20]
 8008a22:	6103      	str	r3, [r0, #16]
 8008a24:	bd10      	pop	{r4, pc}
 8008a26:	bf00      	nop
 8008a28:	08009ee3 	.word	0x08009ee3
 8008a2c:	08009ef4 	.word	0x08009ef4

08008a30 <__multiply>:
 8008a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	4614      	mov	r4, r2
 8008a36:	690a      	ldr	r2, [r1, #16]
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	bfb8      	it	lt
 8008a3e:	460b      	movlt	r3, r1
 8008a40:	460d      	mov	r5, r1
 8008a42:	bfbc      	itt	lt
 8008a44:	4625      	movlt	r5, r4
 8008a46:	461c      	movlt	r4, r3
 8008a48:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008a4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008a50:	68ab      	ldr	r3, [r5, #8]
 8008a52:	6869      	ldr	r1, [r5, #4]
 8008a54:	eb0a 0709 	add.w	r7, sl, r9
 8008a58:	42bb      	cmp	r3, r7
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	bfb8      	it	lt
 8008a5e:	3101      	addlt	r1, #1
 8008a60:	f7ff fed4 	bl	800880c <_Balloc>
 8008a64:	b930      	cbnz	r0, 8008a74 <__multiply+0x44>
 8008a66:	4602      	mov	r2, r0
 8008a68:	4b42      	ldr	r3, [pc, #264]	; (8008b74 <__multiply+0x144>)
 8008a6a:	4843      	ldr	r0, [pc, #268]	; (8008b78 <__multiply+0x148>)
 8008a6c:	f240 115d 	movw	r1, #349	; 0x15d
 8008a70:	f000 fbf6 	bl	8009260 <__assert_func>
 8008a74:	f100 0614 	add.w	r6, r0, #20
 8008a78:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008a7c:	4633      	mov	r3, r6
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4543      	cmp	r3, r8
 8008a82:	d31e      	bcc.n	8008ac2 <__multiply+0x92>
 8008a84:	f105 0c14 	add.w	ip, r5, #20
 8008a88:	f104 0314 	add.w	r3, r4, #20
 8008a8c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008a90:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008a94:	9202      	str	r2, [sp, #8]
 8008a96:	ebac 0205 	sub.w	r2, ip, r5
 8008a9a:	3a15      	subs	r2, #21
 8008a9c:	f022 0203 	bic.w	r2, r2, #3
 8008aa0:	3204      	adds	r2, #4
 8008aa2:	f105 0115 	add.w	r1, r5, #21
 8008aa6:	458c      	cmp	ip, r1
 8008aa8:	bf38      	it	cc
 8008aaa:	2204      	movcc	r2, #4
 8008aac:	9201      	str	r2, [sp, #4]
 8008aae:	9a02      	ldr	r2, [sp, #8]
 8008ab0:	9303      	str	r3, [sp, #12]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d808      	bhi.n	8008ac8 <__multiply+0x98>
 8008ab6:	2f00      	cmp	r7, #0
 8008ab8:	dc55      	bgt.n	8008b66 <__multiply+0x136>
 8008aba:	6107      	str	r7, [r0, #16]
 8008abc:	b005      	add	sp, #20
 8008abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac2:	f843 2b04 	str.w	r2, [r3], #4
 8008ac6:	e7db      	b.n	8008a80 <__multiply+0x50>
 8008ac8:	f8b3 a000 	ldrh.w	sl, [r3]
 8008acc:	f1ba 0f00 	cmp.w	sl, #0
 8008ad0:	d020      	beq.n	8008b14 <__multiply+0xe4>
 8008ad2:	f105 0e14 	add.w	lr, r5, #20
 8008ad6:	46b1      	mov	r9, r6
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008ade:	f8d9 b000 	ldr.w	fp, [r9]
 8008ae2:	b2a1      	uxth	r1, r4
 8008ae4:	fa1f fb8b 	uxth.w	fp, fp
 8008ae8:	fb0a b101 	mla	r1, sl, r1, fp
 8008aec:	4411      	add	r1, r2
 8008aee:	f8d9 2000 	ldr.w	r2, [r9]
 8008af2:	0c24      	lsrs	r4, r4, #16
 8008af4:	0c12      	lsrs	r2, r2, #16
 8008af6:	fb0a 2404 	mla	r4, sl, r4, r2
 8008afa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008afe:	b289      	uxth	r1, r1
 8008b00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b04:	45f4      	cmp	ip, lr
 8008b06:	f849 1b04 	str.w	r1, [r9], #4
 8008b0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008b0e:	d8e4      	bhi.n	8008ada <__multiply+0xaa>
 8008b10:	9901      	ldr	r1, [sp, #4]
 8008b12:	5072      	str	r2, [r6, r1]
 8008b14:	9a03      	ldr	r2, [sp, #12]
 8008b16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	f1b9 0f00 	cmp.w	r9, #0
 8008b20:	d01f      	beq.n	8008b62 <__multiply+0x132>
 8008b22:	6834      	ldr	r4, [r6, #0]
 8008b24:	f105 0114 	add.w	r1, r5, #20
 8008b28:	46b6      	mov	lr, r6
 8008b2a:	f04f 0a00 	mov.w	sl, #0
 8008b2e:	880a      	ldrh	r2, [r1, #0]
 8008b30:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008b34:	fb09 b202 	mla	r2, r9, r2, fp
 8008b38:	4492      	add	sl, r2
 8008b3a:	b2a4      	uxth	r4, r4
 8008b3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008b40:	f84e 4b04 	str.w	r4, [lr], #4
 8008b44:	f851 4b04 	ldr.w	r4, [r1], #4
 8008b48:	f8be 2000 	ldrh.w	r2, [lr]
 8008b4c:	0c24      	lsrs	r4, r4, #16
 8008b4e:	fb09 2404 	mla	r4, r9, r4, r2
 8008b52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008b56:	458c      	cmp	ip, r1
 8008b58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008b5c:	d8e7      	bhi.n	8008b2e <__multiply+0xfe>
 8008b5e:	9a01      	ldr	r2, [sp, #4]
 8008b60:	50b4      	str	r4, [r6, r2]
 8008b62:	3604      	adds	r6, #4
 8008b64:	e7a3      	b.n	8008aae <__multiply+0x7e>
 8008b66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1a5      	bne.n	8008aba <__multiply+0x8a>
 8008b6e:	3f01      	subs	r7, #1
 8008b70:	e7a1      	b.n	8008ab6 <__multiply+0x86>
 8008b72:	bf00      	nop
 8008b74:	08009ee3 	.word	0x08009ee3
 8008b78:	08009ef4 	.word	0x08009ef4

08008b7c <__pow5mult>:
 8008b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b80:	4615      	mov	r5, r2
 8008b82:	f012 0203 	ands.w	r2, r2, #3
 8008b86:	4606      	mov	r6, r0
 8008b88:	460f      	mov	r7, r1
 8008b8a:	d007      	beq.n	8008b9c <__pow5mult+0x20>
 8008b8c:	4c25      	ldr	r4, [pc, #148]	; (8008c24 <__pow5mult+0xa8>)
 8008b8e:	3a01      	subs	r2, #1
 8008b90:	2300      	movs	r3, #0
 8008b92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b96:	f7ff fe9b 	bl	80088d0 <__multadd>
 8008b9a:	4607      	mov	r7, r0
 8008b9c:	10ad      	asrs	r5, r5, #2
 8008b9e:	d03d      	beq.n	8008c1c <__pow5mult+0xa0>
 8008ba0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ba2:	b97c      	cbnz	r4, 8008bc4 <__pow5mult+0x48>
 8008ba4:	2010      	movs	r0, #16
 8008ba6:	f7ff fe0f 	bl	80087c8 <malloc>
 8008baa:	4602      	mov	r2, r0
 8008bac:	6270      	str	r0, [r6, #36]	; 0x24
 8008bae:	b928      	cbnz	r0, 8008bbc <__pow5mult+0x40>
 8008bb0:	4b1d      	ldr	r3, [pc, #116]	; (8008c28 <__pow5mult+0xac>)
 8008bb2:	481e      	ldr	r0, [pc, #120]	; (8008c2c <__pow5mult+0xb0>)
 8008bb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bb8:	f000 fb52 	bl	8009260 <__assert_func>
 8008bbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bc0:	6004      	str	r4, [r0, #0]
 8008bc2:	60c4      	str	r4, [r0, #12]
 8008bc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008bc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bcc:	b94c      	cbnz	r4, 8008be2 <__pow5mult+0x66>
 8008bce:	f240 2171 	movw	r1, #625	; 0x271
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f7ff ff16 	bl	8008a04 <__i2b>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bde:	4604      	mov	r4, r0
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	f04f 0900 	mov.w	r9, #0
 8008be6:	07eb      	lsls	r3, r5, #31
 8008be8:	d50a      	bpl.n	8008c00 <__pow5mult+0x84>
 8008bea:	4639      	mov	r1, r7
 8008bec:	4622      	mov	r2, r4
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ff1e 	bl	8008a30 <__multiply>
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4680      	mov	r8, r0
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7ff fe47 	bl	800888c <_Bfree>
 8008bfe:	4647      	mov	r7, r8
 8008c00:	106d      	asrs	r5, r5, #1
 8008c02:	d00b      	beq.n	8008c1c <__pow5mult+0xa0>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	b938      	cbnz	r0, 8008c18 <__pow5mult+0x9c>
 8008c08:	4622      	mov	r2, r4
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7ff ff0f 	bl	8008a30 <__multiply>
 8008c12:	6020      	str	r0, [r4, #0]
 8008c14:	f8c0 9000 	str.w	r9, [r0]
 8008c18:	4604      	mov	r4, r0
 8008c1a:	e7e4      	b.n	8008be6 <__pow5mult+0x6a>
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c22:	bf00      	nop
 8008c24:	0800a048 	.word	0x0800a048
 8008c28:	08009e6d 	.word	0x08009e6d
 8008c2c:	08009ef4 	.word	0x08009ef4

08008c30 <__lshift>:
 8008c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c34:	460c      	mov	r4, r1
 8008c36:	6849      	ldr	r1, [r1, #4]
 8008c38:	6923      	ldr	r3, [r4, #16]
 8008c3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c3e:	68a3      	ldr	r3, [r4, #8]
 8008c40:	4607      	mov	r7, r0
 8008c42:	4691      	mov	r9, r2
 8008c44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c48:	f108 0601 	add.w	r6, r8, #1
 8008c4c:	42b3      	cmp	r3, r6
 8008c4e:	db0b      	blt.n	8008c68 <__lshift+0x38>
 8008c50:	4638      	mov	r0, r7
 8008c52:	f7ff fddb 	bl	800880c <_Balloc>
 8008c56:	4605      	mov	r5, r0
 8008c58:	b948      	cbnz	r0, 8008c6e <__lshift+0x3e>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	4b28      	ldr	r3, [pc, #160]	; (8008d00 <__lshift+0xd0>)
 8008c5e:	4829      	ldr	r0, [pc, #164]	; (8008d04 <__lshift+0xd4>)
 8008c60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c64:	f000 fafc 	bl	8009260 <__assert_func>
 8008c68:	3101      	adds	r1, #1
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	e7ee      	b.n	8008c4c <__lshift+0x1c>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f100 0114 	add.w	r1, r0, #20
 8008c74:	f100 0210 	add.w	r2, r0, #16
 8008c78:	4618      	mov	r0, r3
 8008c7a:	4553      	cmp	r3, sl
 8008c7c:	db33      	blt.n	8008ce6 <__lshift+0xb6>
 8008c7e:	6920      	ldr	r0, [r4, #16]
 8008c80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c84:	f104 0314 	add.w	r3, r4, #20
 8008c88:	f019 091f 	ands.w	r9, r9, #31
 8008c8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c94:	d02b      	beq.n	8008cee <__lshift+0xbe>
 8008c96:	f1c9 0e20 	rsb	lr, r9, #32
 8008c9a:	468a      	mov	sl, r1
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	6818      	ldr	r0, [r3, #0]
 8008ca0:	fa00 f009 	lsl.w	r0, r0, r9
 8008ca4:	4302      	orrs	r2, r0
 8008ca6:	f84a 2b04 	str.w	r2, [sl], #4
 8008caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cae:	459c      	cmp	ip, r3
 8008cb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cb4:	d8f3      	bhi.n	8008c9e <__lshift+0x6e>
 8008cb6:	ebac 0304 	sub.w	r3, ip, r4
 8008cba:	3b15      	subs	r3, #21
 8008cbc:	f023 0303 	bic.w	r3, r3, #3
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	f104 0015 	add.w	r0, r4, #21
 8008cc6:	4584      	cmp	ip, r0
 8008cc8:	bf38      	it	cc
 8008cca:	2304      	movcc	r3, #4
 8008ccc:	50ca      	str	r2, [r1, r3]
 8008cce:	b10a      	cbz	r2, 8008cd4 <__lshift+0xa4>
 8008cd0:	f108 0602 	add.w	r6, r8, #2
 8008cd4:	3e01      	subs	r6, #1
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	612e      	str	r6, [r5, #16]
 8008cda:	4621      	mov	r1, r4
 8008cdc:	f7ff fdd6 	bl	800888c <_Bfree>
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cea:	3301      	adds	r3, #1
 8008cec:	e7c5      	b.n	8008c7a <__lshift+0x4a>
 8008cee:	3904      	subs	r1, #4
 8008cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cf8:	459c      	cmp	ip, r3
 8008cfa:	d8f9      	bhi.n	8008cf0 <__lshift+0xc0>
 8008cfc:	e7ea      	b.n	8008cd4 <__lshift+0xa4>
 8008cfe:	bf00      	nop
 8008d00:	08009ee3 	.word	0x08009ee3
 8008d04:	08009ef4 	.word	0x08009ef4

08008d08 <__mcmp>:
 8008d08:	b530      	push	{r4, r5, lr}
 8008d0a:	6902      	ldr	r2, [r0, #16]
 8008d0c:	690c      	ldr	r4, [r1, #16]
 8008d0e:	1b12      	subs	r2, r2, r4
 8008d10:	d10e      	bne.n	8008d30 <__mcmp+0x28>
 8008d12:	f100 0314 	add.w	r3, r0, #20
 8008d16:	3114      	adds	r1, #20
 8008d18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d28:	42a5      	cmp	r5, r4
 8008d2a:	d003      	beq.n	8008d34 <__mcmp+0x2c>
 8008d2c:	d305      	bcc.n	8008d3a <__mcmp+0x32>
 8008d2e:	2201      	movs	r2, #1
 8008d30:	4610      	mov	r0, r2
 8008d32:	bd30      	pop	{r4, r5, pc}
 8008d34:	4283      	cmp	r3, r0
 8008d36:	d3f3      	bcc.n	8008d20 <__mcmp+0x18>
 8008d38:	e7fa      	b.n	8008d30 <__mcmp+0x28>
 8008d3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d3e:	e7f7      	b.n	8008d30 <__mcmp+0x28>

08008d40 <__mdiff>:
 8008d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	460c      	mov	r4, r1
 8008d46:	4606      	mov	r6, r0
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	4617      	mov	r7, r2
 8008d4e:	f7ff ffdb 	bl	8008d08 <__mcmp>
 8008d52:	1e05      	subs	r5, r0, #0
 8008d54:	d110      	bne.n	8008d78 <__mdiff+0x38>
 8008d56:	4629      	mov	r1, r5
 8008d58:	4630      	mov	r0, r6
 8008d5a:	f7ff fd57 	bl	800880c <_Balloc>
 8008d5e:	b930      	cbnz	r0, 8008d6e <__mdiff+0x2e>
 8008d60:	4b39      	ldr	r3, [pc, #228]	; (8008e48 <__mdiff+0x108>)
 8008d62:	4602      	mov	r2, r0
 8008d64:	f240 2132 	movw	r1, #562	; 0x232
 8008d68:	4838      	ldr	r0, [pc, #224]	; (8008e4c <__mdiff+0x10c>)
 8008d6a:	f000 fa79 	bl	8009260 <__assert_func>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d78:	bfa4      	itt	ge
 8008d7a:	463b      	movge	r3, r7
 8008d7c:	4627      	movge	r7, r4
 8008d7e:	4630      	mov	r0, r6
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	bfa6      	itte	ge
 8008d84:	461c      	movge	r4, r3
 8008d86:	2500      	movge	r5, #0
 8008d88:	2501      	movlt	r5, #1
 8008d8a:	f7ff fd3f 	bl	800880c <_Balloc>
 8008d8e:	b920      	cbnz	r0, 8008d9a <__mdiff+0x5a>
 8008d90:	4b2d      	ldr	r3, [pc, #180]	; (8008e48 <__mdiff+0x108>)
 8008d92:	4602      	mov	r2, r0
 8008d94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d98:	e7e6      	b.n	8008d68 <__mdiff+0x28>
 8008d9a:	693e      	ldr	r6, [r7, #16]
 8008d9c:	60c5      	str	r5, [r0, #12]
 8008d9e:	6925      	ldr	r5, [r4, #16]
 8008da0:	f107 0114 	add.w	r1, r7, #20
 8008da4:	f104 0914 	add.w	r9, r4, #20
 8008da8:	f100 0e14 	add.w	lr, r0, #20
 8008dac:	f107 0210 	add.w	r2, r7, #16
 8008db0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008db4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008db8:	46f2      	mov	sl, lr
 8008dba:	2700      	movs	r7, #0
 8008dbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008dc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008dc4:	fa1f f883 	uxth.w	r8, r3
 8008dc8:	fa17 f78b 	uxtah	r7, r7, fp
 8008dcc:	0c1b      	lsrs	r3, r3, #16
 8008dce:	eba7 0808 	sub.w	r8, r7, r8
 8008dd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008dd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008dda:	fa1f f888 	uxth.w	r8, r8
 8008dde:	141f      	asrs	r7, r3, #16
 8008de0:	454d      	cmp	r5, r9
 8008de2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008de6:	f84a 3b04 	str.w	r3, [sl], #4
 8008dea:	d8e7      	bhi.n	8008dbc <__mdiff+0x7c>
 8008dec:	1b2b      	subs	r3, r5, r4
 8008dee:	3b15      	subs	r3, #21
 8008df0:	f023 0303 	bic.w	r3, r3, #3
 8008df4:	3304      	adds	r3, #4
 8008df6:	3415      	adds	r4, #21
 8008df8:	42a5      	cmp	r5, r4
 8008dfa:	bf38      	it	cc
 8008dfc:	2304      	movcc	r3, #4
 8008dfe:	4419      	add	r1, r3
 8008e00:	4473      	add	r3, lr
 8008e02:	469e      	mov	lr, r3
 8008e04:	460d      	mov	r5, r1
 8008e06:	4565      	cmp	r5, ip
 8008e08:	d30e      	bcc.n	8008e28 <__mdiff+0xe8>
 8008e0a:	f10c 0203 	add.w	r2, ip, #3
 8008e0e:	1a52      	subs	r2, r2, r1
 8008e10:	f022 0203 	bic.w	r2, r2, #3
 8008e14:	3903      	subs	r1, #3
 8008e16:	458c      	cmp	ip, r1
 8008e18:	bf38      	it	cc
 8008e1a:	2200      	movcc	r2, #0
 8008e1c:	441a      	add	r2, r3
 8008e1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e22:	b17b      	cbz	r3, 8008e44 <__mdiff+0x104>
 8008e24:	6106      	str	r6, [r0, #16]
 8008e26:	e7a5      	b.n	8008d74 <__mdiff+0x34>
 8008e28:	f855 8b04 	ldr.w	r8, [r5], #4
 8008e2c:	fa17 f488 	uxtah	r4, r7, r8
 8008e30:	1422      	asrs	r2, r4, #16
 8008e32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008e36:	b2a4      	uxth	r4, r4
 8008e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008e3c:	f84e 4b04 	str.w	r4, [lr], #4
 8008e40:	1417      	asrs	r7, r2, #16
 8008e42:	e7e0      	b.n	8008e06 <__mdiff+0xc6>
 8008e44:	3e01      	subs	r6, #1
 8008e46:	e7ea      	b.n	8008e1e <__mdiff+0xde>
 8008e48:	08009ee3 	.word	0x08009ee3
 8008e4c:	08009ef4 	.word	0x08009ef4

08008e50 <__d2b>:
 8008e50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e54:	4689      	mov	r9, r1
 8008e56:	2101      	movs	r1, #1
 8008e58:	ec57 6b10 	vmov	r6, r7, d0
 8008e5c:	4690      	mov	r8, r2
 8008e5e:	f7ff fcd5 	bl	800880c <_Balloc>
 8008e62:	4604      	mov	r4, r0
 8008e64:	b930      	cbnz	r0, 8008e74 <__d2b+0x24>
 8008e66:	4602      	mov	r2, r0
 8008e68:	4b25      	ldr	r3, [pc, #148]	; (8008f00 <__d2b+0xb0>)
 8008e6a:	4826      	ldr	r0, [pc, #152]	; (8008f04 <__d2b+0xb4>)
 8008e6c:	f240 310a 	movw	r1, #778	; 0x30a
 8008e70:	f000 f9f6 	bl	8009260 <__assert_func>
 8008e74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e7c:	bb35      	cbnz	r5, 8008ecc <__d2b+0x7c>
 8008e7e:	2e00      	cmp	r6, #0
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	d028      	beq.n	8008ed6 <__d2b+0x86>
 8008e84:	4668      	mov	r0, sp
 8008e86:	9600      	str	r6, [sp, #0]
 8008e88:	f7ff fd8c 	bl	80089a4 <__lo0bits>
 8008e8c:	9900      	ldr	r1, [sp, #0]
 8008e8e:	b300      	cbz	r0, 8008ed2 <__d2b+0x82>
 8008e90:	9a01      	ldr	r2, [sp, #4]
 8008e92:	f1c0 0320 	rsb	r3, r0, #32
 8008e96:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9a:	430b      	orrs	r3, r1
 8008e9c:	40c2      	lsrs	r2, r0
 8008e9e:	6163      	str	r3, [r4, #20]
 8008ea0:	9201      	str	r2, [sp, #4]
 8008ea2:	9b01      	ldr	r3, [sp, #4]
 8008ea4:	61a3      	str	r3, [r4, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	bf14      	ite	ne
 8008eaa:	2202      	movne	r2, #2
 8008eac:	2201      	moveq	r2, #1
 8008eae:	6122      	str	r2, [r4, #16]
 8008eb0:	b1d5      	cbz	r5, 8008ee8 <__d2b+0x98>
 8008eb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008eb6:	4405      	add	r5, r0
 8008eb8:	f8c9 5000 	str.w	r5, [r9]
 8008ebc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ec0:	f8c8 0000 	str.w	r0, [r8]
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	b003      	add	sp, #12
 8008ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ed0:	e7d5      	b.n	8008e7e <__d2b+0x2e>
 8008ed2:	6161      	str	r1, [r4, #20]
 8008ed4:	e7e5      	b.n	8008ea2 <__d2b+0x52>
 8008ed6:	a801      	add	r0, sp, #4
 8008ed8:	f7ff fd64 	bl	80089a4 <__lo0bits>
 8008edc:	9b01      	ldr	r3, [sp, #4]
 8008ede:	6163      	str	r3, [r4, #20]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	6122      	str	r2, [r4, #16]
 8008ee4:	3020      	adds	r0, #32
 8008ee6:	e7e3      	b.n	8008eb0 <__d2b+0x60>
 8008ee8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008eec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ef0:	f8c9 0000 	str.w	r0, [r9]
 8008ef4:	6918      	ldr	r0, [r3, #16]
 8008ef6:	f7ff fd35 	bl	8008964 <__hi0bits>
 8008efa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008efe:	e7df      	b.n	8008ec0 <__d2b+0x70>
 8008f00:	08009ee3 	.word	0x08009ee3
 8008f04:	08009ef4 	.word	0x08009ef4

08008f08 <_free_r>:
 8008f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f0a:	2900      	cmp	r1, #0
 8008f0c:	d048      	beq.n	8008fa0 <_free_r+0x98>
 8008f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f12:	9001      	str	r0, [sp, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f1a1 0404 	sub.w	r4, r1, #4
 8008f1a:	bfb8      	it	lt
 8008f1c:	18e4      	addlt	r4, r4, r3
 8008f1e:	f7ff fc69 	bl	80087f4 <__malloc_lock>
 8008f22:	4a20      	ldr	r2, [pc, #128]	; (8008fa4 <_free_r+0x9c>)
 8008f24:	9801      	ldr	r0, [sp, #4]
 8008f26:	6813      	ldr	r3, [r2, #0]
 8008f28:	4615      	mov	r5, r2
 8008f2a:	b933      	cbnz	r3, 8008f3a <_free_r+0x32>
 8008f2c:	6063      	str	r3, [r4, #4]
 8008f2e:	6014      	str	r4, [r2, #0]
 8008f30:	b003      	add	sp, #12
 8008f32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f36:	f7ff bc63 	b.w	8008800 <__malloc_unlock>
 8008f3a:	42a3      	cmp	r3, r4
 8008f3c:	d90b      	bls.n	8008f56 <_free_r+0x4e>
 8008f3e:	6821      	ldr	r1, [r4, #0]
 8008f40:	1862      	adds	r2, r4, r1
 8008f42:	4293      	cmp	r3, r2
 8008f44:	bf04      	itt	eq
 8008f46:	681a      	ldreq	r2, [r3, #0]
 8008f48:	685b      	ldreq	r3, [r3, #4]
 8008f4a:	6063      	str	r3, [r4, #4]
 8008f4c:	bf04      	itt	eq
 8008f4e:	1852      	addeq	r2, r2, r1
 8008f50:	6022      	streq	r2, [r4, #0]
 8008f52:	602c      	str	r4, [r5, #0]
 8008f54:	e7ec      	b.n	8008f30 <_free_r+0x28>
 8008f56:	461a      	mov	r2, r3
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	b10b      	cbz	r3, 8008f60 <_free_r+0x58>
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	d9fa      	bls.n	8008f56 <_free_r+0x4e>
 8008f60:	6811      	ldr	r1, [r2, #0]
 8008f62:	1855      	adds	r5, r2, r1
 8008f64:	42a5      	cmp	r5, r4
 8008f66:	d10b      	bne.n	8008f80 <_free_r+0x78>
 8008f68:	6824      	ldr	r4, [r4, #0]
 8008f6a:	4421      	add	r1, r4
 8008f6c:	1854      	adds	r4, r2, r1
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	6011      	str	r1, [r2, #0]
 8008f72:	d1dd      	bne.n	8008f30 <_free_r+0x28>
 8008f74:	681c      	ldr	r4, [r3, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	6053      	str	r3, [r2, #4]
 8008f7a:	4421      	add	r1, r4
 8008f7c:	6011      	str	r1, [r2, #0]
 8008f7e:	e7d7      	b.n	8008f30 <_free_r+0x28>
 8008f80:	d902      	bls.n	8008f88 <_free_r+0x80>
 8008f82:	230c      	movs	r3, #12
 8008f84:	6003      	str	r3, [r0, #0]
 8008f86:	e7d3      	b.n	8008f30 <_free_r+0x28>
 8008f88:	6825      	ldr	r5, [r4, #0]
 8008f8a:	1961      	adds	r1, r4, r5
 8008f8c:	428b      	cmp	r3, r1
 8008f8e:	bf04      	itt	eq
 8008f90:	6819      	ldreq	r1, [r3, #0]
 8008f92:	685b      	ldreq	r3, [r3, #4]
 8008f94:	6063      	str	r3, [r4, #4]
 8008f96:	bf04      	itt	eq
 8008f98:	1949      	addeq	r1, r1, r5
 8008f9a:	6021      	streq	r1, [r4, #0]
 8008f9c:	6054      	str	r4, [r2, #4]
 8008f9e:	e7c7      	b.n	8008f30 <_free_r+0x28>
 8008fa0:	b003      	add	sp, #12
 8008fa2:	bd30      	pop	{r4, r5, pc}
 8008fa4:	20000208 	.word	0x20000208

08008fa8 <__ssputs_r>:
 8008fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fac:	688e      	ldr	r6, [r1, #8]
 8008fae:	429e      	cmp	r6, r3
 8008fb0:	4682      	mov	sl, r0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	4690      	mov	r8, r2
 8008fb6:	461f      	mov	r7, r3
 8008fb8:	d838      	bhi.n	800902c <__ssputs_r+0x84>
 8008fba:	898a      	ldrh	r2, [r1, #12]
 8008fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fc0:	d032      	beq.n	8009028 <__ssputs_r+0x80>
 8008fc2:	6825      	ldr	r5, [r4, #0]
 8008fc4:	6909      	ldr	r1, [r1, #16]
 8008fc6:	eba5 0901 	sub.w	r9, r5, r1
 8008fca:	6965      	ldr	r5, [r4, #20]
 8008fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	444b      	add	r3, r9
 8008fd8:	106d      	asrs	r5, r5, #1
 8008fda:	429d      	cmp	r5, r3
 8008fdc:	bf38      	it	cc
 8008fde:	461d      	movcc	r5, r3
 8008fe0:	0553      	lsls	r3, r2, #21
 8008fe2:	d531      	bpl.n	8009048 <__ssputs_r+0xa0>
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	f7fe f87d 	bl	80070e4 <_malloc_r>
 8008fea:	4606      	mov	r6, r0
 8008fec:	b950      	cbnz	r0, 8009004 <__ssputs_r+0x5c>
 8008fee:	230c      	movs	r3, #12
 8008ff0:	f8ca 3000 	str.w	r3, [sl]
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009004:	6921      	ldr	r1, [r4, #16]
 8009006:	464a      	mov	r2, r9
 8009008:	f7ff fbe6 	bl	80087d8 <memcpy>
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009016:	81a3      	strh	r3, [r4, #12]
 8009018:	6126      	str	r6, [r4, #16]
 800901a:	6165      	str	r5, [r4, #20]
 800901c:	444e      	add	r6, r9
 800901e:	eba5 0509 	sub.w	r5, r5, r9
 8009022:	6026      	str	r6, [r4, #0]
 8009024:	60a5      	str	r5, [r4, #8]
 8009026:	463e      	mov	r6, r7
 8009028:	42be      	cmp	r6, r7
 800902a:	d900      	bls.n	800902e <__ssputs_r+0x86>
 800902c:	463e      	mov	r6, r7
 800902e:	4632      	mov	r2, r6
 8009030:	6820      	ldr	r0, [r4, #0]
 8009032:	4641      	mov	r1, r8
 8009034:	f000 f959 	bl	80092ea <memmove>
 8009038:	68a3      	ldr	r3, [r4, #8]
 800903a:	6822      	ldr	r2, [r4, #0]
 800903c:	1b9b      	subs	r3, r3, r6
 800903e:	4432      	add	r2, r6
 8009040:	60a3      	str	r3, [r4, #8]
 8009042:	6022      	str	r2, [r4, #0]
 8009044:	2000      	movs	r0, #0
 8009046:	e7db      	b.n	8009000 <__ssputs_r+0x58>
 8009048:	462a      	mov	r2, r5
 800904a:	f000 f968 	bl	800931e <_realloc_r>
 800904e:	4606      	mov	r6, r0
 8009050:	2800      	cmp	r0, #0
 8009052:	d1e1      	bne.n	8009018 <__ssputs_r+0x70>
 8009054:	6921      	ldr	r1, [r4, #16]
 8009056:	4650      	mov	r0, sl
 8009058:	f7ff ff56 	bl	8008f08 <_free_r>
 800905c:	e7c7      	b.n	8008fee <__ssputs_r+0x46>
	...

08009060 <_svfiprintf_r>:
 8009060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009064:	4698      	mov	r8, r3
 8009066:	898b      	ldrh	r3, [r1, #12]
 8009068:	061b      	lsls	r3, r3, #24
 800906a:	b09d      	sub	sp, #116	; 0x74
 800906c:	4607      	mov	r7, r0
 800906e:	460d      	mov	r5, r1
 8009070:	4614      	mov	r4, r2
 8009072:	d50e      	bpl.n	8009092 <_svfiprintf_r+0x32>
 8009074:	690b      	ldr	r3, [r1, #16]
 8009076:	b963      	cbnz	r3, 8009092 <_svfiprintf_r+0x32>
 8009078:	2140      	movs	r1, #64	; 0x40
 800907a:	f7fe f833 	bl	80070e4 <_malloc_r>
 800907e:	6028      	str	r0, [r5, #0]
 8009080:	6128      	str	r0, [r5, #16]
 8009082:	b920      	cbnz	r0, 800908e <_svfiprintf_r+0x2e>
 8009084:	230c      	movs	r3, #12
 8009086:	603b      	str	r3, [r7, #0]
 8009088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800908c:	e0d1      	b.n	8009232 <_svfiprintf_r+0x1d2>
 800908e:	2340      	movs	r3, #64	; 0x40
 8009090:	616b      	str	r3, [r5, #20]
 8009092:	2300      	movs	r3, #0
 8009094:	9309      	str	r3, [sp, #36]	; 0x24
 8009096:	2320      	movs	r3, #32
 8009098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800909c:	f8cd 800c 	str.w	r8, [sp, #12]
 80090a0:	2330      	movs	r3, #48	; 0x30
 80090a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800924c <_svfiprintf_r+0x1ec>
 80090a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090aa:	f04f 0901 	mov.w	r9, #1
 80090ae:	4623      	mov	r3, r4
 80090b0:	469a      	mov	sl, r3
 80090b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090b6:	b10a      	cbz	r2, 80090bc <_svfiprintf_r+0x5c>
 80090b8:	2a25      	cmp	r2, #37	; 0x25
 80090ba:	d1f9      	bne.n	80090b0 <_svfiprintf_r+0x50>
 80090bc:	ebba 0b04 	subs.w	fp, sl, r4
 80090c0:	d00b      	beq.n	80090da <_svfiprintf_r+0x7a>
 80090c2:	465b      	mov	r3, fp
 80090c4:	4622      	mov	r2, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	4638      	mov	r0, r7
 80090ca:	f7ff ff6d 	bl	8008fa8 <__ssputs_r>
 80090ce:	3001      	adds	r0, #1
 80090d0:	f000 80aa 	beq.w	8009228 <_svfiprintf_r+0x1c8>
 80090d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090d6:	445a      	add	r2, fp
 80090d8:	9209      	str	r2, [sp, #36]	; 0x24
 80090da:	f89a 3000 	ldrb.w	r3, [sl]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 80a2 	beq.w	8009228 <_svfiprintf_r+0x1c8>
 80090e4:	2300      	movs	r3, #0
 80090e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ee:	f10a 0a01 	add.w	sl, sl, #1
 80090f2:	9304      	str	r3, [sp, #16]
 80090f4:	9307      	str	r3, [sp, #28]
 80090f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090fa:	931a      	str	r3, [sp, #104]	; 0x68
 80090fc:	4654      	mov	r4, sl
 80090fe:	2205      	movs	r2, #5
 8009100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009104:	4851      	ldr	r0, [pc, #324]	; (800924c <_svfiprintf_r+0x1ec>)
 8009106:	f7f7 f88b 	bl	8000220 <memchr>
 800910a:	9a04      	ldr	r2, [sp, #16]
 800910c:	b9d8      	cbnz	r0, 8009146 <_svfiprintf_r+0xe6>
 800910e:	06d0      	lsls	r0, r2, #27
 8009110:	bf44      	itt	mi
 8009112:	2320      	movmi	r3, #32
 8009114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009118:	0711      	lsls	r1, r2, #28
 800911a:	bf44      	itt	mi
 800911c:	232b      	movmi	r3, #43	; 0x2b
 800911e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009122:	f89a 3000 	ldrb.w	r3, [sl]
 8009126:	2b2a      	cmp	r3, #42	; 0x2a
 8009128:	d015      	beq.n	8009156 <_svfiprintf_r+0xf6>
 800912a:	9a07      	ldr	r2, [sp, #28]
 800912c:	4654      	mov	r4, sl
 800912e:	2000      	movs	r0, #0
 8009130:	f04f 0c0a 	mov.w	ip, #10
 8009134:	4621      	mov	r1, r4
 8009136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800913a:	3b30      	subs	r3, #48	; 0x30
 800913c:	2b09      	cmp	r3, #9
 800913e:	d94e      	bls.n	80091de <_svfiprintf_r+0x17e>
 8009140:	b1b0      	cbz	r0, 8009170 <_svfiprintf_r+0x110>
 8009142:	9207      	str	r2, [sp, #28]
 8009144:	e014      	b.n	8009170 <_svfiprintf_r+0x110>
 8009146:	eba0 0308 	sub.w	r3, r0, r8
 800914a:	fa09 f303 	lsl.w	r3, r9, r3
 800914e:	4313      	orrs	r3, r2
 8009150:	9304      	str	r3, [sp, #16]
 8009152:	46a2      	mov	sl, r4
 8009154:	e7d2      	b.n	80090fc <_svfiprintf_r+0x9c>
 8009156:	9b03      	ldr	r3, [sp, #12]
 8009158:	1d19      	adds	r1, r3, #4
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	9103      	str	r1, [sp, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	bfbb      	ittet	lt
 8009162:	425b      	neglt	r3, r3
 8009164:	f042 0202 	orrlt.w	r2, r2, #2
 8009168:	9307      	strge	r3, [sp, #28]
 800916a:	9307      	strlt	r3, [sp, #28]
 800916c:	bfb8      	it	lt
 800916e:	9204      	strlt	r2, [sp, #16]
 8009170:	7823      	ldrb	r3, [r4, #0]
 8009172:	2b2e      	cmp	r3, #46	; 0x2e
 8009174:	d10c      	bne.n	8009190 <_svfiprintf_r+0x130>
 8009176:	7863      	ldrb	r3, [r4, #1]
 8009178:	2b2a      	cmp	r3, #42	; 0x2a
 800917a:	d135      	bne.n	80091e8 <_svfiprintf_r+0x188>
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	1d1a      	adds	r2, r3, #4
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	9203      	str	r2, [sp, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	bfb8      	it	lt
 8009188:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800918c:	3402      	adds	r4, #2
 800918e:	9305      	str	r3, [sp, #20]
 8009190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800925c <_svfiprintf_r+0x1fc>
 8009194:	7821      	ldrb	r1, [r4, #0]
 8009196:	2203      	movs	r2, #3
 8009198:	4650      	mov	r0, sl
 800919a:	f7f7 f841 	bl	8000220 <memchr>
 800919e:	b140      	cbz	r0, 80091b2 <_svfiprintf_r+0x152>
 80091a0:	2340      	movs	r3, #64	; 0x40
 80091a2:	eba0 000a 	sub.w	r0, r0, sl
 80091a6:	fa03 f000 	lsl.w	r0, r3, r0
 80091aa:	9b04      	ldr	r3, [sp, #16]
 80091ac:	4303      	orrs	r3, r0
 80091ae:	3401      	adds	r4, #1
 80091b0:	9304      	str	r3, [sp, #16]
 80091b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091b6:	4826      	ldr	r0, [pc, #152]	; (8009250 <_svfiprintf_r+0x1f0>)
 80091b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091bc:	2206      	movs	r2, #6
 80091be:	f7f7 f82f 	bl	8000220 <memchr>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d038      	beq.n	8009238 <_svfiprintf_r+0x1d8>
 80091c6:	4b23      	ldr	r3, [pc, #140]	; (8009254 <_svfiprintf_r+0x1f4>)
 80091c8:	bb1b      	cbnz	r3, 8009212 <_svfiprintf_r+0x1b2>
 80091ca:	9b03      	ldr	r3, [sp, #12]
 80091cc:	3307      	adds	r3, #7
 80091ce:	f023 0307 	bic.w	r3, r3, #7
 80091d2:	3308      	adds	r3, #8
 80091d4:	9303      	str	r3, [sp, #12]
 80091d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d8:	4433      	add	r3, r6
 80091da:	9309      	str	r3, [sp, #36]	; 0x24
 80091dc:	e767      	b.n	80090ae <_svfiprintf_r+0x4e>
 80091de:	fb0c 3202 	mla	r2, ip, r2, r3
 80091e2:	460c      	mov	r4, r1
 80091e4:	2001      	movs	r0, #1
 80091e6:	e7a5      	b.n	8009134 <_svfiprintf_r+0xd4>
 80091e8:	2300      	movs	r3, #0
 80091ea:	3401      	adds	r4, #1
 80091ec:	9305      	str	r3, [sp, #20]
 80091ee:	4619      	mov	r1, r3
 80091f0:	f04f 0c0a 	mov.w	ip, #10
 80091f4:	4620      	mov	r0, r4
 80091f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091fa:	3a30      	subs	r2, #48	; 0x30
 80091fc:	2a09      	cmp	r2, #9
 80091fe:	d903      	bls.n	8009208 <_svfiprintf_r+0x1a8>
 8009200:	2b00      	cmp	r3, #0
 8009202:	d0c5      	beq.n	8009190 <_svfiprintf_r+0x130>
 8009204:	9105      	str	r1, [sp, #20]
 8009206:	e7c3      	b.n	8009190 <_svfiprintf_r+0x130>
 8009208:	fb0c 2101 	mla	r1, ip, r1, r2
 800920c:	4604      	mov	r4, r0
 800920e:	2301      	movs	r3, #1
 8009210:	e7f0      	b.n	80091f4 <_svfiprintf_r+0x194>
 8009212:	ab03      	add	r3, sp, #12
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	462a      	mov	r2, r5
 8009218:	4b0f      	ldr	r3, [pc, #60]	; (8009258 <_svfiprintf_r+0x1f8>)
 800921a:	a904      	add	r1, sp, #16
 800921c:	4638      	mov	r0, r7
 800921e:	f7fe f85b 	bl	80072d8 <_printf_float>
 8009222:	1c42      	adds	r2, r0, #1
 8009224:	4606      	mov	r6, r0
 8009226:	d1d6      	bne.n	80091d6 <_svfiprintf_r+0x176>
 8009228:	89ab      	ldrh	r3, [r5, #12]
 800922a:	065b      	lsls	r3, r3, #25
 800922c:	f53f af2c 	bmi.w	8009088 <_svfiprintf_r+0x28>
 8009230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009232:	b01d      	add	sp, #116	; 0x74
 8009234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009238:	ab03      	add	r3, sp, #12
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	462a      	mov	r2, r5
 800923e:	4b06      	ldr	r3, [pc, #24]	; (8009258 <_svfiprintf_r+0x1f8>)
 8009240:	a904      	add	r1, sp, #16
 8009242:	4638      	mov	r0, r7
 8009244:	f7fe faec 	bl	8007820 <_printf_i>
 8009248:	e7eb      	b.n	8009222 <_svfiprintf_r+0x1c2>
 800924a:	bf00      	nop
 800924c:	0800a054 	.word	0x0800a054
 8009250:	0800a05e 	.word	0x0800a05e
 8009254:	080072d9 	.word	0x080072d9
 8009258:	08008fa9 	.word	0x08008fa9
 800925c:	0800a05a 	.word	0x0800a05a

08009260 <__assert_func>:
 8009260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009262:	4614      	mov	r4, r2
 8009264:	461a      	mov	r2, r3
 8009266:	4b09      	ldr	r3, [pc, #36]	; (800928c <__assert_func+0x2c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4605      	mov	r5, r0
 800926c:	68d8      	ldr	r0, [r3, #12]
 800926e:	b14c      	cbz	r4, 8009284 <__assert_func+0x24>
 8009270:	4b07      	ldr	r3, [pc, #28]	; (8009290 <__assert_func+0x30>)
 8009272:	9100      	str	r1, [sp, #0]
 8009274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009278:	4906      	ldr	r1, [pc, #24]	; (8009294 <__assert_func+0x34>)
 800927a:	462b      	mov	r3, r5
 800927c:	f000 f80e 	bl	800929c <fiprintf>
 8009280:	f000 fa9a 	bl	80097b8 <abort>
 8009284:	4b04      	ldr	r3, [pc, #16]	; (8009298 <__assert_func+0x38>)
 8009286:	461c      	mov	r4, r3
 8009288:	e7f3      	b.n	8009272 <__assert_func+0x12>
 800928a:	bf00      	nop
 800928c:	20000010 	.word	0x20000010
 8009290:	0800a065 	.word	0x0800a065
 8009294:	0800a072 	.word	0x0800a072
 8009298:	0800a0a0 	.word	0x0800a0a0

0800929c <fiprintf>:
 800929c:	b40e      	push	{r1, r2, r3}
 800929e:	b503      	push	{r0, r1, lr}
 80092a0:	4601      	mov	r1, r0
 80092a2:	ab03      	add	r3, sp, #12
 80092a4:	4805      	ldr	r0, [pc, #20]	; (80092bc <fiprintf+0x20>)
 80092a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092aa:	6800      	ldr	r0, [r0, #0]
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	f000 f885 	bl	80093bc <_vfiprintf_r>
 80092b2:	b002      	add	sp, #8
 80092b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092b8:	b003      	add	sp, #12
 80092ba:	4770      	bx	lr
 80092bc:	20000010 	.word	0x20000010

080092c0 <__retarget_lock_init_recursive>:
 80092c0:	4770      	bx	lr

080092c2 <__retarget_lock_acquire_recursive>:
 80092c2:	4770      	bx	lr

080092c4 <__retarget_lock_release_recursive>:
 80092c4:	4770      	bx	lr

080092c6 <__ascii_mbtowc>:
 80092c6:	b082      	sub	sp, #8
 80092c8:	b901      	cbnz	r1, 80092cc <__ascii_mbtowc+0x6>
 80092ca:	a901      	add	r1, sp, #4
 80092cc:	b142      	cbz	r2, 80092e0 <__ascii_mbtowc+0x1a>
 80092ce:	b14b      	cbz	r3, 80092e4 <__ascii_mbtowc+0x1e>
 80092d0:	7813      	ldrb	r3, [r2, #0]
 80092d2:	600b      	str	r3, [r1, #0]
 80092d4:	7812      	ldrb	r2, [r2, #0]
 80092d6:	1e10      	subs	r0, r2, #0
 80092d8:	bf18      	it	ne
 80092da:	2001      	movne	r0, #1
 80092dc:	b002      	add	sp, #8
 80092de:	4770      	bx	lr
 80092e0:	4610      	mov	r0, r2
 80092e2:	e7fb      	b.n	80092dc <__ascii_mbtowc+0x16>
 80092e4:	f06f 0001 	mvn.w	r0, #1
 80092e8:	e7f8      	b.n	80092dc <__ascii_mbtowc+0x16>

080092ea <memmove>:
 80092ea:	4288      	cmp	r0, r1
 80092ec:	b510      	push	{r4, lr}
 80092ee:	eb01 0402 	add.w	r4, r1, r2
 80092f2:	d902      	bls.n	80092fa <memmove+0x10>
 80092f4:	4284      	cmp	r4, r0
 80092f6:	4623      	mov	r3, r4
 80092f8:	d807      	bhi.n	800930a <memmove+0x20>
 80092fa:	1e43      	subs	r3, r0, #1
 80092fc:	42a1      	cmp	r1, r4
 80092fe:	d008      	beq.n	8009312 <memmove+0x28>
 8009300:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009304:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009308:	e7f8      	b.n	80092fc <memmove+0x12>
 800930a:	4402      	add	r2, r0
 800930c:	4601      	mov	r1, r0
 800930e:	428a      	cmp	r2, r1
 8009310:	d100      	bne.n	8009314 <memmove+0x2a>
 8009312:	bd10      	pop	{r4, pc}
 8009314:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009318:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800931c:	e7f7      	b.n	800930e <memmove+0x24>

0800931e <_realloc_r>:
 800931e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009320:	4607      	mov	r7, r0
 8009322:	4614      	mov	r4, r2
 8009324:	460e      	mov	r6, r1
 8009326:	b921      	cbnz	r1, 8009332 <_realloc_r+0x14>
 8009328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800932c:	4611      	mov	r1, r2
 800932e:	f7fd bed9 	b.w	80070e4 <_malloc_r>
 8009332:	b922      	cbnz	r2, 800933e <_realloc_r+0x20>
 8009334:	f7ff fde8 	bl	8008f08 <_free_r>
 8009338:	4625      	mov	r5, r4
 800933a:	4628      	mov	r0, r5
 800933c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800933e:	f000 fc5f 	bl	8009c00 <_malloc_usable_size_r>
 8009342:	42a0      	cmp	r0, r4
 8009344:	d20f      	bcs.n	8009366 <_realloc_r+0x48>
 8009346:	4621      	mov	r1, r4
 8009348:	4638      	mov	r0, r7
 800934a:	f7fd fecb 	bl	80070e4 <_malloc_r>
 800934e:	4605      	mov	r5, r0
 8009350:	2800      	cmp	r0, #0
 8009352:	d0f2      	beq.n	800933a <_realloc_r+0x1c>
 8009354:	4631      	mov	r1, r6
 8009356:	4622      	mov	r2, r4
 8009358:	f7ff fa3e 	bl	80087d8 <memcpy>
 800935c:	4631      	mov	r1, r6
 800935e:	4638      	mov	r0, r7
 8009360:	f7ff fdd2 	bl	8008f08 <_free_r>
 8009364:	e7e9      	b.n	800933a <_realloc_r+0x1c>
 8009366:	4635      	mov	r5, r6
 8009368:	e7e7      	b.n	800933a <_realloc_r+0x1c>

0800936a <__sfputc_r>:
 800936a:	6893      	ldr	r3, [r2, #8]
 800936c:	3b01      	subs	r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	b410      	push	{r4}
 8009372:	6093      	str	r3, [r2, #8]
 8009374:	da08      	bge.n	8009388 <__sfputc_r+0x1e>
 8009376:	6994      	ldr	r4, [r2, #24]
 8009378:	42a3      	cmp	r3, r4
 800937a:	db01      	blt.n	8009380 <__sfputc_r+0x16>
 800937c:	290a      	cmp	r1, #10
 800937e:	d103      	bne.n	8009388 <__sfputc_r+0x1e>
 8009380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009384:	f000 b94a 	b.w	800961c <__swbuf_r>
 8009388:	6813      	ldr	r3, [r2, #0]
 800938a:	1c58      	adds	r0, r3, #1
 800938c:	6010      	str	r0, [r2, #0]
 800938e:	7019      	strb	r1, [r3, #0]
 8009390:	4608      	mov	r0, r1
 8009392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009396:	4770      	bx	lr

08009398 <__sfputs_r>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	4606      	mov	r6, r0
 800939c:	460f      	mov	r7, r1
 800939e:	4614      	mov	r4, r2
 80093a0:	18d5      	adds	r5, r2, r3
 80093a2:	42ac      	cmp	r4, r5
 80093a4:	d101      	bne.n	80093aa <__sfputs_r+0x12>
 80093a6:	2000      	movs	r0, #0
 80093a8:	e007      	b.n	80093ba <__sfputs_r+0x22>
 80093aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ae:	463a      	mov	r2, r7
 80093b0:	4630      	mov	r0, r6
 80093b2:	f7ff ffda 	bl	800936a <__sfputc_r>
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	d1f3      	bne.n	80093a2 <__sfputs_r+0xa>
 80093ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093bc <_vfiprintf_r>:
 80093bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c0:	460d      	mov	r5, r1
 80093c2:	b09d      	sub	sp, #116	; 0x74
 80093c4:	4614      	mov	r4, r2
 80093c6:	4698      	mov	r8, r3
 80093c8:	4606      	mov	r6, r0
 80093ca:	b118      	cbz	r0, 80093d4 <_vfiprintf_r+0x18>
 80093cc:	6983      	ldr	r3, [r0, #24]
 80093ce:	b90b      	cbnz	r3, 80093d4 <_vfiprintf_r+0x18>
 80093d0:	f000 fb14 	bl	80099fc <__sinit>
 80093d4:	4b89      	ldr	r3, [pc, #548]	; (80095fc <_vfiprintf_r+0x240>)
 80093d6:	429d      	cmp	r5, r3
 80093d8:	d11b      	bne.n	8009412 <_vfiprintf_r+0x56>
 80093da:	6875      	ldr	r5, [r6, #4]
 80093dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093de:	07d9      	lsls	r1, r3, #31
 80093e0:	d405      	bmi.n	80093ee <_vfiprintf_r+0x32>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	059a      	lsls	r2, r3, #22
 80093e6:	d402      	bmi.n	80093ee <_vfiprintf_r+0x32>
 80093e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ea:	f7ff ff6a 	bl	80092c2 <__retarget_lock_acquire_recursive>
 80093ee:	89ab      	ldrh	r3, [r5, #12]
 80093f0:	071b      	lsls	r3, r3, #28
 80093f2:	d501      	bpl.n	80093f8 <_vfiprintf_r+0x3c>
 80093f4:	692b      	ldr	r3, [r5, #16]
 80093f6:	b9eb      	cbnz	r3, 8009434 <_vfiprintf_r+0x78>
 80093f8:	4629      	mov	r1, r5
 80093fa:	4630      	mov	r0, r6
 80093fc:	f000 f96e 	bl	80096dc <__swsetup_r>
 8009400:	b1c0      	cbz	r0, 8009434 <_vfiprintf_r+0x78>
 8009402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009404:	07dc      	lsls	r4, r3, #31
 8009406:	d50e      	bpl.n	8009426 <_vfiprintf_r+0x6a>
 8009408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800940c:	b01d      	add	sp, #116	; 0x74
 800940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009412:	4b7b      	ldr	r3, [pc, #492]	; (8009600 <_vfiprintf_r+0x244>)
 8009414:	429d      	cmp	r5, r3
 8009416:	d101      	bne.n	800941c <_vfiprintf_r+0x60>
 8009418:	68b5      	ldr	r5, [r6, #8]
 800941a:	e7df      	b.n	80093dc <_vfiprintf_r+0x20>
 800941c:	4b79      	ldr	r3, [pc, #484]	; (8009604 <_vfiprintf_r+0x248>)
 800941e:	429d      	cmp	r5, r3
 8009420:	bf08      	it	eq
 8009422:	68f5      	ldreq	r5, [r6, #12]
 8009424:	e7da      	b.n	80093dc <_vfiprintf_r+0x20>
 8009426:	89ab      	ldrh	r3, [r5, #12]
 8009428:	0598      	lsls	r0, r3, #22
 800942a:	d4ed      	bmi.n	8009408 <_vfiprintf_r+0x4c>
 800942c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800942e:	f7ff ff49 	bl	80092c4 <__retarget_lock_release_recursive>
 8009432:	e7e9      	b.n	8009408 <_vfiprintf_r+0x4c>
 8009434:	2300      	movs	r3, #0
 8009436:	9309      	str	r3, [sp, #36]	; 0x24
 8009438:	2320      	movs	r3, #32
 800943a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800943e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009442:	2330      	movs	r3, #48	; 0x30
 8009444:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009608 <_vfiprintf_r+0x24c>
 8009448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800944c:	f04f 0901 	mov.w	r9, #1
 8009450:	4623      	mov	r3, r4
 8009452:	469a      	mov	sl, r3
 8009454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009458:	b10a      	cbz	r2, 800945e <_vfiprintf_r+0xa2>
 800945a:	2a25      	cmp	r2, #37	; 0x25
 800945c:	d1f9      	bne.n	8009452 <_vfiprintf_r+0x96>
 800945e:	ebba 0b04 	subs.w	fp, sl, r4
 8009462:	d00b      	beq.n	800947c <_vfiprintf_r+0xc0>
 8009464:	465b      	mov	r3, fp
 8009466:	4622      	mov	r2, r4
 8009468:	4629      	mov	r1, r5
 800946a:	4630      	mov	r0, r6
 800946c:	f7ff ff94 	bl	8009398 <__sfputs_r>
 8009470:	3001      	adds	r0, #1
 8009472:	f000 80aa 	beq.w	80095ca <_vfiprintf_r+0x20e>
 8009476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009478:	445a      	add	r2, fp
 800947a:	9209      	str	r2, [sp, #36]	; 0x24
 800947c:	f89a 3000 	ldrb.w	r3, [sl]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 80a2 	beq.w	80095ca <_vfiprintf_r+0x20e>
 8009486:	2300      	movs	r3, #0
 8009488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800948c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009490:	f10a 0a01 	add.w	sl, sl, #1
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	9307      	str	r3, [sp, #28]
 8009498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800949c:	931a      	str	r3, [sp, #104]	; 0x68
 800949e:	4654      	mov	r4, sl
 80094a0:	2205      	movs	r2, #5
 80094a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a6:	4858      	ldr	r0, [pc, #352]	; (8009608 <_vfiprintf_r+0x24c>)
 80094a8:	f7f6 feba 	bl	8000220 <memchr>
 80094ac:	9a04      	ldr	r2, [sp, #16]
 80094ae:	b9d8      	cbnz	r0, 80094e8 <_vfiprintf_r+0x12c>
 80094b0:	06d1      	lsls	r1, r2, #27
 80094b2:	bf44      	itt	mi
 80094b4:	2320      	movmi	r3, #32
 80094b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ba:	0713      	lsls	r3, r2, #28
 80094bc:	bf44      	itt	mi
 80094be:	232b      	movmi	r3, #43	; 0x2b
 80094c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094c4:	f89a 3000 	ldrb.w	r3, [sl]
 80094c8:	2b2a      	cmp	r3, #42	; 0x2a
 80094ca:	d015      	beq.n	80094f8 <_vfiprintf_r+0x13c>
 80094cc:	9a07      	ldr	r2, [sp, #28]
 80094ce:	4654      	mov	r4, sl
 80094d0:	2000      	movs	r0, #0
 80094d2:	f04f 0c0a 	mov.w	ip, #10
 80094d6:	4621      	mov	r1, r4
 80094d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094dc:	3b30      	subs	r3, #48	; 0x30
 80094de:	2b09      	cmp	r3, #9
 80094e0:	d94e      	bls.n	8009580 <_vfiprintf_r+0x1c4>
 80094e2:	b1b0      	cbz	r0, 8009512 <_vfiprintf_r+0x156>
 80094e4:	9207      	str	r2, [sp, #28]
 80094e6:	e014      	b.n	8009512 <_vfiprintf_r+0x156>
 80094e8:	eba0 0308 	sub.w	r3, r0, r8
 80094ec:	fa09 f303 	lsl.w	r3, r9, r3
 80094f0:	4313      	orrs	r3, r2
 80094f2:	9304      	str	r3, [sp, #16]
 80094f4:	46a2      	mov	sl, r4
 80094f6:	e7d2      	b.n	800949e <_vfiprintf_r+0xe2>
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	1d19      	adds	r1, r3, #4
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	9103      	str	r1, [sp, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	bfbb      	ittet	lt
 8009504:	425b      	neglt	r3, r3
 8009506:	f042 0202 	orrlt.w	r2, r2, #2
 800950a:	9307      	strge	r3, [sp, #28]
 800950c:	9307      	strlt	r3, [sp, #28]
 800950e:	bfb8      	it	lt
 8009510:	9204      	strlt	r2, [sp, #16]
 8009512:	7823      	ldrb	r3, [r4, #0]
 8009514:	2b2e      	cmp	r3, #46	; 0x2e
 8009516:	d10c      	bne.n	8009532 <_vfiprintf_r+0x176>
 8009518:	7863      	ldrb	r3, [r4, #1]
 800951a:	2b2a      	cmp	r3, #42	; 0x2a
 800951c:	d135      	bne.n	800958a <_vfiprintf_r+0x1ce>
 800951e:	9b03      	ldr	r3, [sp, #12]
 8009520:	1d1a      	adds	r2, r3, #4
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	9203      	str	r2, [sp, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	bfb8      	it	lt
 800952a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800952e:	3402      	adds	r4, #2
 8009530:	9305      	str	r3, [sp, #20]
 8009532:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009618 <_vfiprintf_r+0x25c>
 8009536:	7821      	ldrb	r1, [r4, #0]
 8009538:	2203      	movs	r2, #3
 800953a:	4650      	mov	r0, sl
 800953c:	f7f6 fe70 	bl	8000220 <memchr>
 8009540:	b140      	cbz	r0, 8009554 <_vfiprintf_r+0x198>
 8009542:	2340      	movs	r3, #64	; 0x40
 8009544:	eba0 000a 	sub.w	r0, r0, sl
 8009548:	fa03 f000 	lsl.w	r0, r3, r0
 800954c:	9b04      	ldr	r3, [sp, #16]
 800954e:	4303      	orrs	r3, r0
 8009550:	3401      	adds	r4, #1
 8009552:	9304      	str	r3, [sp, #16]
 8009554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009558:	482c      	ldr	r0, [pc, #176]	; (800960c <_vfiprintf_r+0x250>)
 800955a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800955e:	2206      	movs	r2, #6
 8009560:	f7f6 fe5e 	bl	8000220 <memchr>
 8009564:	2800      	cmp	r0, #0
 8009566:	d03f      	beq.n	80095e8 <_vfiprintf_r+0x22c>
 8009568:	4b29      	ldr	r3, [pc, #164]	; (8009610 <_vfiprintf_r+0x254>)
 800956a:	bb1b      	cbnz	r3, 80095b4 <_vfiprintf_r+0x1f8>
 800956c:	9b03      	ldr	r3, [sp, #12]
 800956e:	3307      	adds	r3, #7
 8009570:	f023 0307 	bic.w	r3, r3, #7
 8009574:	3308      	adds	r3, #8
 8009576:	9303      	str	r3, [sp, #12]
 8009578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800957a:	443b      	add	r3, r7
 800957c:	9309      	str	r3, [sp, #36]	; 0x24
 800957e:	e767      	b.n	8009450 <_vfiprintf_r+0x94>
 8009580:	fb0c 3202 	mla	r2, ip, r2, r3
 8009584:	460c      	mov	r4, r1
 8009586:	2001      	movs	r0, #1
 8009588:	e7a5      	b.n	80094d6 <_vfiprintf_r+0x11a>
 800958a:	2300      	movs	r3, #0
 800958c:	3401      	adds	r4, #1
 800958e:	9305      	str	r3, [sp, #20]
 8009590:	4619      	mov	r1, r3
 8009592:	f04f 0c0a 	mov.w	ip, #10
 8009596:	4620      	mov	r0, r4
 8009598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800959c:	3a30      	subs	r2, #48	; 0x30
 800959e:	2a09      	cmp	r2, #9
 80095a0:	d903      	bls.n	80095aa <_vfiprintf_r+0x1ee>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0c5      	beq.n	8009532 <_vfiprintf_r+0x176>
 80095a6:	9105      	str	r1, [sp, #20]
 80095a8:	e7c3      	b.n	8009532 <_vfiprintf_r+0x176>
 80095aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ae:	4604      	mov	r4, r0
 80095b0:	2301      	movs	r3, #1
 80095b2:	e7f0      	b.n	8009596 <_vfiprintf_r+0x1da>
 80095b4:	ab03      	add	r3, sp, #12
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	462a      	mov	r2, r5
 80095ba:	4b16      	ldr	r3, [pc, #88]	; (8009614 <_vfiprintf_r+0x258>)
 80095bc:	a904      	add	r1, sp, #16
 80095be:	4630      	mov	r0, r6
 80095c0:	f7fd fe8a 	bl	80072d8 <_printf_float>
 80095c4:	4607      	mov	r7, r0
 80095c6:	1c78      	adds	r0, r7, #1
 80095c8:	d1d6      	bne.n	8009578 <_vfiprintf_r+0x1bc>
 80095ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095cc:	07d9      	lsls	r1, r3, #31
 80095ce:	d405      	bmi.n	80095dc <_vfiprintf_r+0x220>
 80095d0:	89ab      	ldrh	r3, [r5, #12]
 80095d2:	059a      	lsls	r2, r3, #22
 80095d4:	d402      	bmi.n	80095dc <_vfiprintf_r+0x220>
 80095d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095d8:	f7ff fe74 	bl	80092c4 <__retarget_lock_release_recursive>
 80095dc:	89ab      	ldrh	r3, [r5, #12]
 80095de:	065b      	lsls	r3, r3, #25
 80095e0:	f53f af12 	bmi.w	8009408 <_vfiprintf_r+0x4c>
 80095e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095e6:	e711      	b.n	800940c <_vfiprintf_r+0x50>
 80095e8:	ab03      	add	r3, sp, #12
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	462a      	mov	r2, r5
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <_vfiprintf_r+0x258>)
 80095f0:	a904      	add	r1, sp, #16
 80095f2:	4630      	mov	r0, r6
 80095f4:	f7fe f914 	bl	8007820 <_printf_i>
 80095f8:	e7e4      	b.n	80095c4 <_vfiprintf_r+0x208>
 80095fa:	bf00      	nop
 80095fc:	0800a1cc 	.word	0x0800a1cc
 8009600:	0800a1ec 	.word	0x0800a1ec
 8009604:	0800a1ac 	.word	0x0800a1ac
 8009608:	0800a054 	.word	0x0800a054
 800960c:	0800a05e 	.word	0x0800a05e
 8009610:	080072d9 	.word	0x080072d9
 8009614:	08009399 	.word	0x08009399
 8009618:	0800a05a 	.word	0x0800a05a

0800961c <__swbuf_r>:
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	460e      	mov	r6, r1
 8009620:	4614      	mov	r4, r2
 8009622:	4605      	mov	r5, r0
 8009624:	b118      	cbz	r0, 800962e <__swbuf_r+0x12>
 8009626:	6983      	ldr	r3, [r0, #24]
 8009628:	b90b      	cbnz	r3, 800962e <__swbuf_r+0x12>
 800962a:	f000 f9e7 	bl	80099fc <__sinit>
 800962e:	4b21      	ldr	r3, [pc, #132]	; (80096b4 <__swbuf_r+0x98>)
 8009630:	429c      	cmp	r4, r3
 8009632:	d12b      	bne.n	800968c <__swbuf_r+0x70>
 8009634:	686c      	ldr	r4, [r5, #4]
 8009636:	69a3      	ldr	r3, [r4, #24]
 8009638:	60a3      	str	r3, [r4, #8]
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	071a      	lsls	r2, r3, #28
 800963e:	d52f      	bpl.n	80096a0 <__swbuf_r+0x84>
 8009640:	6923      	ldr	r3, [r4, #16]
 8009642:	b36b      	cbz	r3, 80096a0 <__swbuf_r+0x84>
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	6820      	ldr	r0, [r4, #0]
 8009648:	1ac0      	subs	r0, r0, r3
 800964a:	6963      	ldr	r3, [r4, #20]
 800964c:	b2f6      	uxtb	r6, r6
 800964e:	4283      	cmp	r3, r0
 8009650:	4637      	mov	r7, r6
 8009652:	dc04      	bgt.n	800965e <__swbuf_r+0x42>
 8009654:	4621      	mov	r1, r4
 8009656:	4628      	mov	r0, r5
 8009658:	f000 f93c 	bl	80098d4 <_fflush_r>
 800965c:	bb30      	cbnz	r0, 80096ac <__swbuf_r+0x90>
 800965e:	68a3      	ldr	r3, [r4, #8]
 8009660:	3b01      	subs	r3, #1
 8009662:	60a3      	str	r3, [r4, #8]
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	6022      	str	r2, [r4, #0]
 800966a:	701e      	strb	r6, [r3, #0]
 800966c:	6963      	ldr	r3, [r4, #20]
 800966e:	3001      	adds	r0, #1
 8009670:	4283      	cmp	r3, r0
 8009672:	d004      	beq.n	800967e <__swbuf_r+0x62>
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	07db      	lsls	r3, r3, #31
 8009678:	d506      	bpl.n	8009688 <__swbuf_r+0x6c>
 800967a:	2e0a      	cmp	r6, #10
 800967c:	d104      	bne.n	8009688 <__swbuf_r+0x6c>
 800967e:	4621      	mov	r1, r4
 8009680:	4628      	mov	r0, r5
 8009682:	f000 f927 	bl	80098d4 <_fflush_r>
 8009686:	b988      	cbnz	r0, 80096ac <__swbuf_r+0x90>
 8009688:	4638      	mov	r0, r7
 800968a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800968c:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <__swbuf_r+0x9c>)
 800968e:	429c      	cmp	r4, r3
 8009690:	d101      	bne.n	8009696 <__swbuf_r+0x7a>
 8009692:	68ac      	ldr	r4, [r5, #8]
 8009694:	e7cf      	b.n	8009636 <__swbuf_r+0x1a>
 8009696:	4b09      	ldr	r3, [pc, #36]	; (80096bc <__swbuf_r+0xa0>)
 8009698:	429c      	cmp	r4, r3
 800969a:	bf08      	it	eq
 800969c:	68ec      	ldreq	r4, [r5, #12]
 800969e:	e7ca      	b.n	8009636 <__swbuf_r+0x1a>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f81a 	bl	80096dc <__swsetup_r>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d0cb      	beq.n	8009644 <__swbuf_r+0x28>
 80096ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80096b0:	e7ea      	b.n	8009688 <__swbuf_r+0x6c>
 80096b2:	bf00      	nop
 80096b4:	0800a1cc 	.word	0x0800a1cc
 80096b8:	0800a1ec 	.word	0x0800a1ec
 80096bc:	0800a1ac 	.word	0x0800a1ac

080096c0 <__ascii_wctomb>:
 80096c0:	b149      	cbz	r1, 80096d6 <__ascii_wctomb+0x16>
 80096c2:	2aff      	cmp	r2, #255	; 0xff
 80096c4:	bf85      	ittet	hi
 80096c6:	238a      	movhi	r3, #138	; 0x8a
 80096c8:	6003      	strhi	r3, [r0, #0]
 80096ca:	700a      	strbls	r2, [r1, #0]
 80096cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80096d0:	bf98      	it	ls
 80096d2:	2001      	movls	r0, #1
 80096d4:	4770      	bx	lr
 80096d6:	4608      	mov	r0, r1
 80096d8:	4770      	bx	lr
	...

080096dc <__swsetup_r>:
 80096dc:	4b32      	ldr	r3, [pc, #200]	; (80097a8 <__swsetup_r+0xcc>)
 80096de:	b570      	push	{r4, r5, r6, lr}
 80096e0:	681d      	ldr	r5, [r3, #0]
 80096e2:	4606      	mov	r6, r0
 80096e4:	460c      	mov	r4, r1
 80096e6:	b125      	cbz	r5, 80096f2 <__swsetup_r+0x16>
 80096e8:	69ab      	ldr	r3, [r5, #24]
 80096ea:	b913      	cbnz	r3, 80096f2 <__swsetup_r+0x16>
 80096ec:	4628      	mov	r0, r5
 80096ee:	f000 f985 	bl	80099fc <__sinit>
 80096f2:	4b2e      	ldr	r3, [pc, #184]	; (80097ac <__swsetup_r+0xd0>)
 80096f4:	429c      	cmp	r4, r3
 80096f6:	d10f      	bne.n	8009718 <__swsetup_r+0x3c>
 80096f8:	686c      	ldr	r4, [r5, #4]
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009700:	0719      	lsls	r1, r3, #28
 8009702:	d42c      	bmi.n	800975e <__swsetup_r+0x82>
 8009704:	06dd      	lsls	r5, r3, #27
 8009706:	d411      	bmi.n	800972c <__swsetup_r+0x50>
 8009708:	2309      	movs	r3, #9
 800970a:	6033      	str	r3, [r6, #0]
 800970c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009716:	e03e      	b.n	8009796 <__swsetup_r+0xba>
 8009718:	4b25      	ldr	r3, [pc, #148]	; (80097b0 <__swsetup_r+0xd4>)
 800971a:	429c      	cmp	r4, r3
 800971c:	d101      	bne.n	8009722 <__swsetup_r+0x46>
 800971e:	68ac      	ldr	r4, [r5, #8]
 8009720:	e7eb      	b.n	80096fa <__swsetup_r+0x1e>
 8009722:	4b24      	ldr	r3, [pc, #144]	; (80097b4 <__swsetup_r+0xd8>)
 8009724:	429c      	cmp	r4, r3
 8009726:	bf08      	it	eq
 8009728:	68ec      	ldreq	r4, [r5, #12]
 800972a:	e7e6      	b.n	80096fa <__swsetup_r+0x1e>
 800972c:	0758      	lsls	r0, r3, #29
 800972e:	d512      	bpl.n	8009756 <__swsetup_r+0x7a>
 8009730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009732:	b141      	cbz	r1, 8009746 <__swsetup_r+0x6a>
 8009734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009738:	4299      	cmp	r1, r3
 800973a:	d002      	beq.n	8009742 <__swsetup_r+0x66>
 800973c:	4630      	mov	r0, r6
 800973e:	f7ff fbe3 	bl	8008f08 <_free_r>
 8009742:	2300      	movs	r3, #0
 8009744:	6363      	str	r3, [r4, #52]	; 0x34
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800974c:	81a3      	strh	r3, [r4, #12]
 800974e:	2300      	movs	r3, #0
 8009750:	6063      	str	r3, [r4, #4]
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f043 0308 	orr.w	r3, r3, #8
 800975c:	81a3      	strh	r3, [r4, #12]
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	b94b      	cbnz	r3, 8009776 <__swsetup_r+0x9a>
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800976c:	d003      	beq.n	8009776 <__swsetup_r+0x9a>
 800976e:	4621      	mov	r1, r4
 8009770:	4630      	mov	r0, r6
 8009772:	f000 fa05 	bl	8009b80 <__smakebuf_r>
 8009776:	89a0      	ldrh	r0, [r4, #12]
 8009778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800977c:	f010 0301 	ands.w	r3, r0, #1
 8009780:	d00a      	beq.n	8009798 <__swsetup_r+0xbc>
 8009782:	2300      	movs	r3, #0
 8009784:	60a3      	str	r3, [r4, #8]
 8009786:	6963      	ldr	r3, [r4, #20]
 8009788:	425b      	negs	r3, r3
 800978a:	61a3      	str	r3, [r4, #24]
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	b943      	cbnz	r3, 80097a2 <__swsetup_r+0xc6>
 8009790:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009794:	d1ba      	bne.n	800970c <__swsetup_r+0x30>
 8009796:	bd70      	pop	{r4, r5, r6, pc}
 8009798:	0781      	lsls	r1, r0, #30
 800979a:	bf58      	it	pl
 800979c:	6963      	ldrpl	r3, [r4, #20]
 800979e:	60a3      	str	r3, [r4, #8]
 80097a0:	e7f4      	b.n	800978c <__swsetup_r+0xb0>
 80097a2:	2000      	movs	r0, #0
 80097a4:	e7f7      	b.n	8009796 <__swsetup_r+0xba>
 80097a6:	bf00      	nop
 80097a8:	20000010 	.word	0x20000010
 80097ac:	0800a1cc 	.word	0x0800a1cc
 80097b0:	0800a1ec 	.word	0x0800a1ec
 80097b4:	0800a1ac 	.word	0x0800a1ac

080097b8 <abort>:
 80097b8:	b508      	push	{r3, lr}
 80097ba:	2006      	movs	r0, #6
 80097bc:	f000 fa50 	bl	8009c60 <raise>
 80097c0:	2001      	movs	r0, #1
 80097c2:	f7f8 fba5 	bl	8001f10 <_exit>
	...

080097c8 <__sflush_r>:
 80097c8:	898a      	ldrh	r2, [r1, #12]
 80097ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ce:	4605      	mov	r5, r0
 80097d0:	0710      	lsls	r0, r2, #28
 80097d2:	460c      	mov	r4, r1
 80097d4:	d458      	bmi.n	8009888 <__sflush_r+0xc0>
 80097d6:	684b      	ldr	r3, [r1, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	dc05      	bgt.n	80097e8 <__sflush_r+0x20>
 80097dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097de:	2b00      	cmp	r3, #0
 80097e0:	dc02      	bgt.n	80097e8 <__sflush_r+0x20>
 80097e2:	2000      	movs	r0, #0
 80097e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ea:	2e00      	cmp	r6, #0
 80097ec:	d0f9      	beq.n	80097e2 <__sflush_r+0x1a>
 80097ee:	2300      	movs	r3, #0
 80097f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097f4:	682f      	ldr	r7, [r5, #0]
 80097f6:	602b      	str	r3, [r5, #0]
 80097f8:	d032      	beq.n	8009860 <__sflush_r+0x98>
 80097fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	075a      	lsls	r2, r3, #29
 8009800:	d505      	bpl.n	800980e <__sflush_r+0x46>
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	1ac0      	subs	r0, r0, r3
 8009806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009808:	b10b      	cbz	r3, 800980e <__sflush_r+0x46>
 800980a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800980c:	1ac0      	subs	r0, r0, r3
 800980e:	2300      	movs	r3, #0
 8009810:	4602      	mov	r2, r0
 8009812:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009814:	6a21      	ldr	r1, [r4, #32]
 8009816:	4628      	mov	r0, r5
 8009818:	47b0      	blx	r6
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	d106      	bne.n	800982e <__sflush_r+0x66>
 8009820:	6829      	ldr	r1, [r5, #0]
 8009822:	291d      	cmp	r1, #29
 8009824:	d82c      	bhi.n	8009880 <__sflush_r+0xb8>
 8009826:	4a2a      	ldr	r2, [pc, #168]	; (80098d0 <__sflush_r+0x108>)
 8009828:	40ca      	lsrs	r2, r1
 800982a:	07d6      	lsls	r6, r2, #31
 800982c:	d528      	bpl.n	8009880 <__sflush_r+0xb8>
 800982e:	2200      	movs	r2, #0
 8009830:	6062      	str	r2, [r4, #4]
 8009832:	04d9      	lsls	r1, r3, #19
 8009834:	6922      	ldr	r2, [r4, #16]
 8009836:	6022      	str	r2, [r4, #0]
 8009838:	d504      	bpl.n	8009844 <__sflush_r+0x7c>
 800983a:	1c42      	adds	r2, r0, #1
 800983c:	d101      	bne.n	8009842 <__sflush_r+0x7a>
 800983e:	682b      	ldr	r3, [r5, #0]
 8009840:	b903      	cbnz	r3, 8009844 <__sflush_r+0x7c>
 8009842:	6560      	str	r0, [r4, #84]	; 0x54
 8009844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009846:	602f      	str	r7, [r5, #0]
 8009848:	2900      	cmp	r1, #0
 800984a:	d0ca      	beq.n	80097e2 <__sflush_r+0x1a>
 800984c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009850:	4299      	cmp	r1, r3
 8009852:	d002      	beq.n	800985a <__sflush_r+0x92>
 8009854:	4628      	mov	r0, r5
 8009856:	f7ff fb57 	bl	8008f08 <_free_r>
 800985a:	2000      	movs	r0, #0
 800985c:	6360      	str	r0, [r4, #52]	; 0x34
 800985e:	e7c1      	b.n	80097e4 <__sflush_r+0x1c>
 8009860:	6a21      	ldr	r1, [r4, #32]
 8009862:	2301      	movs	r3, #1
 8009864:	4628      	mov	r0, r5
 8009866:	47b0      	blx	r6
 8009868:	1c41      	adds	r1, r0, #1
 800986a:	d1c7      	bne.n	80097fc <__sflush_r+0x34>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0c4      	beq.n	80097fc <__sflush_r+0x34>
 8009872:	2b1d      	cmp	r3, #29
 8009874:	d001      	beq.n	800987a <__sflush_r+0xb2>
 8009876:	2b16      	cmp	r3, #22
 8009878:	d101      	bne.n	800987e <__sflush_r+0xb6>
 800987a:	602f      	str	r7, [r5, #0]
 800987c:	e7b1      	b.n	80097e2 <__sflush_r+0x1a>
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	e7ad      	b.n	80097e4 <__sflush_r+0x1c>
 8009888:	690f      	ldr	r7, [r1, #16]
 800988a:	2f00      	cmp	r7, #0
 800988c:	d0a9      	beq.n	80097e2 <__sflush_r+0x1a>
 800988e:	0793      	lsls	r3, r2, #30
 8009890:	680e      	ldr	r6, [r1, #0]
 8009892:	bf08      	it	eq
 8009894:	694b      	ldreq	r3, [r1, #20]
 8009896:	600f      	str	r7, [r1, #0]
 8009898:	bf18      	it	ne
 800989a:	2300      	movne	r3, #0
 800989c:	eba6 0807 	sub.w	r8, r6, r7
 80098a0:	608b      	str	r3, [r1, #8]
 80098a2:	f1b8 0f00 	cmp.w	r8, #0
 80098a6:	dd9c      	ble.n	80097e2 <__sflush_r+0x1a>
 80098a8:	6a21      	ldr	r1, [r4, #32]
 80098aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098ac:	4643      	mov	r3, r8
 80098ae:	463a      	mov	r2, r7
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b0      	blx	r6
 80098b4:	2800      	cmp	r0, #0
 80098b6:	dc06      	bgt.n	80098c6 <__sflush_r+0xfe>
 80098b8:	89a3      	ldrh	r3, [r4, #12]
 80098ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098be:	81a3      	strh	r3, [r4, #12]
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098c4:	e78e      	b.n	80097e4 <__sflush_r+0x1c>
 80098c6:	4407      	add	r7, r0
 80098c8:	eba8 0800 	sub.w	r8, r8, r0
 80098cc:	e7e9      	b.n	80098a2 <__sflush_r+0xda>
 80098ce:	bf00      	nop
 80098d0:	20400001 	.word	0x20400001

080098d4 <_fflush_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	690b      	ldr	r3, [r1, #16]
 80098d8:	4605      	mov	r5, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	b913      	cbnz	r3, 80098e4 <_fflush_r+0x10>
 80098de:	2500      	movs	r5, #0
 80098e0:	4628      	mov	r0, r5
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
 80098e4:	b118      	cbz	r0, 80098ee <_fflush_r+0x1a>
 80098e6:	6983      	ldr	r3, [r0, #24]
 80098e8:	b90b      	cbnz	r3, 80098ee <_fflush_r+0x1a>
 80098ea:	f000 f887 	bl	80099fc <__sinit>
 80098ee:	4b14      	ldr	r3, [pc, #80]	; (8009940 <_fflush_r+0x6c>)
 80098f0:	429c      	cmp	r4, r3
 80098f2:	d11b      	bne.n	800992c <_fflush_r+0x58>
 80098f4:	686c      	ldr	r4, [r5, #4]
 80098f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d0ef      	beq.n	80098de <_fflush_r+0xa>
 80098fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009900:	07d0      	lsls	r0, r2, #31
 8009902:	d404      	bmi.n	800990e <_fflush_r+0x3a>
 8009904:	0599      	lsls	r1, r3, #22
 8009906:	d402      	bmi.n	800990e <_fflush_r+0x3a>
 8009908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800990a:	f7ff fcda 	bl	80092c2 <__retarget_lock_acquire_recursive>
 800990e:	4628      	mov	r0, r5
 8009910:	4621      	mov	r1, r4
 8009912:	f7ff ff59 	bl	80097c8 <__sflush_r>
 8009916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009918:	07da      	lsls	r2, r3, #31
 800991a:	4605      	mov	r5, r0
 800991c:	d4e0      	bmi.n	80098e0 <_fflush_r+0xc>
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	059b      	lsls	r3, r3, #22
 8009922:	d4dd      	bmi.n	80098e0 <_fflush_r+0xc>
 8009924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009926:	f7ff fccd 	bl	80092c4 <__retarget_lock_release_recursive>
 800992a:	e7d9      	b.n	80098e0 <_fflush_r+0xc>
 800992c:	4b05      	ldr	r3, [pc, #20]	; (8009944 <_fflush_r+0x70>)
 800992e:	429c      	cmp	r4, r3
 8009930:	d101      	bne.n	8009936 <_fflush_r+0x62>
 8009932:	68ac      	ldr	r4, [r5, #8]
 8009934:	e7df      	b.n	80098f6 <_fflush_r+0x22>
 8009936:	4b04      	ldr	r3, [pc, #16]	; (8009948 <_fflush_r+0x74>)
 8009938:	429c      	cmp	r4, r3
 800993a:	bf08      	it	eq
 800993c:	68ec      	ldreq	r4, [r5, #12]
 800993e:	e7da      	b.n	80098f6 <_fflush_r+0x22>
 8009940:	0800a1cc 	.word	0x0800a1cc
 8009944:	0800a1ec 	.word	0x0800a1ec
 8009948:	0800a1ac 	.word	0x0800a1ac

0800994c <std>:
 800994c:	2300      	movs	r3, #0
 800994e:	b510      	push	{r4, lr}
 8009950:	4604      	mov	r4, r0
 8009952:	e9c0 3300 	strd	r3, r3, [r0]
 8009956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800995a:	6083      	str	r3, [r0, #8]
 800995c:	8181      	strh	r1, [r0, #12]
 800995e:	6643      	str	r3, [r0, #100]	; 0x64
 8009960:	81c2      	strh	r2, [r0, #14]
 8009962:	6183      	str	r3, [r0, #24]
 8009964:	4619      	mov	r1, r3
 8009966:	2208      	movs	r2, #8
 8009968:	305c      	adds	r0, #92	; 0x5c
 800996a:	f7fd fba3 	bl	80070b4 <memset>
 800996e:	4b05      	ldr	r3, [pc, #20]	; (8009984 <std+0x38>)
 8009970:	6263      	str	r3, [r4, #36]	; 0x24
 8009972:	4b05      	ldr	r3, [pc, #20]	; (8009988 <std+0x3c>)
 8009974:	62a3      	str	r3, [r4, #40]	; 0x28
 8009976:	4b05      	ldr	r3, [pc, #20]	; (800998c <std+0x40>)
 8009978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800997a:	4b05      	ldr	r3, [pc, #20]	; (8009990 <std+0x44>)
 800997c:	6224      	str	r4, [r4, #32]
 800997e:	6323      	str	r3, [r4, #48]	; 0x30
 8009980:	bd10      	pop	{r4, pc}
 8009982:	bf00      	nop
 8009984:	08009c99 	.word	0x08009c99
 8009988:	08009cbb 	.word	0x08009cbb
 800998c:	08009cf3 	.word	0x08009cf3
 8009990:	08009d17 	.word	0x08009d17

08009994 <_cleanup_r>:
 8009994:	4901      	ldr	r1, [pc, #4]	; (800999c <_cleanup_r+0x8>)
 8009996:	f000 b8af 	b.w	8009af8 <_fwalk_reent>
 800999a:	bf00      	nop
 800999c:	080098d5 	.word	0x080098d5

080099a0 <__sfmoreglue>:
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	1e4a      	subs	r2, r1, #1
 80099a4:	2568      	movs	r5, #104	; 0x68
 80099a6:	4355      	muls	r5, r2
 80099a8:	460e      	mov	r6, r1
 80099aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099ae:	f7fd fb99 	bl	80070e4 <_malloc_r>
 80099b2:	4604      	mov	r4, r0
 80099b4:	b140      	cbz	r0, 80099c8 <__sfmoreglue+0x28>
 80099b6:	2100      	movs	r1, #0
 80099b8:	e9c0 1600 	strd	r1, r6, [r0]
 80099bc:	300c      	adds	r0, #12
 80099be:	60a0      	str	r0, [r4, #8]
 80099c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099c4:	f7fd fb76 	bl	80070b4 <memset>
 80099c8:	4620      	mov	r0, r4
 80099ca:	bd70      	pop	{r4, r5, r6, pc}

080099cc <__sfp_lock_acquire>:
 80099cc:	4801      	ldr	r0, [pc, #4]	; (80099d4 <__sfp_lock_acquire+0x8>)
 80099ce:	f7ff bc78 	b.w	80092c2 <__retarget_lock_acquire_recursive>
 80099d2:	bf00      	nop
 80099d4:	200007e8 	.word	0x200007e8

080099d8 <__sfp_lock_release>:
 80099d8:	4801      	ldr	r0, [pc, #4]	; (80099e0 <__sfp_lock_release+0x8>)
 80099da:	f7ff bc73 	b.w	80092c4 <__retarget_lock_release_recursive>
 80099de:	bf00      	nop
 80099e0:	200007e8 	.word	0x200007e8

080099e4 <__sinit_lock_acquire>:
 80099e4:	4801      	ldr	r0, [pc, #4]	; (80099ec <__sinit_lock_acquire+0x8>)
 80099e6:	f7ff bc6c 	b.w	80092c2 <__retarget_lock_acquire_recursive>
 80099ea:	bf00      	nop
 80099ec:	200007e3 	.word	0x200007e3

080099f0 <__sinit_lock_release>:
 80099f0:	4801      	ldr	r0, [pc, #4]	; (80099f8 <__sinit_lock_release+0x8>)
 80099f2:	f7ff bc67 	b.w	80092c4 <__retarget_lock_release_recursive>
 80099f6:	bf00      	nop
 80099f8:	200007e3 	.word	0x200007e3

080099fc <__sinit>:
 80099fc:	b510      	push	{r4, lr}
 80099fe:	4604      	mov	r4, r0
 8009a00:	f7ff fff0 	bl	80099e4 <__sinit_lock_acquire>
 8009a04:	69a3      	ldr	r3, [r4, #24]
 8009a06:	b11b      	cbz	r3, 8009a10 <__sinit+0x14>
 8009a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a0c:	f7ff bff0 	b.w	80099f0 <__sinit_lock_release>
 8009a10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a14:	6523      	str	r3, [r4, #80]	; 0x50
 8009a16:	4b13      	ldr	r3, [pc, #76]	; (8009a64 <__sinit+0x68>)
 8009a18:	4a13      	ldr	r2, [pc, #76]	; (8009a68 <__sinit+0x6c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a1e:	42a3      	cmp	r3, r4
 8009a20:	bf04      	itt	eq
 8009a22:	2301      	moveq	r3, #1
 8009a24:	61a3      	streq	r3, [r4, #24]
 8009a26:	4620      	mov	r0, r4
 8009a28:	f000 f820 	bl	8009a6c <__sfp>
 8009a2c:	6060      	str	r0, [r4, #4]
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f000 f81c 	bl	8009a6c <__sfp>
 8009a34:	60a0      	str	r0, [r4, #8]
 8009a36:	4620      	mov	r0, r4
 8009a38:	f000 f818 	bl	8009a6c <__sfp>
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	60e0      	str	r0, [r4, #12]
 8009a40:	2104      	movs	r1, #4
 8009a42:	6860      	ldr	r0, [r4, #4]
 8009a44:	f7ff ff82 	bl	800994c <std>
 8009a48:	68a0      	ldr	r0, [r4, #8]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	2109      	movs	r1, #9
 8009a4e:	f7ff ff7d 	bl	800994c <std>
 8009a52:	68e0      	ldr	r0, [r4, #12]
 8009a54:	2202      	movs	r2, #2
 8009a56:	2112      	movs	r1, #18
 8009a58:	f7ff ff78 	bl	800994c <std>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	61a3      	str	r3, [r4, #24]
 8009a60:	e7d2      	b.n	8009a08 <__sinit+0xc>
 8009a62:	bf00      	nop
 8009a64:	08009e28 	.word	0x08009e28
 8009a68:	08009995 	.word	0x08009995

08009a6c <__sfp>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	4607      	mov	r7, r0
 8009a70:	f7ff ffac 	bl	80099cc <__sfp_lock_acquire>
 8009a74:	4b1e      	ldr	r3, [pc, #120]	; (8009af0 <__sfp+0x84>)
 8009a76:	681e      	ldr	r6, [r3, #0]
 8009a78:	69b3      	ldr	r3, [r6, #24]
 8009a7a:	b913      	cbnz	r3, 8009a82 <__sfp+0x16>
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f7ff ffbd 	bl	80099fc <__sinit>
 8009a82:	3648      	adds	r6, #72	; 0x48
 8009a84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	d503      	bpl.n	8009a94 <__sfp+0x28>
 8009a8c:	6833      	ldr	r3, [r6, #0]
 8009a8e:	b30b      	cbz	r3, 8009ad4 <__sfp+0x68>
 8009a90:	6836      	ldr	r6, [r6, #0]
 8009a92:	e7f7      	b.n	8009a84 <__sfp+0x18>
 8009a94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a98:	b9d5      	cbnz	r5, 8009ad0 <__sfp+0x64>
 8009a9a:	4b16      	ldr	r3, [pc, #88]	; (8009af4 <__sfp+0x88>)
 8009a9c:	60e3      	str	r3, [r4, #12]
 8009a9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009aa2:	6665      	str	r5, [r4, #100]	; 0x64
 8009aa4:	f7ff fc0c 	bl	80092c0 <__retarget_lock_init_recursive>
 8009aa8:	f7ff ff96 	bl	80099d8 <__sfp_lock_release>
 8009aac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ab0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ab4:	6025      	str	r5, [r4, #0]
 8009ab6:	61a5      	str	r5, [r4, #24]
 8009ab8:	2208      	movs	r2, #8
 8009aba:	4629      	mov	r1, r5
 8009abc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ac0:	f7fd faf8 	bl	80070b4 <memset>
 8009ac4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ac8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009acc:	4620      	mov	r0, r4
 8009ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ad0:	3468      	adds	r4, #104	; 0x68
 8009ad2:	e7d9      	b.n	8009a88 <__sfp+0x1c>
 8009ad4:	2104      	movs	r1, #4
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	f7ff ff62 	bl	80099a0 <__sfmoreglue>
 8009adc:	4604      	mov	r4, r0
 8009ade:	6030      	str	r0, [r6, #0]
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d1d5      	bne.n	8009a90 <__sfp+0x24>
 8009ae4:	f7ff ff78 	bl	80099d8 <__sfp_lock_release>
 8009ae8:	230c      	movs	r3, #12
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	e7ee      	b.n	8009acc <__sfp+0x60>
 8009aee:	bf00      	nop
 8009af0:	08009e28 	.word	0x08009e28
 8009af4:	ffff0001 	.word	0xffff0001

08009af8 <_fwalk_reent>:
 8009af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009afc:	4606      	mov	r6, r0
 8009afe:	4688      	mov	r8, r1
 8009b00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b04:	2700      	movs	r7, #0
 8009b06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b0a:	f1b9 0901 	subs.w	r9, r9, #1
 8009b0e:	d505      	bpl.n	8009b1c <_fwalk_reent+0x24>
 8009b10:	6824      	ldr	r4, [r4, #0]
 8009b12:	2c00      	cmp	r4, #0
 8009b14:	d1f7      	bne.n	8009b06 <_fwalk_reent+0xe>
 8009b16:	4638      	mov	r0, r7
 8009b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b1c:	89ab      	ldrh	r3, [r5, #12]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d907      	bls.n	8009b32 <_fwalk_reent+0x3a>
 8009b22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b26:	3301      	adds	r3, #1
 8009b28:	d003      	beq.n	8009b32 <_fwalk_reent+0x3a>
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	47c0      	blx	r8
 8009b30:	4307      	orrs	r7, r0
 8009b32:	3568      	adds	r5, #104	; 0x68
 8009b34:	e7e9      	b.n	8009b0a <_fwalk_reent+0x12>

08009b36 <__swhatbuf_r>:
 8009b36:	b570      	push	{r4, r5, r6, lr}
 8009b38:	460e      	mov	r6, r1
 8009b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b3e:	2900      	cmp	r1, #0
 8009b40:	b096      	sub	sp, #88	; 0x58
 8009b42:	4614      	mov	r4, r2
 8009b44:	461d      	mov	r5, r3
 8009b46:	da07      	bge.n	8009b58 <__swhatbuf_r+0x22>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	602b      	str	r3, [r5, #0]
 8009b4c:	89b3      	ldrh	r3, [r6, #12]
 8009b4e:	061a      	lsls	r2, r3, #24
 8009b50:	d410      	bmi.n	8009b74 <__swhatbuf_r+0x3e>
 8009b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b56:	e00e      	b.n	8009b76 <__swhatbuf_r+0x40>
 8009b58:	466a      	mov	r2, sp
 8009b5a:	f000 f903 	bl	8009d64 <_fstat_r>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	dbf2      	blt.n	8009b48 <__swhatbuf_r+0x12>
 8009b62:	9a01      	ldr	r2, [sp, #4]
 8009b64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b6c:	425a      	negs	r2, r3
 8009b6e:	415a      	adcs	r2, r3
 8009b70:	602a      	str	r2, [r5, #0]
 8009b72:	e7ee      	b.n	8009b52 <__swhatbuf_r+0x1c>
 8009b74:	2340      	movs	r3, #64	; 0x40
 8009b76:	2000      	movs	r0, #0
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	b016      	add	sp, #88	; 0x58
 8009b7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b80 <__smakebuf_r>:
 8009b80:	898b      	ldrh	r3, [r1, #12]
 8009b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b84:	079d      	lsls	r5, r3, #30
 8009b86:	4606      	mov	r6, r0
 8009b88:	460c      	mov	r4, r1
 8009b8a:	d507      	bpl.n	8009b9c <__smakebuf_r+0x1c>
 8009b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	6123      	str	r3, [r4, #16]
 8009b94:	2301      	movs	r3, #1
 8009b96:	6163      	str	r3, [r4, #20]
 8009b98:	b002      	add	sp, #8
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	ab01      	add	r3, sp, #4
 8009b9e:	466a      	mov	r2, sp
 8009ba0:	f7ff ffc9 	bl	8009b36 <__swhatbuf_r>
 8009ba4:	9900      	ldr	r1, [sp, #0]
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f7fd fa9b 	bl	80070e4 <_malloc_r>
 8009bae:	b948      	cbnz	r0, 8009bc4 <__smakebuf_r+0x44>
 8009bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bb4:	059a      	lsls	r2, r3, #22
 8009bb6:	d4ef      	bmi.n	8009b98 <__smakebuf_r+0x18>
 8009bb8:	f023 0303 	bic.w	r3, r3, #3
 8009bbc:	f043 0302 	orr.w	r3, r3, #2
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	e7e3      	b.n	8009b8c <__smakebuf_r+0xc>
 8009bc4:	4b0d      	ldr	r3, [pc, #52]	; (8009bfc <__smakebuf_r+0x7c>)
 8009bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	6020      	str	r0, [r4, #0]
 8009bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd0:	81a3      	strh	r3, [r4, #12]
 8009bd2:	9b00      	ldr	r3, [sp, #0]
 8009bd4:	6163      	str	r3, [r4, #20]
 8009bd6:	9b01      	ldr	r3, [sp, #4]
 8009bd8:	6120      	str	r0, [r4, #16]
 8009bda:	b15b      	cbz	r3, 8009bf4 <__smakebuf_r+0x74>
 8009bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be0:	4630      	mov	r0, r6
 8009be2:	f000 f8d1 	bl	8009d88 <_isatty_r>
 8009be6:	b128      	cbz	r0, 8009bf4 <__smakebuf_r+0x74>
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	f023 0303 	bic.w	r3, r3, #3
 8009bee:	f043 0301 	orr.w	r3, r3, #1
 8009bf2:	81a3      	strh	r3, [r4, #12]
 8009bf4:	89a0      	ldrh	r0, [r4, #12]
 8009bf6:	4305      	orrs	r5, r0
 8009bf8:	81a5      	strh	r5, [r4, #12]
 8009bfa:	e7cd      	b.n	8009b98 <__smakebuf_r+0x18>
 8009bfc:	08009995 	.word	0x08009995

08009c00 <_malloc_usable_size_r>:
 8009c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c04:	1f18      	subs	r0, r3, #4
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	bfbc      	itt	lt
 8009c0a:	580b      	ldrlt	r3, [r1, r0]
 8009c0c:	18c0      	addlt	r0, r0, r3
 8009c0e:	4770      	bx	lr

08009c10 <_raise_r>:
 8009c10:	291f      	cmp	r1, #31
 8009c12:	b538      	push	{r3, r4, r5, lr}
 8009c14:	4604      	mov	r4, r0
 8009c16:	460d      	mov	r5, r1
 8009c18:	d904      	bls.n	8009c24 <_raise_r+0x14>
 8009c1a:	2316      	movs	r3, #22
 8009c1c:	6003      	str	r3, [r0, #0]
 8009c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c26:	b112      	cbz	r2, 8009c2e <_raise_r+0x1e>
 8009c28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c2c:	b94b      	cbnz	r3, 8009c42 <_raise_r+0x32>
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f000 f830 	bl	8009c94 <_getpid_r>
 8009c34:	462a      	mov	r2, r5
 8009c36:	4601      	mov	r1, r0
 8009c38:	4620      	mov	r0, r4
 8009c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c3e:	f000 b817 	b.w	8009c70 <_kill_r>
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d00a      	beq.n	8009c5c <_raise_r+0x4c>
 8009c46:	1c59      	adds	r1, r3, #1
 8009c48:	d103      	bne.n	8009c52 <_raise_r+0x42>
 8009c4a:	2316      	movs	r3, #22
 8009c4c:	6003      	str	r3, [r0, #0]
 8009c4e:	2001      	movs	r0, #1
 8009c50:	e7e7      	b.n	8009c22 <_raise_r+0x12>
 8009c52:	2400      	movs	r4, #0
 8009c54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c58:	4628      	mov	r0, r5
 8009c5a:	4798      	blx	r3
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	e7e0      	b.n	8009c22 <_raise_r+0x12>

08009c60 <raise>:
 8009c60:	4b02      	ldr	r3, [pc, #8]	; (8009c6c <raise+0xc>)
 8009c62:	4601      	mov	r1, r0
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	f7ff bfd3 	b.w	8009c10 <_raise_r>
 8009c6a:	bf00      	nop
 8009c6c:	20000010 	.word	0x20000010

08009c70 <_kill_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4d07      	ldr	r5, [pc, #28]	; (8009c90 <_kill_r+0x20>)
 8009c74:	2300      	movs	r3, #0
 8009c76:	4604      	mov	r4, r0
 8009c78:	4608      	mov	r0, r1
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	602b      	str	r3, [r5, #0]
 8009c7e:	f7f8 f937 	bl	8001ef0 <_kill>
 8009c82:	1c43      	adds	r3, r0, #1
 8009c84:	d102      	bne.n	8009c8c <_kill_r+0x1c>
 8009c86:	682b      	ldr	r3, [r5, #0]
 8009c88:	b103      	cbz	r3, 8009c8c <_kill_r+0x1c>
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	bd38      	pop	{r3, r4, r5, pc}
 8009c8e:	bf00      	nop
 8009c90:	200007dc 	.word	0x200007dc

08009c94 <_getpid_r>:
 8009c94:	f7f8 b924 	b.w	8001ee0 <_getpid>

08009c98 <__sread>:
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca0:	f000 f894 	bl	8009dcc <_read_r>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	bfab      	itete	ge
 8009ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009caa:	89a3      	ldrhlt	r3, [r4, #12]
 8009cac:	181b      	addge	r3, r3, r0
 8009cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cb2:	bfac      	ite	ge
 8009cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cb6:	81a3      	strhlt	r3, [r4, #12]
 8009cb8:	bd10      	pop	{r4, pc}

08009cba <__swrite>:
 8009cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbe:	461f      	mov	r7, r3
 8009cc0:	898b      	ldrh	r3, [r1, #12]
 8009cc2:	05db      	lsls	r3, r3, #23
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	4616      	mov	r6, r2
 8009cca:	d505      	bpl.n	8009cd8 <__swrite+0x1e>
 8009ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f000 f868 	bl	8009da8 <_lseek_r>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	463b      	mov	r3, r7
 8009ce8:	4628      	mov	r0, r5
 8009cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cee:	f000 b817 	b.w	8009d20 <_write_r>

08009cf2 <__sseek>:
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfa:	f000 f855 	bl	8009da8 <_lseek_r>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	bf15      	itete	ne
 8009d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d0e:	81a3      	strheq	r3, [r4, #12]
 8009d10:	bf18      	it	ne
 8009d12:	81a3      	strhne	r3, [r4, #12]
 8009d14:	bd10      	pop	{r4, pc}

08009d16 <__sclose>:
 8009d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1a:	f000 b813 	b.w	8009d44 <_close_r>
	...

08009d20 <_write_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4d07      	ldr	r5, [pc, #28]	; (8009d40 <_write_r+0x20>)
 8009d24:	4604      	mov	r4, r0
 8009d26:	4608      	mov	r0, r1
 8009d28:	4611      	mov	r1, r2
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	602a      	str	r2, [r5, #0]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f7f8 f915 	bl	8001f5e <_write>
 8009d34:	1c43      	adds	r3, r0, #1
 8009d36:	d102      	bne.n	8009d3e <_write_r+0x1e>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	b103      	cbz	r3, 8009d3e <_write_r+0x1e>
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	bd38      	pop	{r3, r4, r5, pc}
 8009d40:	200007dc 	.word	0x200007dc

08009d44 <_close_r>:
 8009d44:	b538      	push	{r3, r4, r5, lr}
 8009d46:	4d06      	ldr	r5, [pc, #24]	; (8009d60 <_close_r+0x1c>)
 8009d48:	2300      	movs	r3, #0
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	4608      	mov	r0, r1
 8009d4e:	602b      	str	r3, [r5, #0]
 8009d50:	f7f8 f921 	bl	8001f96 <_close>
 8009d54:	1c43      	adds	r3, r0, #1
 8009d56:	d102      	bne.n	8009d5e <_close_r+0x1a>
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	b103      	cbz	r3, 8009d5e <_close_r+0x1a>
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	bd38      	pop	{r3, r4, r5, pc}
 8009d60:	200007dc 	.word	0x200007dc

08009d64 <_fstat_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	4d07      	ldr	r5, [pc, #28]	; (8009d84 <_fstat_r+0x20>)
 8009d68:	2300      	movs	r3, #0
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	4611      	mov	r1, r2
 8009d70:	602b      	str	r3, [r5, #0]
 8009d72:	f7f8 f91c 	bl	8001fae <_fstat>
 8009d76:	1c43      	adds	r3, r0, #1
 8009d78:	d102      	bne.n	8009d80 <_fstat_r+0x1c>
 8009d7a:	682b      	ldr	r3, [r5, #0]
 8009d7c:	b103      	cbz	r3, 8009d80 <_fstat_r+0x1c>
 8009d7e:	6023      	str	r3, [r4, #0]
 8009d80:	bd38      	pop	{r3, r4, r5, pc}
 8009d82:	bf00      	nop
 8009d84:	200007dc 	.word	0x200007dc

08009d88 <_isatty_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4d06      	ldr	r5, [pc, #24]	; (8009da4 <_isatty_r+0x1c>)
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4604      	mov	r4, r0
 8009d90:	4608      	mov	r0, r1
 8009d92:	602b      	str	r3, [r5, #0]
 8009d94:	f7f8 f91b 	bl	8001fce <_isatty>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d102      	bne.n	8009da2 <_isatty_r+0x1a>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	b103      	cbz	r3, 8009da2 <_isatty_r+0x1a>
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	200007dc 	.word	0x200007dc

08009da8 <_lseek_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d07      	ldr	r5, [pc, #28]	; (8009dc8 <_lseek_r+0x20>)
 8009dac:	4604      	mov	r4, r0
 8009dae:	4608      	mov	r0, r1
 8009db0:	4611      	mov	r1, r2
 8009db2:	2200      	movs	r2, #0
 8009db4:	602a      	str	r2, [r5, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	f7f8 f914 	bl	8001fe4 <_lseek>
 8009dbc:	1c43      	adds	r3, r0, #1
 8009dbe:	d102      	bne.n	8009dc6 <_lseek_r+0x1e>
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	b103      	cbz	r3, 8009dc6 <_lseek_r+0x1e>
 8009dc4:	6023      	str	r3, [r4, #0]
 8009dc6:	bd38      	pop	{r3, r4, r5, pc}
 8009dc8:	200007dc 	.word	0x200007dc

08009dcc <_read_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4d07      	ldr	r5, [pc, #28]	; (8009dec <_read_r+0x20>)
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	4608      	mov	r0, r1
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	602a      	str	r2, [r5, #0]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	f7f8 f8a2 	bl	8001f24 <_read>
 8009de0:	1c43      	adds	r3, r0, #1
 8009de2:	d102      	bne.n	8009dea <_read_r+0x1e>
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	b103      	cbz	r3, 8009dea <_read_r+0x1e>
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	200007dc 	.word	0x200007dc

08009df0 <_init>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	bf00      	nop
 8009df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009df6:	bc08      	pop	{r3}
 8009df8:	469e      	mov	lr, r3
 8009dfa:	4770      	bx	lr

08009dfc <_fini>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	bf00      	nop
 8009e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e02:	bc08      	pop	{r3}
 8009e04:	469e      	mov	lr, r3
 8009e06:	4770      	bx	lr
